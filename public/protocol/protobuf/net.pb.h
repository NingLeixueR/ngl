// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_net_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_net_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023002 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "db.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_net_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_net_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_net_2eproto;
namespace pbnet {
class MATCHING_MEMBER;
struct MATCHING_MEMBERDefaultTypeInternal;
extern MATCHING_MEMBERDefaultTypeInternal _MATCHING_MEMBER_default_instance_;
class PROBUFF_NET_ACOUNT_LOGIN;
struct PROBUFF_NET_ACOUNT_LOGINDefaultTypeInternal;
extern PROBUFF_NET_ACOUNT_LOGINDefaultTypeInternal _PROBUFF_NET_ACOUNT_LOGIN_default_instance_;
class PROBUFF_NET_ACOUNT_LOGIN_RESPONSE;
struct PROBUFF_NET_ACOUNT_LOGIN_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_ACOUNT_LOGIN_RESPONSEDefaultTypeInternal _PROBUFF_NET_ACOUNT_LOGIN_RESPONSE_default_instance_;
class PROBUFF_NET_BAG_SYNC;
struct PROBUFF_NET_BAG_SYNCDefaultTypeInternal;
extern PROBUFF_NET_BAG_SYNCDefaultTypeInternal _PROBUFF_NET_BAG_SYNC_default_instance_;
class PROBUFF_NET_BAG_SYNC_RESPONSE;
struct PROBUFF_NET_BAG_SYNC_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_BAG_SYNC_RESPONSEDefaultTypeInternal _PROBUFF_NET_BAG_SYNC_RESPONSE_default_instance_;
class PROBUFF_NET_BAG_UPDATE;
struct PROBUFF_NET_BAG_UPDATEDefaultTypeInternal;
extern PROBUFF_NET_BAG_UPDATEDefaultTypeInternal _PROBUFF_NET_BAG_UPDATE_default_instance_;
class PROBUFF_NET_BAG_UPDATE_RESPONSE;
struct PROBUFF_NET_BAG_UPDATE_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_BAG_UPDATE_RESPONSEDefaultTypeInternal _PROBUFF_NET_BAG_UPDATE_RESPONSE_default_instance_;
class PROBUFF_NET_BAG_UPDATE_RESPONSE_additem;
struct PROBUFF_NET_BAG_UPDATE_RESPONSE_additemDefaultTypeInternal;
extern PROBUFF_NET_BAG_UPDATE_RESPONSE_additemDefaultTypeInternal _PROBUFF_NET_BAG_UPDATE_RESPONSE_additem_default_instance_;
class PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem;
struct PROBUFF_NET_BAG_UPDATE_RESPONSE_delitemDefaultTypeInternal;
extern PROBUFF_NET_BAG_UPDATE_RESPONSE_delitemDefaultTypeInternal _PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem_default_instance_;
class PROBUFF_NET_CHANGE_ANGLE;
struct PROBUFF_NET_CHANGE_ANGLEDefaultTypeInternal;
extern PROBUFF_NET_CHANGE_ANGLEDefaultTypeInternal _PROBUFF_NET_CHANGE_ANGLE_default_instance_;
class PROBUFF_NET_CHAT;
struct PROBUFF_NET_CHATDefaultTypeInternal;
extern PROBUFF_NET_CHATDefaultTypeInternal _PROBUFF_NET_CHAT_default_instance_;
class PROBUFF_NET_CHAT_RESPONSE;
struct PROBUFF_NET_CHAT_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_CHAT_RESPONSEDefaultTypeInternal _PROBUFF_NET_CHAT_RESPONSE_default_instance_;
class PROBUFF_NET_CMD;
struct PROBUFF_NET_CMDDefaultTypeInternal;
extern PROBUFF_NET_CMDDefaultTypeInternal _PROBUFF_NET_CMD_default_instance_;
class PROBUFF_NET_ENTER_LEAVE_VIEW;
struct PROBUFF_NET_ENTER_LEAVE_VIEWDefaultTypeInternal;
extern PROBUFF_NET_ENTER_LEAVE_VIEWDefaultTypeInternal _PROBUFF_NET_ENTER_LEAVE_VIEW_default_instance_;
class PROBUFF_NET_ENTER_PLAYS;
struct PROBUFF_NET_ENTER_PLAYSDefaultTypeInternal;
extern PROBUFF_NET_ENTER_PLAYSDefaultTypeInternal _PROBUFF_NET_ENTER_PLAYS_default_instance_;
class PROBUFF_NET_ERROR;
struct PROBUFF_NET_ERRORDefaultTypeInternal;
extern PROBUFF_NET_ERRORDefaultTypeInternal _PROBUFF_NET_ERROR_default_instance_;
class PROBUFF_NET_ERROR_RESPONSE;
struct PROBUFF_NET_ERROR_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_ERROR_RESPONSEDefaultTypeInternal _PROBUFF_NET_ERROR_RESPONSE_default_instance_;
class PROBUFF_NET_GET_NOTICE;
struct PROBUFF_NET_GET_NOTICEDefaultTypeInternal;
extern PROBUFF_NET_GET_NOTICEDefaultTypeInternal _PROBUFF_NET_GET_NOTICE_default_instance_;
class PROBUFF_NET_GET_NOTICE_RESPONSE;
struct PROBUFF_NET_GET_NOTICE_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_GET_NOTICE_RESPONSEDefaultTypeInternal _PROBUFF_NET_GET_NOTICE_RESPONSE_default_instance_;
class PROBUFF_NET_GET_TIME;
struct PROBUFF_NET_GET_TIMEDefaultTypeInternal;
extern PROBUFF_NET_GET_TIMEDefaultTypeInternal _PROBUFF_NET_GET_TIME_default_instance_;
class PROBUFF_NET_GET_TIME_RESPONSE;
struct PROBUFF_NET_GET_TIME_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_GET_TIME_RESPONSEDefaultTypeInternal _PROBUFF_NET_GET_TIME_RESPONSE_default_instance_;
class PROBUFF_NET_HEARTBEAT;
struct PROBUFF_NET_HEARTBEATDefaultTypeInternal;
extern PROBUFF_NET_HEARTBEATDefaultTypeInternal _PROBUFF_NET_HEARTBEAT_default_instance_;
class PROBUFF_NET_MAIL_DEL;
struct PROBUFF_NET_MAIL_DELDefaultTypeInternal;
extern PROBUFF_NET_MAIL_DELDefaultTypeInternal _PROBUFF_NET_MAIL_DEL_default_instance_;
class PROBUFF_NET_MAIL_DEL_RESPONSE;
struct PROBUFF_NET_MAIL_DEL_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_MAIL_DEL_RESPONSEDefaultTypeInternal _PROBUFF_NET_MAIL_DEL_RESPONSE_default_instance_;
class PROBUFF_NET_MAIL_DRAW;
struct PROBUFF_NET_MAIL_DRAWDefaultTypeInternal;
extern PROBUFF_NET_MAIL_DRAWDefaultTypeInternal _PROBUFF_NET_MAIL_DRAW_default_instance_;
class PROBUFF_NET_MAIL_DRAW_RESPONSE;
struct PROBUFF_NET_MAIL_DRAW_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_MAIL_DRAW_RESPONSEDefaultTypeInternal _PROBUFF_NET_MAIL_DRAW_RESPONSE_default_instance_;
class PROBUFF_NET_MAIL_LIST;
struct PROBUFF_NET_MAIL_LISTDefaultTypeInternal;
extern PROBUFF_NET_MAIL_LISTDefaultTypeInternal _PROBUFF_NET_MAIL_LIST_default_instance_;
class PROBUFF_NET_MAIL_LIST_RESPONSE;
struct PROBUFF_NET_MAIL_LIST_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_MAIL_LIST_RESPONSEDefaultTypeInternal _PROBUFF_NET_MAIL_LIST_RESPONSE_default_instance_;
class PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse;
struct PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUseDefaultTypeInternal;
extern PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUseDefaultTypeInternal _PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse_default_instance_;
class PROBUFF_NET_MAIL_READ;
struct PROBUFF_NET_MAIL_READDefaultTypeInternal;
extern PROBUFF_NET_MAIL_READDefaultTypeInternal _PROBUFF_NET_MAIL_READ_default_instance_;
class PROBUFF_NET_MAIL_READ_RESPONSE;
struct PROBUFF_NET_MAIL_READ_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_MAIL_READ_RESPONSEDefaultTypeInternal _PROBUFF_NET_MAIL_READ_RESPONSE_default_instance_;
class PROBUFF_NET_MATCHING;
struct PROBUFF_NET_MATCHINGDefaultTypeInternal;
extern PROBUFF_NET_MATCHINGDefaultTypeInternal _PROBUFF_NET_MATCHING_default_instance_;
class PROBUFF_NET_MATCHING_CANCEL;
struct PROBUFF_NET_MATCHING_CANCELDefaultTypeInternal;
extern PROBUFF_NET_MATCHING_CANCELDefaultTypeInternal _PROBUFF_NET_MATCHING_CANCEL_default_instance_;
class PROBUFF_NET_MATCHING_CANCEL_RESPONSE;
struct PROBUFF_NET_MATCHING_CANCEL_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_MATCHING_CANCEL_RESPONSEDefaultTypeInternal _PROBUFF_NET_MATCHING_CANCEL_RESPONSE_default_instance_;
class PROBUFF_NET_MATCHING_CONFIRM;
struct PROBUFF_NET_MATCHING_CONFIRMDefaultTypeInternal;
extern PROBUFF_NET_MATCHING_CONFIRMDefaultTypeInternal _PROBUFF_NET_MATCHING_CONFIRM_default_instance_;
class PROBUFF_NET_MATCHING_CONFIRM_RESPONSE;
struct PROBUFF_NET_MATCHING_CONFIRM_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_MATCHING_CONFIRM_RESPONSEDefaultTypeInternal _PROBUFF_NET_MATCHING_CONFIRM_RESPONSE_default_instance_;
class PROBUFF_NET_MATCHING_RESPONSE;
struct PROBUFF_NET_MATCHING_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_MATCHING_RESPONSEDefaultTypeInternal _PROBUFF_NET_MATCHING_RESPONSE_default_instance_;
class PROBUFF_NET_MATCHING_SUCCESS;
struct PROBUFF_NET_MATCHING_SUCCESSDefaultTypeInternal;
extern PROBUFF_NET_MATCHING_SUCCESSDefaultTypeInternal _PROBUFF_NET_MATCHING_SUCCESS_default_instance_;
class PROBUFF_NET_MATCHING_SUCCESS_RESPONSE;
struct PROBUFF_NET_MATCHING_SUCCESS_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_MATCHING_SUCCESS_RESPONSEDefaultTypeInternal _PROBUFF_NET_MATCHING_SUCCESS_RESPONSE_default_instance_;
class PROBUFF_NET_MATCHING_SYNC;
struct PROBUFF_NET_MATCHING_SYNCDefaultTypeInternal;
extern PROBUFF_NET_MATCHING_SYNCDefaultTypeInternal _PROBUFF_NET_MATCHING_SYNC_default_instance_;
class PROBUFF_NET_MATCHING_WAITCONFIRM;
struct PROBUFF_NET_MATCHING_WAITCONFIRMDefaultTypeInternal;
extern PROBUFF_NET_MATCHING_WAITCONFIRMDefaultTypeInternal _PROBUFF_NET_MATCHING_WAITCONFIRM_default_instance_;
class PROBUFF_NET_MEMBER_MATCHING_CANCEL;
struct PROBUFF_NET_MEMBER_MATCHING_CANCELDefaultTypeInternal;
extern PROBUFF_NET_MEMBER_MATCHING_CANCELDefaultTypeInternal _PROBUFF_NET_MEMBER_MATCHING_CANCEL_default_instance_;
class PROBUFF_NET_ROLE_LOGIN;
struct PROBUFF_NET_ROLE_LOGINDefaultTypeInternal;
extern PROBUFF_NET_ROLE_LOGINDefaultTypeInternal _PROBUFF_NET_ROLE_LOGIN_default_instance_;
class PROBUFF_NET_ROLE_SYNC;
struct PROBUFF_NET_ROLE_SYNCDefaultTypeInternal;
extern PROBUFF_NET_ROLE_SYNCDefaultTypeInternal _PROBUFF_NET_ROLE_SYNC_default_instance_;
class PROBUFF_NET_ROLE_SYNC_RESPONSE;
struct PROBUFF_NET_ROLE_SYNC_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_ROLE_SYNC_RESPONSEDefaultTypeInternal _PROBUFF_NET_ROLE_SYNC_RESPONSE_default_instance_;
class PROBUFF_NET_SWITCH_LINE;
struct PROBUFF_NET_SWITCH_LINEDefaultTypeInternal;
extern PROBUFF_NET_SWITCH_LINEDefaultTypeInternal _PROBUFF_NET_SWITCH_LINE_default_instance_;
class PROBUFF_NET_SWITCH_LINE_RESPONSE;
struct PROBUFF_NET_SWITCH_LINE_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_SWITCH_LINE_RESPONSEDefaultTypeInternal _PROBUFF_NET_SWITCH_LINE_RESPONSE_default_instance_;
class PROBUFF_NET_SYNC_MATCHING_CONFIRM;
struct PROBUFF_NET_SYNC_MATCHING_CONFIRMDefaultTypeInternal;
extern PROBUFF_NET_SYNC_MATCHING_CONFIRMDefaultTypeInternal _PROBUFF_NET_SYNC_MATCHING_CONFIRM_default_instance_;
class PROBUFF_NET_SYNC_POSITION;
struct PROBUFF_NET_SYNC_POSITIONDefaultTypeInternal;
extern PROBUFF_NET_SYNC_POSITIONDefaultTypeInternal _PROBUFF_NET_SYNC_POSITION_default_instance_;
class PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse;
struct PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUseDefaultTypeInternal;
extern PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUseDefaultTypeInternal _PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse_default_instance_;
class PROBUFF_NET_SYNC_UNIT;
struct PROBUFF_NET_SYNC_UNITDefaultTypeInternal;
extern PROBUFF_NET_SYNC_UNITDefaultTypeInternal _PROBUFF_NET_SYNC_UNIT_default_instance_;
class UNIT;
struct UNITDefaultTypeInternal;
extern UNITDefaultTypeInternal _UNIT_default_instance_;
class UNIT_POSITION;
struct UNIT_POSITIONDefaultTypeInternal;
extern UNIT_POSITIONDefaultTypeInternal _UNIT_POSITION_default_instance_;
class VECTOR2;
struct VECTOR2DefaultTypeInternal;
extern VECTOR2DefaultTypeInternal _VECTOR2_default_instance_;
class VECTOR3;
struct VECTOR3DefaultTypeInternal;
extern VECTOR3DefaultTypeInternal _VECTOR3_default_instance_;
class chatitem;
struct chatitemDefaultTypeInternal;
extern chatitemDefaultTypeInternal _chatitem_default_instance_;
}  // namespace pbnet
PROTOBUF_NAMESPACE_OPEN
template <>
::pbnet::MATCHING_MEMBER* Arena::CreateMaybeMessage<::pbnet::MATCHING_MEMBER>(Arena*);
template <>
::pbnet::PROBUFF_NET_ACOUNT_LOGIN* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_ACOUNT_LOGIN>(Arena*);
template <>
::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE>(Arena*);
template <>
::pbnet::PROBUFF_NET_BAG_SYNC* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_BAG_SYNC>(Arena*);
template <>
::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE>(Arena*);
template <>
::pbnet::PROBUFF_NET_BAG_UPDATE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_BAG_UPDATE>(Arena*);
template <>
::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE>(Arena*);
template <>
::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem>(Arena*);
template <>
::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem>(Arena*);
template <>
::pbnet::PROBUFF_NET_CHANGE_ANGLE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_CHANGE_ANGLE>(Arena*);
template <>
::pbnet::PROBUFF_NET_CHAT* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_CHAT>(Arena*);
template <>
::pbnet::PROBUFF_NET_CHAT_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_CHAT_RESPONSE>(Arena*);
template <>
::pbnet::PROBUFF_NET_CMD* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_CMD>(Arena*);
template <>
::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW>(Arena*);
template <>
::pbnet::PROBUFF_NET_ENTER_PLAYS* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_ENTER_PLAYS>(Arena*);
template <>
::pbnet::PROBUFF_NET_ERROR* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_ERROR>(Arena*);
template <>
::pbnet::PROBUFF_NET_ERROR_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_ERROR_RESPONSE>(Arena*);
template <>
::pbnet::PROBUFF_NET_GET_NOTICE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_GET_NOTICE>(Arena*);
template <>
::pbnet::PROBUFF_NET_GET_NOTICE_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_GET_NOTICE_RESPONSE>(Arena*);
template <>
::pbnet::PROBUFF_NET_GET_TIME* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_GET_TIME>(Arena*);
template <>
::pbnet::PROBUFF_NET_GET_TIME_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_GET_TIME_RESPONSE>(Arena*);
template <>
::pbnet::PROBUFF_NET_HEARTBEAT* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_HEARTBEAT>(Arena*);
template <>
::pbnet::PROBUFF_NET_MAIL_DEL* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MAIL_DEL>(Arena*);
template <>
::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE>(Arena*);
template <>
::pbnet::PROBUFF_NET_MAIL_DRAW* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MAIL_DRAW>(Arena*);
template <>
::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE>(Arena*);
template <>
::pbnet::PROBUFF_NET_MAIL_LIST* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MAIL_LIST>(Arena*);
template <>
::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE>(Arena*);
template <>
::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse>(Arena*);
template <>
::pbnet::PROBUFF_NET_MAIL_READ* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MAIL_READ>(Arena*);
template <>
::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE>(Arena*);
template <>
::pbnet::PROBUFF_NET_MATCHING* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MATCHING>(Arena*);
template <>
::pbnet::PROBUFF_NET_MATCHING_CANCEL* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MATCHING_CANCEL>(Arena*);
template <>
::pbnet::PROBUFF_NET_MATCHING_CANCEL_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MATCHING_CANCEL_RESPONSE>(Arena*);
template <>
::pbnet::PROBUFF_NET_MATCHING_CONFIRM* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MATCHING_CONFIRM>(Arena*);
template <>
::pbnet::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE>(Arena*);
template <>
::pbnet::PROBUFF_NET_MATCHING_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MATCHING_RESPONSE>(Arena*);
template <>
::pbnet::PROBUFF_NET_MATCHING_SUCCESS* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MATCHING_SUCCESS>(Arena*);
template <>
::pbnet::PROBUFF_NET_MATCHING_SUCCESS_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MATCHING_SUCCESS_RESPONSE>(Arena*);
template <>
::pbnet::PROBUFF_NET_MATCHING_SYNC* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MATCHING_SYNC>(Arena*);
template <>
::pbnet::PROBUFF_NET_MATCHING_WAITCONFIRM* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MATCHING_WAITCONFIRM>(Arena*);
template <>
::pbnet::PROBUFF_NET_MEMBER_MATCHING_CANCEL* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MEMBER_MATCHING_CANCEL>(Arena*);
template <>
::pbnet::PROBUFF_NET_ROLE_LOGIN* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_ROLE_LOGIN>(Arena*);
template <>
::pbnet::PROBUFF_NET_ROLE_SYNC* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_ROLE_SYNC>(Arena*);
template <>
::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE>(Arena*);
template <>
::pbnet::PROBUFF_NET_SWITCH_LINE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_SWITCH_LINE>(Arena*);
template <>
::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE>(Arena*);
template <>
::pbnet::PROBUFF_NET_SYNC_MATCHING_CONFIRM* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_SYNC_MATCHING_CONFIRM>(Arena*);
template <>
::pbnet::PROBUFF_NET_SYNC_POSITION* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_SYNC_POSITION>(Arena*);
template <>
::pbnet::PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse>(Arena*);
template <>
::pbnet::PROBUFF_NET_SYNC_UNIT* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_SYNC_UNIT>(Arena*);
template <>
::pbnet::UNIT* Arena::CreateMaybeMessage<::pbnet::UNIT>(Arena*);
template <>
::pbnet::UNIT_POSITION* Arena::CreateMaybeMessage<::pbnet::UNIT_POSITION>(Arena*);
template <>
::pbnet::VECTOR2* Arena::CreateMaybeMessage<::pbnet::VECTOR2>(Arena*);
template <>
::pbnet::VECTOR3* Arena::CreateMaybeMessage<::pbnet::VECTOR3>(Arena*);
template <>
::pbnet::chatitem* Arena::CreateMaybeMessage<::pbnet::chatitem>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace pbnet {
enum enum_logic_chat : int {
  get_chat_list = 0,
  chat_speak = 1,
  updata_speck = 2,
  enum_logic_chat_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  enum_logic_chat_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool enum_logic_chat_IsValid(int value);
constexpr enum_logic_chat enum_logic_chat_MIN = static_cast<enum_logic_chat>(0);
constexpr enum_logic_chat enum_logic_chat_MAX = static_cast<enum_logic_chat>(2);
constexpr int enum_logic_chat_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
enum_logic_chat_descriptor();
template <typename T>
const std::string& enum_logic_chat_Name(T value) {
  static_assert(std::is_same<T, enum_logic_chat>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to enum_logic_chat_Name().");
  return enum_logic_chat_Name(static_cast<enum_logic_chat>(value));
}
template <>
inline const std::string& enum_logic_chat_Name(enum_logic_chat value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<enum_logic_chat_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool enum_logic_chat_Parse(absl::string_view name, enum_logic_chat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<enum_logic_chat>(
      enum_logic_chat_descriptor(), name, value);
}
enum eunit : int {
  eunit_role = 0,
  eunit_monster = 1,
  eunit_region = 2,
  eunit_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  eunit_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool eunit_IsValid(int value);
constexpr eunit eunit_MIN = static_cast<eunit>(0);
constexpr eunit eunit_MAX = static_cast<eunit>(2);
constexpr int eunit_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
eunit_descriptor();
template <typename T>
const std::string& eunit_Name(T value) {
  static_assert(std::is_same<T, eunit>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to eunit_Name().");
  return eunit_Name(static_cast<eunit>(value));
}
template <>
inline const std::string& eunit_Name(eunit value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<eunit_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool eunit_Parse(absl::string_view name, eunit* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<eunit>(
      eunit_descriptor(), name, value);
}
enum eplays : int {
  eplays_go_undergroundpalace = 0,
  eplays_count = 1,
  eplays_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  eplays_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool eplays_IsValid(int value);
constexpr eplays eplays_MIN = static_cast<eplays>(0);
constexpr eplays eplays_MAX = static_cast<eplays>(1);
constexpr int eplays_ARRAYSIZE = 1 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
eplays_descriptor();
template <typename T>
const std::string& eplays_Name(T value) {
  static_assert(std::is_same<T, eplays>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to eplays_Name().");
  return eplays_Name(static_cast<eplays>(value));
}
template <>
inline const std::string& eplays_Name(eplays value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<eplays_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool eplays_Parse(absl::string_view name, eplays* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<eplays>(
      eplays_descriptor(), name, value);
}
enum ematching_cancel_stat : int {
  ematching_cancel_success = 0,
  ematching_cancel_stage = 1,
  ematching_cancel_roomnotfind = 2,
  ematching_cancel_roommembernotfind = 3,
  ematching_cancel_stat_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ematching_cancel_stat_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ematching_cancel_stat_IsValid(int value);
constexpr ematching_cancel_stat ematching_cancel_stat_MIN = static_cast<ematching_cancel_stat>(0);
constexpr ematching_cancel_stat ematching_cancel_stat_MAX = static_cast<ematching_cancel_stat>(3);
constexpr int ematching_cancel_stat_ARRAYSIZE = 3 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
ematching_cancel_stat_descriptor();
template <typename T>
const std::string& ematching_cancel_stat_Name(T value) {
  static_assert(std::is_same<T, ematching_cancel_stat>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ematching_cancel_stat_Name().");
  return ematching_cancel_stat_Name(static_cast<ematching_cancel_stat>(value));
}
template <>
inline const std::string& ematching_cancel_stat_Name(ematching_cancel_stat value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ematching_cancel_stat_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool ematching_cancel_stat_Parse(absl::string_view name, ematching_cancel_stat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ematching_cancel_stat>(
      ematching_cancel_stat_descriptor(), name, value);
}
enum etype_matching_cancel : int {
  etype_matching_cancel_active = 0,
  etype_matching_cancel_timeout = 1,
  etype_matching_waitconfirm_timeout = 2,
  etype_matching_waitcreate_timeout = 3,
  etype_matching_cancel_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  etype_matching_cancel_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool etype_matching_cancel_IsValid(int value);
constexpr etype_matching_cancel etype_matching_cancel_MIN = static_cast<etype_matching_cancel>(0);
constexpr etype_matching_cancel etype_matching_cancel_MAX = static_cast<etype_matching_cancel>(3);
constexpr int etype_matching_cancel_ARRAYSIZE = 3 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
etype_matching_cancel_descriptor();
template <typename T>
const std::string& etype_matching_cancel_Name(T value) {
  static_assert(std::is_same<T, etype_matching_cancel>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to etype_matching_cancel_Name().");
  return etype_matching_cancel_Name(static_cast<etype_matching_cancel>(value));
}
template <>
inline const std::string& etype_matching_cancel_Name(etype_matching_cancel value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<etype_matching_cancel_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool etype_matching_cancel_Parse(absl::string_view name, etype_matching_cancel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<etype_matching_cancel>(
      etype_matching_cancel_descriptor(), name, value);
}
enum ematching_confirm_stat : int {
  ematching_confirm_success = 0,
  ematching_confirm_stage = 1,
  ematching_confirm_roomnotfind = 2,
  ematching_confirm_roommembernotfind = 3,
  ematching_confirm_stat_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ematching_confirm_stat_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ematching_confirm_stat_IsValid(int value);
constexpr ematching_confirm_stat ematching_confirm_stat_MIN = static_cast<ematching_confirm_stat>(0);
constexpr ematching_confirm_stat ematching_confirm_stat_MAX = static_cast<ematching_confirm_stat>(3);
constexpr int ematching_confirm_stat_ARRAYSIZE = 3 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
ematching_confirm_stat_descriptor();
template <typename T>
const std::string& ematching_confirm_stat_Name(T value) {
  static_assert(std::is_same<T, ematching_confirm_stat>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ematching_confirm_stat_Name().");
  return ematching_confirm_stat_Name(static_cast<ematching_confirm_stat>(value));
}
template <>
inline const std::string& ematching_confirm_stat_Name(ematching_confirm_stat value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ematching_confirm_stat_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool ematching_confirm_stat_Parse(absl::string_view name, ematching_confirm_stat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ematching_confirm_stat>(
      ematching_confirm_stat_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class PROBUFF_NET_HEARTBEAT final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_HEARTBEAT) */ {
 public:
  inline PROBUFF_NET_HEARTBEAT() : PROBUFF_NET_HEARTBEAT(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_HEARTBEAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_HEARTBEAT(const PROBUFF_NET_HEARTBEAT& from);
  PROBUFF_NET_HEARTBEAT(PROBUFF_NET_HEARTBEAT&& from) noexcept
    : PROBUFF_NET_HEARTBEAT() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_HEARTBEAT& operator=(const PROBUFF_NET_HEARTBEAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_HEARTBEAT& operator=(PROBUFF_NET_HEARTBEAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_HEARTBEAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_HEARTBEAT* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_HEARTBEAT*>(
               &_PROBUFF_NET_HEARTBEAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PROBUFF_NET_HEARTBEAT& a, PROBUFF_NET_HEARTBEAT& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_HEARTBEAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_HEARTBEAT* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_HEARTBEAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_HEARTBEAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PROBUFF_NET_HEARTBEAT& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PROBUFF_NET_HEARTBEAT& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_HEARTBEAT";
  }
  protected:
  explicit PROBUFF_NET_HEARTBEAT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_HEARTBEAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_ERROR final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_ERROR) */ {
 public:
  inline PROBUFF_NET_ERROR() : PROBUFF_NET_ERROR(nullptr) {}
  ~PROBUFF_NET_ERROR() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_ERROR(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_ERROR(const PROBUFF_NET_ERROR& from);
  PROBUFF_NET_ERROR(PROBUFF_NET_ERROR&& from) noexcept
    : PROBUFF_NET_ERROR() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_ERROR& operator=(const PROBUFF_NET_ERROR& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_ERROR& operator=(PROBUFF_NET_ERROR&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_ERROR& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_ERROR* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_ERROR*>(
               &_PROBUFF_NET_ERROR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PROBUFF_NET_ERROR& a, PROBUFF_NET_ERROR& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_ERROR* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_ERROR* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_ERROR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_ERROR>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_ERROR& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_ERROR& from) {
    PROBUFF_NET_ERROR::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_ERROR* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_ERROR";
  }
  protected:
  explicit PROBUFF_NET_ERROR(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMErrnumFieldNumber = 1,
  };
  // optional int32 m_errnum = 1;
  bool has_m_errnum() const;
  void clear_m_errnum() ;
  ::int32_t m_errnum() const;
  void set_m_errnum(::int32_t value);

  private:
  ::int32_t _internal_m_errnum() const;
  void _internal_set_m_errnum(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_ERROR)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t m_errnum_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_ERROR_RESPONSE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_ERROR_RESPONSE) */ {
 public:
  inline PROBUFF_NET_ERROR_RESPONSE() : PROBUFF_NET_ERROR_RESPONSE(nullptr) {}
  ~PROBUFF_NET_ERROR_RESPONSE() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_ERROR_RESPONSE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_ERROR_RESPONSE(const PROBUFF_NET_ERROR_RESPONSE& from);
  PROBUFF_NET_ERROR_RESPONSE(PROBUFF_NET_ERROR_RESPONSE&& from) noexcept
    : PROBUFF_NET_ERROR_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_ERROR_RESPONSE& operator=(const PROBUFF_NET_ERROR_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_ERROR_RESPONSE& operator=(PROBUFF_NET_ERROR_RESPONSE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_ERROR_RESPONSE& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_ERROR_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_ERROR_RESPONSE*>(
               &_PROBUFF_NET_ERROR_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PROBUFF_NET_ERROR_RESPONSE& a, PROBUFF_NET_ERROR_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_ERROR_RESPONSE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_ERROR_RESPONSE* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_ERROR_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_ERROR_RESPONSE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_ERROR_RESPONSE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_ERROR_RESPONSE& from) {
    PROBUFF_NET_ERROR_RESPONSE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_ERROR_RESPONSE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_ERROR_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_ERROR_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMErrmessageFieldNumber = 2,
    kMErrnumFieldNumber = 1,
  };
  // optional string m_errmessage = 2;
  bool has_m_errmessage() const;
  void clear_m_errmessage() ;
  const std::string& m_errmessage() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_m_errmessage(Arg_&& arg, Args_... args);
  std::string* mutable_m_errmessage();
  PROTOBUF_NODISCARD std::string* release_m_errmessage();
  void set_allocated_m_errmessage(std::string* ptr);

  private:
  const std::string& _internal_m_errmessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_m_errmessage(
      const std::string& value);
  std::string* _internal_mutable_m_errmessage();

  public:
  // optional int32 m_errnum = 1;
  bool has_m_errnum() const;
  void clear_m_errnum() ;
  ::int32_t m_errnum() const;
  void set_m_errnum(::int32_t value);

  private:
  ::int32_t _internal_m_errnum() const;
  void _internal_set_m_errnum(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_ERROR_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_errmessage_;
    ::int32_t m_errnum_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_GET_TIME final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_GET_TIME) */ {
 public:
  inline PROBUFF_NET_GET_TIME() : PROBUFF_NET_GET_TIME(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_GET_TIME(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_GET_TIME(const PROBUFF_NET_GET_TIME& from);
  PROBUFF_NET_GET_TIME(PROBUFF_NET_GET_TIME&& from) noexcept
    : PROBUFF_NET_GET_TIME() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_GET_TIME& operator=(const PROBUFF_NET_GET_TIME& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_GET_TIME& operator=(PROBUFF_NET_GET_TIME&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_GET_TIME& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_GET_TIME* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_GET_TIME*>(
               &_PROBUFF_NET_GET_TIME_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PROBUFF_NET_GET_TIME& a, PROBUFF_NET_GET_TIME& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_GET_TIME* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_GET_TIME* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_GET_TIME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_GET_TIME>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PROBUFF_NET_GET_TIME& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PROBUFF_NET_GET_TIME& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_GET_TIME";
  }
  protected:
  explicit PROBUFF_NET_GET_TIME(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_GET_TIME)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_GET_TIME_RESPONSE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_GET_TIME_RESPONSE) */ {
 public:
  inline PROBUFF_NET_GET_TIME_RESPONSE() : PROBUFF_NET_GET_TIME_RESPONSE(nullptr) {}
  ~PROBUFF_NET_GET_TIME_RESPONSE() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_GET_TIME_RESPONSE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_GET_TIME_RESPONSE(const PROBUFF_NET_GET_TIME_RESPONSE& from);
  PROBUFF_NET_GET_TIME_RESPONSE(PROBUFF_NET_GET_TIME_RESPONSE&& from) noexcept
    : PROBUFF_NET_GET_TIME_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_GET_TIME_RESPONSE& operator=(const PROBUFF_NET_GET_TIME_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_GET_TIME_RESPONSE& operator=(PROBUFF_NET_GET_TIME_RESPONSE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_GET_TIME_RESPONSE& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_GET_TIME_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_GET_TIME_RESPONSE*>(
               &_PROBUFF_NET_GET_TIME_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PROBUFF_NET_GET_TIME_RESPONSE& a, PROBUFF_NET_GET_TIME_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_GET_TIME_RESPONSE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_GET_TIME_RESPONSE* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_GET_TIME_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_GET_TIME_RESPONSE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_GET_TIME_RESPONSE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_GET_TIME_RESPONSE& from) {
    PROBUFF_NET_GET_TIME_RESPONSE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_GET_TIME_RESPONSE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_GET_TIME_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_GET_TIME_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMUtcFieldNumber = 1,
  };
  // optional int32 m_utc = 1;
  bool has_m_utc() const;
  void clear_m_utc() ;
  ::int32_t m_utc() const;
  void set_m_utc(::int32_t value);

  private:
  ::int32_t _internal_m_utc() const;
  void _internal_set_m_utc(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t m_utc_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_GET_NOTICE final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_GET_NOTICE) */ {
 public:
  inline PROBUFF_NET_GET_NOTICE() : PROBUFF_NET_GET_NOTICE(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_GET_NOTICE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_GET_NOTICE(const PROBUFF_NET_GET_NOTICE& from);
  PROBUFF_NET_GET_NOTICE(PROBUFF_NET_GET_NOTICE&& from) noexcept
    : PROBUFF_NET_GET_NOTICE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_GET_NOTICE& operator=(const PROBUFF_NET_GET_NOTICE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_GET_NOTICE& operator=(PROBUFF_NET_GET_NOTICE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_GET_NOTICE& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_GET_NOTICE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_GET_NOTICE*>(
               &_PROBUFF_NET_GET_NOTICE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PROBUFF_NET_GET_NOTICE& a, PROBUFF_NET_GET_NOTICE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_GET_NOTICE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_GET_NOTICE* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_GET_NOTICE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_GET_NOTICE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PROBUFF_NET_GET_NOTICE& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PROBUFF_NET_GET_NOTICE& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_GET_NOTICE";
  }
  protected:
  explicit PROBUFF_NET_GET_NOTICE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_GET_NOTICE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_GET_NOTICE_RESPONSE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_GET_NOTICE_RESPONSE) */ {
 public:
  inline PROBUFF_NET_GET_NOTICE_RESPONSE() : PROBUFF_NET_GET_NOTICE_RESPONSE(nullptr) {}
  ~PROBUFF_NET_GET_NOTICE_RESPONSE() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_GET_NOTICE_RESPONSE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_GET_NOTICE_RESPONSE(const PROBUFF_NET_GET_NOTICE_RESPONSE& from);
  PROBUFF_NET_GET_NOTICE_RESPONSE(PROBUFF_NET_GET_NOTICE_RESPONSE&& from) noexcept
    : PROBUFF_NET_GET_NOTICE_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_GET_NOTICE_RESPONSE& operator=(const PROBUFF_NET_GET_NOTICE_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_GET_NOTICE_RESPONSE& operator=(PROBUFF_NET_GET_NOTICE_RESPONSE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_GET_NOTICE_RESPONSE& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_GET_NOTICE_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_GET_NOTICE_RESPONSE*>(
               &_PROBUFF_NET_GET_NOTICE_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PROBUFF_NET_GET_NOTICE_RESPONSE& a, PROBUFF_NET_GET_NOTICE_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_GET_NOTICE_RESPONSE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_GET_NOTICE_RESPONSE* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_GET_NOTICE_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_GET_NOTICE_RESPONSE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_GET_NOTICE_RESPONSE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_GET_NOTICE_RESPONSE& from) {
    PROBUFF_NET_GET_NOTICE_RESPONSE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_GET_NOTICE_RESPONSE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_GET_NOTICE_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_GET_NOTICE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMNoticesFieldNumber = 1,
  };
  // repeated .pbdb.db_notice m_notices = 1;
  int m_notices_size() const;
  private:
  int _internal_m_notices_size() const;

  public:
  void clear_m_notices() ;
  ::pbdb::db_notice* mutable_m_notices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_notice >*
      mutable_m_notices();
  private:
  const ::pbdb::db_notice& _internal_m_notices(int index) const;
  ::pbdb::db_notice* _internal_add_m_notices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::pbdb::db_notice>& _internal_m_notices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::pbdb::db_notice>* _internal_mutable_m_notices();
  public:
  const ::pbdb::db_notice& m_notices(int index) const;
  ::pbdb::db_notice* add_m_notices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_notice >&
      m_notices() const;
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_GET_NOTICE_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_notice > m_notices_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_ACOUNT_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_ACOUNT_LOGIN) */ {
 public:
  inline PROBUFF_NET_ACOUNT_LOGIN() : PROBUFF_NET_ACOUNT_LOGIN(nullptr) {}
  ~PROBUFF_NET_ACOUNT_LOGIN() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_ACOUNT_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_ACOUNT_LOGIN(const PROBUFF_NET_ACOUNT_LOGIN& from);
  PROBUFF_NET_ACOUNT_LOGIN(PROBUFF_NET_ACOUNT_LOGIN&& from) noexcept
    : PROBUFF_NET_ACOUNT_LOGIN() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_ACOUNT_LOGIN& operator=(const PROBUFF_NET_ACOUNT_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_ACOUNT_LOGIN& operator=(PROBUFF_NET_ACOUNT_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_ACOUNT_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_ACOUNT_LOGIN* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_ACOUNT_LOGIN*>(
               &_PROBUFF_NET_ACOUNT_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PROBUFF_NET_ACOUNT_LOGIN& a, PROBUFF_NET_ACOUNT_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_ACOUNT_LOGIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_ACOUNT_LOGIN* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_ACOUNT_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_ACOUNT_LOGIN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_ACOUNT_LOGIN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_ACOUNT_LOGIN& from) {
    PROBUFF_NET_ACOUNT_LOGIN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_ACOUNT_LOGIN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_ACOUNT_LOGIN";
  }
  protected:
  explicit PROBUFF_NET_ACOUNT_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMAccountFieldNumber = 2,
    kMPasswordFieldNumber = 3,
    kMAreaFieldNumber = 1,
  };
  // optional string m_account = 2;
  bool has_m_account() const;
  void clear_m_account() ;
  const std::string& m_account() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_m_account(Arg_&& arg, Args_... args);
  std::string* mutable_m_account();
  PROTOBUF_NODISCARD std::string* release_m_account();
  void set_allocated_m_account(std::string* ptr);

  private:
  const std::string& _internal_m_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_m_account(
      const std::string& value);
  std::string* _internal_mutable_m_account();

  public:
  // optional string m_password = 3;
  bool has_m_password() const;
  void clear_m_password() ;
  const std::string& m_password() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_m_password(Arg_&& arg, Args_... args);
  std::string* mutable_m_password();
  PROTOBUF_NODISCARD std::string* release_m_password();
  void set_allocated_m_password(std::string* ptr);

  private:
  const std::string& _internal_m_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_m_password(
      const std::string& value);
  std::string* _internal_mutable_m_password();

  public:
  // optional int32 m_area = 1;
  bool has_m_area() const;
  void clear_m_area() ;
  ::int32_t m_area() const;
  void set_m_area(::int32_t value);

  private:
  ::int32_t _internal_m_area() const;
  void _internal_set_m_area(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_account_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_password_;
    ::int32_t m_area_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_ACOUNT_LOGIN_RESPONSE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE) */ {
 public:
  inline PROBUFF_NET_ACOUNT_LOGIN_RESPONSE() : PROBUFF_NET_ACOUNT_LOGIN_RESPONSE(nullptr) {}
  ~PROBUFF_NET_ACOUNT_LOGIN_RESPONSE() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_ACOUNT_LOGIN_RESPONSE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_ACOUNT_LOGIN_RESPONSE(const PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& from);
  PROBUFF_NET_ACOUNT_LOGIN_RESPONSE(PROBUFF_NET_ACOUNT_LOGIN_RESPONSE&& from) noexcept
    : PROBUFF_NET_ACOUNT_LOGIN_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& operator=(const PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& operator=(PROBUFF_NET_ACOUNT_LOGIN_RESPONSE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_ACOUNT_LOGIN_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_ACOUNT_LOGIN_RESPONSE*>(
               &_PROBUFF_NET_ACOUNT_LOGIN_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& a, PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_ACOUNT_LOGIN_RESPONSE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_ACOUNT_LOGIN_RESPONSE* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_ACOUNT_LOGIN_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_ACOUNT_LOGIN_RESPONSE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& from) {
    PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_ACOUNT_LOGIN_RESPONSE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_ACOUNT_LOGIN_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMSessionFieldNumber = 3,
    kMAccountFieldNumber = 4,
    kMRoleidFieldNumber = 2,
    kMAreaFieldNumber = 1,
    kMGatewayidFieldNumber = 5,
  };
  // optional string m_session = 3;
  bool has_m_session() const;
  void clear_m_session() ;
  const std::string& m_session() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_m_session(Arg_&& arg, Args_... args);
  std::string* mutable_m_session();
  PROTOBUF_NODISCARD std::string* release_m_session();
  void set_allocated_m_session(std::string* ptr);

  private:
  const std::string& _internal_m_session() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_m_session(
      const std::string& value);
  std::string* _internal_mutable_m_session();

  public:
  // optional string m_account = 4;
  bool has_m_account() const;
  void clear_m_account() ;
  const std::string& m_account() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_m_account(Arg_&& arg, Args_... args);
  std::string* mutable_m_account();
  PROTOBUF_NODISCARD std::string* release_m_account();
  void set_allocated_m_account(std::string* ptr);

  private:
  const std::string& _internal_m_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_m_account(
      const std::string& value);
  std::string* _internal_mutable_m_account();

  public:
  // optional int64 m_roleid = 2;
  bool has_m_roleid() const;
  void clear_m_roleid() ;
  ::int64_t m_roleid() const;
  void set_m_roleid(::int64_t value);

  private:
  ::int64_t _internal_m_roleid() const;
  void _internal_set_m_roleid(::int64_t value);

  public:
  // optional int32 m_area = 1;
  bool has_m_area() const;
  void clear_m_area() ;
  ::int32_t m_area() const;
  void set_m_area(::int32_t value);

  private:
  ::int32_t _internal_m_area() const;
  void _internal_set_m_area(::int32_t value);

  public:
  // optional int32 m_gatewayid = 5;
  bool has_m_gatewayid() const;
  void clear_m_gatewayid() ;
  ::int32_t m_gatewayid() const;
  void set_m_gatewayid(::int32_t value);

  private:
  ::int32_t _internal_m_gatewayid() const;
  void _internal_set_m_gatewayid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_session_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_account_;
    ::int64_t m_roleid_;
    ::int32_t m_area_;
    ::int32_t m_gatewayid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_ROLE_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_ROLE_LOGIN) */ {
 public:
  inline PROBUFF_NET_ROLE_LOGIN() : PROBUFF_NET_ROLE_LOGIN(nullptr) {}
  ~PROBUFF_NET_ROLE_LOGIN() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_ROLE_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_ROLE_LOGIN(const PROBUFF_NET_ROLE_LOGIN& from);
  PROBUFF_NET_ROLE_LOGIN(PROBUFF_NET_ROLE_LOGIN&& from) noexcept
    : PROBUFF_NET_ROLE_LOGIN() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_ROLE_LOGIN& operator=(const PROBUFF_NET_ROLE_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_ROLE_LOGIN& operator=(PROBUFF_NET_ROLE_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_ROLE_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_ROLE_LOGIN* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_ROLE_LOGIN*>(
               &_PROBUFF_NET_ROLE_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PROBUFF_NET_ROLE_LOGIN& a, PROBUFF_NET_ROLE_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_ROLE_LOGIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_ROLE_LOGIN* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_ROLE_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_ROLE_LOGIN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_ROLE_LOGIN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_ROLE_LOGIN& from) {
    PROBUFF_NET_ROLE_LOGIN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_ROLE_LOGIN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_ROLE_LOGIN";
  }
  protected:
  explicit PROBUFF_NET_ROLE_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMSessionFieldNumber = 2,
    kMRoleidFieldNumber = 1,
    kMIscreateFieldNumber = 3,
    kMAreaFieldNumber = 4,
    kMGatewayidFieldNumber = 5,
  };
  // optional string m_session = 2;
  bool has_m_session() const;
  void clear_m_session() ;
  const std::string& m_session() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_m_session(Arg_&& arg, Args_... args);
  std::string* mutable_m_session();
  PROTOBUF_NODISCARD std::string* release_m_session();
  void set_allocated_m_session(std::string* ptr);

  private:
  const std::string& _internal_m_session() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_m_session(
      const std::string& value);
  std::string* _internal_mutable_m_session();

  public:
  // optional int64 m_roleid = 1;
  bool has_m_roleid() const;
  void clear_m_roleid() ;
  ::int64_t m_roleid() const;
  void set_m_roleid(::int64_t value);

  private:
  ::int64_t _internal_m_roleid() const;
  void _internal_set_m_roleid(::int64_t value);

  public:
  // optional bool m_iscreate = 3;
  bool has_m_iscreate() const;
  void clear_m_iscreate() ;
  bool m_iscreate() const;
  void set_m_iscreate(bool value);

  private:
  bool _internal_m_iscreate() const;
  void _internal_set_m_iscreate(bool value);

  public:
  // optional int32 m_area = 4;
  bool has_m_area() const;
  void clear_m_area() ;
  ::int32_t m_area() const;
  void set_m_area(::int32_t value);

  private:
  ::int32_t _internal_m_area() const;
  void _internal_set_m_area(::int32_t value);

  public:
  // optional int32 m_gatewayid = 5;
  bool has_m_gatewayid() const;
  void clear_m_gatewayid() ;
  ::int32_t m_gatewayid() const;
  void set_m_gatewayid(::int32_t value);

  private:
  ::int32_t _internal_m_gatewayid() const;
  void _internal_set_m_gatewayid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_ROLE_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_session_;
    ::int64_t m_roleid_;
    bool m_iscreate_;
    ::int32_t m_area_;
    ::int32_t m_gatewayid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_ROLE_SYNC final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_ROLE_SYNC) */ {
 public:
  inline PROBUFF_NET_ROLE_SYNC() : PROBUFF_NET_ROLE_SYNC(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_ROLE_SYNC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_ROLE_SYNC(const PROBUFF_NET_ROLE_SYNC& from);
  PROBUFF_NET_ROLE_SYNC(PROBUFF_NET_ROLE_SYNC&& from) noexcept
    : PROBUFF_NET_ROLE_SYNC() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_ROLE_SYNC& operator=(const PROBUFF_NET_ROLE_SYNC& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_ROLE_SYNC& operator=(PROBUFF_NET_ROLE_SYNC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_ROLE_SYNC& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_ROLE_SYNC* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_ROLE_SYNC*>(
               &_PROBUFF_NET_ROLE_SYNC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PROBUFF_NET_ROLE_SYNC& a, PROBUFF_NET_ROLE_SYNC& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_ROLE_SYNC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_ROLE_SYNC* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_ROLE_SYNC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_ROLE_SYNC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PROBUFF_NET_ROLE_SYNC& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PROBUFF_NET_ROLE_SYNC& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_ROLE_SYNC";
  }
  protected:
  explicit PROBUFF_NET_ROLE_SYNC(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_ROLE_SYNC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_ROLE_SYNC_RESPONSE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE) */ {
 public:
  inline PROBUFF_NET_ROLE_SYNC_RESPONSE() : PROBUFF_NET_ROLE_SYNC_RESPONSE(nullptr) {}
  ~PROBUFF_NET_ROLE_SYNC_RESPONSE() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_ROLE_SYNC_RESPONSE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_ROLE_SYNC_RESPONSE(const PROBUFF_NET_ROLE_SYNC_RESPONSE& from);
  PROBUFF_NET_ROLE_SYNC_RESPONSE(PROBUFF_NET_ROLE_SYNC_RESPONSE&& from) noexcept
    : PROBUFF_NET_ROLE_SYNC_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_ROLE_SYNC_RESPONSE& operator=(const PROBUFF_NET_ROLE_SYNC_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_ROLE_SYNC_RESPONSE& operator=(PROBUFF_NET_ROLE_SYNC_RESPONSE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_ROLE_SYNC_RESPONSE& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_ROLE_SYNC_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_ROLE_SYNC_RESPONSE*>(
               &_PROBUFF_NET_ROLE_SYNC_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PROBUFF_NET_ROLE_SYNC_RESPONSE& a, PROBUFF_NET_ROLE_SYNC_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_ROLE_SYNC_RESPONSE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_ROLE_SYNC_RESPONSE* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_ROLE_SYNC_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_ROLE_SYNC_RESPONSE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_ROLE_SYNC_RESPONSE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_ROLE_SYNC_RESPONSE& from) {
    PROBUFF_NET_ROLE_SYNC_RESPONSE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_ROLE_SYNC_RESPONSE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_ROLE_SYNC_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMRoleFieldNumber = 1,
    kMBagFieldNumber = 2,
    kMTaskFieldNumber = 3,
  };
  // optional .pbdb.db_role m_role = 1;
  bool has_m_role() const;
  void clear_m_role() ;
  const ::pbdb::db_role& m_role() const;
  PROTOBUF_NODISCARD ::pbdb::db_role* release_m_role();
  ::pbdb::db_role* mutable_m_role();
  void set_allocated_m_role(::pbdb::db_role* m_role);
  private:
  const ::pbdb::db_role& _internal_m_role() const;
  ::pbdb::db_role* _internal_mutable_m_role();
  public:
  void unsafe_arena_set_allocated_m_role(
      ::pbdb::db_role* m_role);
  ::pbdb::db_role* unsafe_arena_release_m_role();
  // optional .pbdb.db_bag m_bag = 2;
  bool has_m_bag() const;
  void clear_m_bag() ;
  const ::pbdb::db_bag& m_bag() const;
  PROTOBUF_NODISCARD ::pbdb::db_bag* release_m_bag();
  ::pbdb::db_bag* mutable_m_bag();
  void set_allocated_m_bag(::pbdb::db_bag* m_bag);
  private:
  const ::pbdb::db_bag& _internal_m_bag() const;
  ::pbdb::db_bag* _internal_mutable_m_bag();
  public:
  void unsafe_arena_set_allocated_m_bag(
      ::pbdb::db_bag* m_bag);
  ::pbdb::db_bag* unsafe_arena_release_m_bag();
  // optional .pbdb.db_task m_task = 3;
  bool has_m_task() const;
  void clear_m_task() ;
  const ::pbdb::db_task& m_task() const;
  PROTOBUF_NODISCARD ::pbdb::db_task* release_m_task();
  ::pbdb::db_task* mutable_m_task();
  void set_allocated_m_task(::pbdb::db_task* m_task);
  private:
  const ::pbdb::db_task& _internal_m_task() const;
  ::pbdb::db_task* _internal_mutable_m_task();
  public:
  void unsafe_arena_set_allocated_m_task(
      ::pbdb::db_task* m_task);
  ::pbdb::db_task* unsafe_arena_release_m_task();
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::pbdb::db_role* m_role_;
    ::pbdb::db_bag* m_bag_;
    ::pbdb::db_task* m_task_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_BAG_SYNC final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_BAG_SYNC) */ {
 public:
  inline PROBUFF_NET_BAG_SYNC() : PROBUFF_NET_BAG_SYNC(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_BAG_SYNC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_BAG_SYNC(const PROBUFF_NET_BAG_SYNC& from);
  PROBUFF_NET_BAG_SYNC(PROBUFF_NET_BAG_SYNC&& from) noexcept
    : PROBUFF_NET_BAG_SYNC() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_BAG_SYNC& operator=(const PROBUFF_NET_BAG_SYNC& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_BAG_SYNC& operator=(PROBUFF_NET_BAG_SYNC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_BAG_SYNC& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_BAG_SYNC* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_BAG_SYNC*>(
               &_PROBUFF_NET_BAG_SYNC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PROBUFF_NET_BAG_SYNC& a, PROBUFF_NET_BAG_SYNC& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_BAG_SYNC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_BAG_SYNC* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_BAG_SYNC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_BAG_SYNC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PROBUFF_NET_BAG_SYNC& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PROBUFF_NET_BAG_SYNC& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_BAG_SYNC";
  }
  protected:
  explicit PROBUFF_NET_BAG_SYNC(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_BAG_SYNC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_BAG_SYNC_RESPONSE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE) */ {
 public:
  inline PROBUFF_NET_BAG_SYNC_RESPONSE() : PROBUFF_NET_BAG_SYNC_RESPONSE(nullptr) {}
  ~PROBUFF_NET_BAG_SYNC_RESPONSE() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_BAG_SYNC_RESPONSE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_BAG_SYNC_RESPONSE(const PROBUFF_NET_BAG_SYNC_RESPONSE& from);
  PROBUFF_NET_BAG_SYNC_RESPONSE(PROBUFF_NET_BAG_SYNC_RESPONSE&& from) noexcept
    : PROBUFF_NET_BAG_SYNC_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_BAG_SYNC_RESPONSE& operator=(const PROBUFF_NET_BAG_SYNC_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_BAG_SYNC_RESPONSE& operator=(PROBUFF_NET_BAG_SYNC_RESPONSE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_BAG_SYNC_RESPONSE& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_BAG_SYNC_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_BAG_SYNC_RESPONSE*>(
               &_PROBUFF_NET_BAG_SYNC_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PROBUFF_NET_BAG_SYNC_RESPONSE& a, PROBUFF_NET_BAG_SYNC_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_BAG_SYNC_RESPONSE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_BAG_SYNC_RESPONSE* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_BAG_SYNC_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_BAG_SYNC_RESPONSE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_BAG_SYNC_RESPONSE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_BAG_SYNC_RESPONSE& from) {
    PROBUFF_NET_BAG_SYNC_RESPONSE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_BAG_SYNC_RESPONSE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_BAG_SYNC_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMBagFieldNumber = 1,
  };
  // optional .pbdb.db_bag m_bag = 1;
  bool has_m_bag() const;
  void clear_m_bag() ;
  const ::pbdb::db_bag& m_bag() const;
  PROTOBUF_NODISCARD ::pbdb::db_bag* release_m_bag();
  ::pbdb::db_bag* mutable_m_bag();
  void set_allocated_m_bag(::pbdb::db_bag* m_bag);
  private:
  const ::pbdb::db_bag& _internal_m_bag() const;
  ::pbdb::db_bag* _internal_mutable_m_bag();
  public:
  void unsafe_arena_set_allocated_m_bag(
      ::pbdb::db_bag* m_bag);
  ::pbdb::db_bag* unsafe_arena_release_m_bag();
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::pbdb::db_bag* m_bag_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_BAG_UPDATE final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_BAG_UPDATE) */ {
 public:
  inline PROBUFF_NET_BAG_UPDATE() : PROBUFF_NET_BAG_UPDATE(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_BAG_UPDATE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_BAG_UPDATE(const PROBUFF_NET_BAG_UPDATE& from);
  PROBUFF_NET_BAG_UPDATE(PROBUFF_NET_BAG_UPDATE&& from) noexcept
    : PROBUFF_NET_BAG_UPDATE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_BAG_UPDATE& operator=(const PROBUFF_NET_BAG_UPDATE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_BAG_UPDATE& operator=(PROBUFF_NET_BAG_UPDATE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_BAG_UPDATE& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_BAG_UPDATE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_BAG_UPDATE*>(
               &_PROBUFF_NET_BAG_UPDATE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(PROBUFF_NET_BAG_UPDATE& a, PROBUFF_NET_BAG_UPDATE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_BAG_UPDATE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_BAG_UPDATE* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_BAG_UPDATE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_BAG_UPDATE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PROBUFF_NET_BAG_UPDATE& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PROBUFF_NET_BAG_UPDATE& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_BAG_UPDATE";
  }
  protected:
  explicit PROBUFF_NET_BAG_UPDATE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_BAG_UPDATE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem) */ {
 public:
  inline PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem() : PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem(nullptr) {}
  ~PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem(const PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem& from);
  PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem(PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem&& from) noexcept
    : PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem& operator=(const PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem& operator=(PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem*>(
               &_PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem& a, PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem& from) {
    PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem";
  }
  protected:
  explicit PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMIdFieldNumber = 1,
    kMCountFieldNumber = 2,
  };
  // optional int32 m_id = 1;
  bool has_m_id() const;
  void clear_m_id() ;
  ::int32_t m_id() const;
  void set_m_id(::int32_t value);

  private:
  ::int32_t _internal_m_id() const;
  void _internal_set_m_id(::int32_t value);

  public:
  // optional int32 m_count = 2;
  bool has_m_count() const;
  void clear_m_count() ;
  ::int32_t m_count() const;
  void set_m_count(::int32_t value);

  private:
  ::int32_t _internal_m_count() const;
  void _internal_set_m_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t m_id_;
    ::int32_t m_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_BAG_UPDATE_RESPONSE_additem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem) */ {
 public:
  inline PROBUFF_NET_BAG_UPDATE_RESPONSE_additem() : PROBUFF_NET_BAG_UPDATE_RESPONSE_additem(nullptr) {}
  ~PROBUFF_NET_BAG_UPDATE_RESPONSE_additem() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_BAG_UPDATE_RESPONSE_additem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_BAG_UPDATE_RESPONSE_additem(const PROBUFF_NET_BAG_UPDATE_RESPONSE_additem& from);
  PROBUFF_NET_BAG_UPDATE_RESPONSE_additem(PROBUFF_NET_BAG_UPDATE_RESPONSE_additem&& from) noexcept
    : PROBUFF_NET_BAG_UPDATE_RESPONSE_additem() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_BAG_UPDATE_RESPONSE_additem& operator=(const PROBUFF_NET_BAG_UPDATE_RESPONSE_additem& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_BAG_UPDATE_RESPONSE_additem& operator=(PROBUFF_NET_BAG_UPDATE_RESPONSE_additem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_BAG_UPDATE_RESPONSE_additem& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_BAG_UPDATE_RESPONSE_additem* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_BAG_UPDATE_RESPONSE_additem*>(
               &_PROBUFF_NET_BAG_UPDATE_RESPONSE_additem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(PROBUFF_NET_BAG_UPDATE_RESPONSE_additem& a, PROBUFF_NET_BAG_UPDATE_RESPONSE_additem& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_BAG_UPDATE_RESPONSE_additem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_BAG_UPDATE_RESPONSE_additem* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_BAG_UPDATE_RESPONSE_additem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_BAG_UPDATE_RESPONSE_additem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_BAG_UPDATE_RESPONSE_additem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_BAG_UPDATE_RESPONSE_additem& from) {
    PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_BAG_UPDATE_RESPONSE_additem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem";
  }
  protected:
  explicit PROBUFF_NET_BAG_UPDATE_RESPONSE_additem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMIdFieldNumber = 1,
    kMCountFieldNumber = 2,
  };
  // optional int32 m_id = 1;
  bool has_m_id() const;
  void clear_m_id() ;
  ::int32_t m_id() const;
  void set_m_id(::int32_t value);

  private:
  ::int32_t _internal_m_id() const;
  void _internal_set_m_id(::int32_t value);

  public:
  // optional int32 m_count = 2;
  bool has_m_count() const;
  void clear_m_count() ;
  ::int32_t m_count() const;
  void set_m_count(::int32_t value);

  private:
  ::int32_t _internal_m_count() const;
  void _internal_set_m_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t m_id_;
    ::int32_t m_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_BAG_UPDATE_RESPONSE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE) */ {
 public:
  inline PROBUFF_NET_BAG_UPDATE_RESPONSE() : PROBUFF_NET_BAG_UPDATE_RESPONSE(nullptr) {}
  ~PROBUFF_NET_BAG_UPDATE_RESPONSE() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_BAG_UPDATE_RESPONSE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_BAG_UPDATE_RESPONSE(const PROBUFF_NET_BAG_UPDATE_RESPONSE& from);
  PROBUFF_NET_BAG_UPDATE_RESPONSE(PROBUFF_NET_BAG_UPDATE_RESPONSE&& from) noexcept
    : PROBUFF_NET_BAG_UPDATE_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_BAG_UPDATE_RESPONSE& operator=(const PROBUFF_NET_BAG_UPDATE_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_BAG_UPDATE_RESPONSE& operator=(PROBUFF_NET_BAG_UPDATE_RESPONSE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_BAG_UPDATE_RESPONSE& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_BAG_UPDATE_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_BAG_UPDATE_RESPONSE*>(
               &_PROBUFF_NET_BAG_UPDATE_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(PROBUFF_NET_BAG_UPDATE_RESPONSE& a, PROBUFF_NET_BAG_UPDATE_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_BAG_UPDATE_RESPONSE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_BAG_UPDATE_RESPONSE* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_BAG_UPDATE_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_BAG_UPDATE_RESPONSE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_BAG_UPDATE_RESPONSE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_BAG_UPDATE_RESPONSE& from) {
    PROBUFF_NET_BAG_UPDATE_RESPONSE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_BAG_UPDATE_RESPONSE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_BAG_UPDATE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem delitem;
  typedef PROBUFF_NET_BAG_UPDATE_RESPONSE_additem additem;

  // accessors -------------------------------------------------------

  enum : int {
    kMDelitemsFieldNumber = 1,
    kMDelnostackitemsFieldNumber = 2,
    kMAdditemsFieldNumber = 3,
    kMAddnostackitemsFieldNumber = 4,
  };
  // repeated .pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem m_delitems = 1;
  int m_delitems_size() const;
  private:
  int _internal_m_delitems_size() const;

  public:
  void clear_m_delitems() ;
  ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem* mutable_m_delitems(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem >*
      mutable_m_delitems();
  private:
  const ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem& _internal_m_delitems(int index) const;
  ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem* _internal_add_m_delitems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem>& _internal_m_delitems() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem>* _internal_mutable_m_delitems();
  public:
  const ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem& m_delitems(int index) const;
  ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem* add_m_delitems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem >&
      m_delitems() const;
  // repeated int32 m_delnostackitems = 2;
  int m_delnostackitems_size() const;
  private:
  int _internal_m_delnostackitems_size() const;

  public:
  void clear_m_delnostackitems() ;
  ::int32_t m_delnostackitems(int index) const;
  void set_m_delnostackitems(int index, ::int32_t value);
  void add_m_delnostackitems(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& m_delnostackitems() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* mutable_m_delnostackitems();

  private:
  ::int32_t _internal_m_delnostackitems(int index) const;
  void _internal_add_m_delnostackitems(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& _internal_m_delnostackitems() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* _internal_mutable_m_delnostackitems();

  public:
  // repeated .pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem m_additems = 3;
  int m_additems_size() const;
  private:
  int _internal_m_additems_size() const;

  public:
  void clear_m_additems() ;
  ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem* mutable_m_additems(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem >*
      mutable_m_additems();
  private:
  const ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem& _internal_m_additems(int index) const;
  ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem* _internal_add_m_additems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem>& _internal_m_additems() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem>* _internal_mutable_m_additems();
  public:
  const ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem& m_additems(int index) const;
  ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem* add_m_additems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem >&
      m_additems() const;
  // repeated int32 m_addnostackitems = 4;
  int m_addnostackitems_size() const;
  private:
  int _internal_m_addnostackitems_size() const;

  public:
  void clear_m_addnostackitems() ;
  ::int32_t m_addnostackitems(int index) const;
  void set_m_addnostackitems(int index, ::int32_t value);
  void add_m_addnostackitems(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& m_addnostackitems() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* mutable_m_addnostackitems();

  private:
  ::int32_t _internal_m_addnostackitems(int index) const;
  void _internal_add_m_addnostackitems(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& _internal_m_addnostackitems() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* _internal_mutable_m_addnostackitems();

  public:
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem > m_delitems_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t> m_delnostackitems_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _m_delnostackitems_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem > m_additems_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t> m_addnostackitems_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _m_addnostackitems_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_CMD final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_CMD) */ {
 public:
  inline PROBUFF_NET_CMD() : PROBUFF_NET_CMD(nullptr) {}
  ~PROBUFF_NET_CMD() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_CMD(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_CMD(const PROBUFF_NET_CMD& from);
  PROBUFF_NET_CMD(PROBUFF_NET_CMD&& from) noexcept
    : PROBUFF_NET_CMD() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_CMD& operator=(const PROBUFF_NET_CMD& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_CMD& operator=(PROBUFF_NET_CMD&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_CMD& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_CMD* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_CMD*>(
               &_PROBUFF_NET_CMD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(PROBUFF_NET_CMD& a, PROBUFF_NET_CMD& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_CMD* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_CMD* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_CMD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_CMD>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_CMD& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_CMD& from) {
    PROBUFF_NET_CMD::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_CMD* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_CMD";
  }
  protected:
  explicit PROBUFF_NET_CMD(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMCmdFieldNumber = 1,
  };
  // optional string m_cmd = 1;
  bool has_m_cmd() const;
  void clear_m_cmd() ;
  const std::string& m_cmd() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_m_cmd(Arg_&& arg, Args_... args);
  std::string* mutable_m_cmd();
  PROTOBUF_NODISCARD std::string* release_m_cmd();
  void set_allocated_m_cmd(std::string* ptr);

  private:
  const std::string& _internal_m_cmd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_m_cmd(
      const std::string& value);
  std::string* _internal_mutable_m_cmd();

  public:
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_CMD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_cmd_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_CHAT) */ {
 public:
  inline PROBUFF_NET_CHAT() : PROBUFF_NET_CHAT(nullptr) {}
  ~PROBUFF_NET_CHAT() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_CHAT(const PROBUFF_NET_CHAT& from);
  PROBUFF_NET_CHAT(PROBUFF_NET_CHAT&& from) noexcept
    : PROBUFF_NET_CHAT() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_CHAT& operator=(const PROBUFF_NET_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_CHAT& operator=(PROBUFF_NET_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_CHAT* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_CHAT*>(
               &_PROBUFF_NET_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(PROBUFF_NET_CHAT& a, PROBUFF_NET_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_CHAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_CHAT* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_CHAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_CHAT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_CHAT& from) {
    PROBUFF_NET_CHAT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_CHAT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_CHAT";
  }
  protected:
  explicit PROBUFF_NET_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMContentFieldNumber = 3,
    kMTypeFieldNumber = 1,
    kMChannelidFieldNumber = 2,
  };
  // optional string m_content = 3;
  bool has_m_content() const;
  void clear_m_content() ;
  const std::string& m_content() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_m_content(Arg_&& arg, Args_... args);
  std::string* mutable_m_content();
  PROTOBUF_NODISCARD std::string* release_m_content();
  void set_allocated_m_content(std::string* ptr);

  private:
  const std::string& _internal_m_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_m_content(
      const std::string& value);
  std::string* _internal_mutable_m_content();

  public:
  // optional int32 m_type = 1;
  bool has_m_type() const;
  void clear_m_type() ;
  ::int32_t m_type() const;
  void set_m_type(::int32_t value);

  private:
  ::int32_t _internal_m_type() const;
  void _internal_set_m_type(::int32_t value);

  public:
  // optional int32 m_channelid = 2;
  bool has_m_channelid() const;
  void clear_m_channelid() ;
  ::int32_t m_channelid() const;
  void set_m_channelid(::int32_t value);

  private:
  ::int32_t _internal_m_channelid() const;
  void _internal_set_m_channelid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_content_;
    ::int32_t m_type_;
    ::int32_t m_channelid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class chatitem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.chatitem) */ {
 public:
  inline chatitem() : chatitem(nullptr) {}
  ~chatitem() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR chatitem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  chatitem(const chatitem& from);
  chatitem(chatitem&& from) noexcept
    : chatitem() {
    *this = ::std::move(from);
  }

  inline chatitem& operator=(const chatitem& from) {
    CopyFrom(from);
    return *this;
  }
  inline chatitem& operator=(chatitem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const chatitem& default_instance() {
    return *internal_default_instance();
  }
  static inline const chatitem* internal_default_instance() {
    return reinterpret_cast<const chatitem*>(
               &_chatitem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(chatitem& a, chatitem& b) {
    a.Swap(&b);
  }
  inline void Swap(chatitem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(chatitem* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  chatitem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<chatitem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const chatitem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const chatitem& from) {
    chatitem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(chatitem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.chatitem";
  }
  protected:
  explicit chatitem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMRolenameFieldNumber = 2,
    kMContentFieldNumber = 3,
    kMRoleidFieldNumber = 1,
    kMUtcFieldNumber = 4,
  };
  // optional string m_rolename = 2;
  bool has_m_rolename() const;
  void clear_m_rolename() ;
  const std::string& m_rolename() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_m_rolename(Arg_&& arg, Args_... args);
  std::string* mutable_m_rolename();
  PROTOBUF_NODISCARD std::string* release_m_rolename();
  void set_allocated_m_rolename(std::string* ptr);

  private:
  const std::string& _internal_m_rolename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_m_rolename(
      const std::string& value);
  std::string* _internal_mutable_m_rolename();

  public:
  // optional string m_content = 3;
  bool has_m_content() const;
  void clear_m_content() ;
  const std::string& m_content() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_m_content(Arg_&& arg, Args_... args);
  std::string* mutable_m_content();
  PROTOBUF_NODISCARD std::string* release_m_content();
  void set_allocated_m_content(std::string* ptr);

  private:
  const std::string& _internal_m_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_m_content(
      const std::string& value);
  std::string* _internal_mutable_m_content();

  public:
  // optional int64 m_roleid = 1;
  bool has_m_roleid() const;
  void clear_m_roleid() ;
  ::int64_t m_roleid() const;
  void set_m_roleid(::int64_t value);

  private:
  ::int64_t _internal_m_roleid() const;
  void _internal_set_m_roleid(::int64_t value);

  public:
  // optional int32 m_utc = 4;
  bool has_m_utc() const;
  void clear_m_utc() ;
  ::int32_t m_utc() const;
  void set_m_utc(::int32_t value);

  private:
  ::int32_t _internal_m_utc() const;
  void _internal_set_m_utc(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:pbnet.chatitem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_rolename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_content_;
    ::int64_t m_roleid_;
    ::int32_t m_utc_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_CHAT_RESPONSE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_CHAT_RESPONSE) */ {
 public:
  inline PROBUFF_NET_CHAT_RESPONSE() : PROBUFF_NET_CHAT_RESPONSE(nullptr) {}
  ~PROBUFF_NET_CHAT_RESPONSE() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_CHAT_RESPONSE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_CHAT_RESPONSE(const PROBUFF_NET_CHAT_RESPONSE& from);
  PROBUFF_NET_CHAT_RESPONSE(PROBUFF_NET_CHAT_RESPONSE&& from) noexcept
    : PROBUFF_NET_CHAT_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_CHAT_RESPONSE& operator=(const PROBUFF_NET_CHAT_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_CHAT_RESPONSE& operator=(PROBUFF_NET_CHAT_RESPONSE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_CHAT_RESPONSE& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_CHAT_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_CHAT_RESPONSE*>(
               &_PROBUFF_NET_CHAT_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(PROBUFF_NET_CHAT_RESPONSE& a, PROBUFF_NET_CHAT_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_CHAT_RESPONSE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_CHAT_RESPONSE* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_CHAT_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_CHAT_RESPONSE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_CHAT_RESPONSE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_CHAT_RESPONSE& from) {
    PROBUFF_NET_CHAT_RESPONSE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_CHAT_RESPONSE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_CHAT_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_CHAT_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMChatlistFieldNumber = 3,
    kMTypeFieldNumber = 1,
    kMChannelidFieldNumber = 2,
    kMStatFieldNumber = 4,
  };
  // repeated .pbnet.chatitem m_chatlist = 3;
  int m_chatlist_size() const;
  private:
  int _internal_m_chatlist_size() const;

  public:
  void clear_m_chatlist() ;
  ::pbnet::chatitem* mutable_m_chatlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::chatitem >*
      mutable_m_chatlist();
  private:
  const ::pbnet::chatitem& _internal_m_chatlist(int index) const;
  ::pbnet::chatitem* _internal_add_m_chatlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::pbnet::chatitem>& _internal_m_chatlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::pbnet::chatitem>* _internal_mutable_m_chatlist();
  public:
  const ::pbnet::chatitem& m_chatlist(int index) const;
  ::pbnet::chatitem* add_m_chatlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::chatitem >&
      m_chatlist() const;
  // optional int32 m_type = 1;
  bool has_m_type() const;
  void clear_m_type() ;
  ::int32_t m_type() const;
  void set_m_type(::int32_t value);

  private:
  ::int32_t _internal_m_type() const;
  void _internal_set_m_type(::int32_t value);

  public:
  // optional int32 m_channelid = 2;
  bool has_m_channelid() const;
  void clear_m_channelid() ;
  ::int32_t m_channelid() const;
  void set_m_channelid(::int32_t value);

  private:
  ::int32_t _internal_m_channelid() const;
  void _internal_set_m_channelid(::int32_t value);

  public:
  // optional bool m_stat = 4;
  bool has_m_stat() const;
  void clear_m_stat() ;
  bool m_stat() const;
  void set_m_stat(bool value);

  private:
  bool _internal_m_stat() const;
  void _internal_set_m_stat(bool value);

  public:
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_CHAT_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::chatitem > m_chatlist_;
    ::int32_t m_type_;
    ::int32_t m_channelid_;
    bool m_stat_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_SWITCH_LINE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_SWITCH_LINE) */ {
 public:
  inline PROBUFF_NET_SWITCH_LINE() : PROBUFF_NET_SWITCH_LINE(nullptr) {}
  ~PROBUFF_NET_SWITCH_LINE() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_SWITCH_LINE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_SWITCH_LINE(const PROBUFF_NET_SWITCH_LINE& from);
  PROBUFF_NET_SWITCH_LINE(PROBUFF_NET_SWITCH_LINE&& from) noexcept
    : PROBUFF_NET_SWITCH_LINE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_SWITCH_LINE& operator=(const PROBUFF_NET_SWITCH_LINE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_SWITCH_LINE& operator=(PROBUFF_NET_SWITCH_LINE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_SWITCH_LINE& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_SWITCH_LINE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_SWITCH_LINE*>(
               &_PROBUFF_NET_SWITCH_LINE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(PROBUFF_NET_SWITCH_LINE& a, PROBUFF_NET_SWITCH_LINE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_SWITCH_LINE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_SWITCH_LINE* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_SWITCH_LINE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_SWITCH_LINE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_SWITCH_LINE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_SWITCH_LINE& from) {
    PROBUFF_NET_SWITCH_LINE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_SWITCH_LINE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_SWITCH_LINE";
  }
  protected:
  explicit PROBUFF_NET_SWITCH_LINE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMLineFieldNumber = 1,
  };
  // optional int32 m_line = 1;
  bool has_m_line() const;
  void clear_m_line() ;
  ::int32_t m_line() const;
  void set_m_line(::int32_t value);

  private:
  ::int32_t _internal_m_line() const;
  void _internal_set_m_line(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_SWITCH_LINE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t m_line_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_SWITCH_LINE_RESPONSE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE) */ {
 public:
  inline PROBUFF_NET_SWITCH_LINE_RESPONSE() : PROBUFF_NET_SWITCH_LINE_RESPONSE(nullptr) {}
  ~PROBUFF_NET_SWITCH_LINE_RESPONSE() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_SWITCH_LINE_RESPONSE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_SWITCH_LINE_RESPONSE(const PROBUFF_NET_SWITCH_LINE_RESPONSE& from);
  PROBUFF_NET_SWITCH_LINE_RESPONSE(PROBUFF_NET_SWITCH_LINE_RESPONSE&& from) noexcept
    : PROBUFF_NET_SWITCH_LINE_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_SWITCH_LINE_RESPONSE& operator=(const PROBUFF_NET_SWITCH_LINE_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_SWITCH_LINE_RESPONSE& operator=(PROBUFF_NET_SWITCH_LINE_RESPONSE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_SWITCH_LINE_RESPONSE& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_SWITCH_LINE_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_SWITCH_LINE_RESPONSE*>(
               &_PROBUFF_NET_SWITCH_LINE_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(PROBUFF_NET_SWITCH_LINE_RESPONSE& a, PROBUFF_NET_SWITCH_LINE_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_SWITCH_LINE_RESPONSE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_SWITCH_LINE_RESPONSE* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_SWITCH_LINE_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_SWITCH_LINE_RESPONSE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_SWITCH_LINE_RESPONSE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_SWITCH_LINE_RESPONSE& from) {
    PROBUFF_NET_SWITCH_LINE_RESPONSE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_SWITCH_LINE_RESPONSE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_SWITCH_LINE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMLineFieldNumber = 1,
    kMStatFieldNumber = 2,
  };
  // optional int32 m_line = 1;
  bool has_m_line() const;
  void clear_m_line() ;
  ::int32_t m_line() const;
  void set_m_line(::int32_t value);

  private:
  ::int32_t _internal_m_line() const;
  void _internal_set_m_line(::int32_t value);

  public:
  // optional bool m_stat = 2;
  bool has_m_stat() const;
  void clear_m_stat() ;
  bool m_stat() const;
  void set_m_stat(bool value);

  private:
  bool _internal_m_stat() const;
  void _internal_set_m_stat(bool value);

  public:
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t m_line_;
    bool m_stat_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_MAIL_LIST final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MAIL_LIST) */ {
 public:
  inline PROBUFF_NET_MAIL_LIST() : PROBUFF_NET_MAIL_LIST(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_LIST(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_MAIL_LIST(const PROBUFF_NET_MAIL_LIST& from);
  PROBUFF_NET_MAIL_LIST(PROBUFF_NET_MAIL_LIST&& from) noexcept
    : PROBUFF_NET_MAIL_LIST() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MAIL_LIST& operator=(const PROBUFF_NET_MAIL_LIST& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MAIL_LIST& operator=(PROBUFF_NET_MAIL_LIST&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_MAIL_LIST& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_MAIL_LIST* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MAIL_LIST*>(
               &_PROBUFF_NET_MAIL_LIST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(PROBUFF_NET_MAIL_LIST& a, PROBUFF_NET_MAIL_LIST& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MAIL_LIST* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MAIL_LIST* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_MAIL_LIST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_MAIL_LIST>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PROBUFF_NET_MAIL_LIST& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PROBUFF_NET_MAIL_LIST& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_MAIL_LIST";
  }
  protected:
  explicit PROBUFF_NET_MAIL_LIST(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MAIL_LIST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse final : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse, 
    ::int32_t, ::pbdb::mail,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse, 
    ::int32_t, ::pbdb::mail,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse& other);
  static const PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse*>(&_PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_MAIL_LIST_RESPONSE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE) */ {
 public:
  inline PROBUFF_NET_MAIL_LIST_RESPONSE() : PROBUFF_NET_MAIL_LIST_RESPONSE(nullptr) {}
  ~PROBUFF_NET_MAIL_LIST_RESPONSE() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_LIST_RESPONSE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_MAIL_LIST_RESPONSE(const PROBUFF_NET_MAIL_LIST_RESPONSE& from);
  PROBUFF_NET_MAIL_LIST_RESPONSE(PROBUFF_NET_MAIL_LIST_RESPONSE&& from) noexcept
    : PROBUFF_NET_MAIL_LIST_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MAIL_LIST_RESPONSE& operator=(const PROBUFF_NET_MAIL_LIST_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MAIL_LIST_RESPONSE& operator=(PROBUFF_NET_MAIL_LIST_RESPONSE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_MAIL_LIST_RESPONSE& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_MAIL_LIST_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MAIL_LIST_RESPONSE*>(
               &_PROBUFF_NET_MAIL_LIST_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(PROBUFF_NET_MAIL_LIST_RESPONSE& a, PROBUFF_NET_MAIL_LIST_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MAIL_LIST_RESPONSE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MAIL_LIST_RESPONSE* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_MAIL_LIST_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_MAIL_LIST_RESPONSE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_MAIL_LIST_RESPONSE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_MAIL_LIST_RESPONSE& from) {
    PROBUFF_NET_MAIL_LIST_RESPONSE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MAIL_LIST_RESPONSE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_MAIL_LIST_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMMailFieldNumber = 1,
  };
  // map<int32, .pbdb.mail> m_mail = 1;
  int m_mail_size() const;
  private:
  int _internal_m_mail_size() const;

  public:
  void clear_m_mail() ;
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::int32_t, ::pbdb::mail >&
      _internal_m_mail() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::int32_t, ::pbdb::mail >*
      _internal_mutable_m_mail();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::int32_t, ::pbdb::mail >&
      m_mail() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::int32_t, ::pbdb::mail >*
      mutable_m_mail();
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse,
        ::int32_t, ::pbdb::mail,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> m_mail_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_MAIL_READ final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MAIL_READ) */ {
 public:
  inline PROBUFF_NET_MAIL_READ() : PROBUFF_NET_MAIL_READ(nullptr) {}
  ~PROBUFF_NET_MAIL_READ() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_READ(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_MAIL_READ(const PROBUFF_NET_MAIL_READ& from);
  PROBUFF_NET_MAIL_READ(PROBUFF_NET_MAIL_READ&& from) noexcept
    : PROBUFF_NET_MAIL_READ() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MAIL_READ& operator=(const PROBUFF_NET_MAIL_READ& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MAIL_READ& operator=(PROBUFF_NET_MAIL_READ&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_MAIL_READ& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_MAIL_READ* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MAIL_READ*>(
               &_PROBUFF_NET_MAIL_READ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(PROBUFF_NET_MAIL_READ& a, PROBUFF_NET_MAIL_READ& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MAIL_READ* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MAIL_READ* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_MAIL_READ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_MAIL_READ>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_MAIL_READ& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_MAIL_READ& from) {
    PROBUFF_NET_MAIL_READ::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MAIL_READ* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_MAIL_READ";
  }
  protected:
  explicit PROBUFF_NET_MAIL_READ(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMMailidFieldNumber = 1,
  };
  // optional int64 m_mailid = 1;
  bool has_m_mailid() const;
  void clear_m_mailid() ;
  ::int64_t m_mailid() const;
  void set_m_mailid(::int64_t value);

  private:
  ::int64_t _internal_m_mailid() const;
  void _internal_set_m_mailid(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MAIL_READ)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int64_t m_mailid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_MAIL_READ_RESPONSE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE) */ {
 public:
  inline PROBUFF_NET_MAIL_READ_RESPONSE() : PROBUFF_NET_MAIL_READ_RESPONSE(nullptr) {}
  ~PROBUFF_NET_MAIL_READ_RESPONSE() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_READ_RESPONSE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_MAIL_READ_RESPONSE(const PROBUFF_NET_MAIL_READ_RESPONSE& from);
  PROBUFF_NET_MAIL_READ_RESPONSE(PROBUFF_NET_MAIL_READ_RESPONSE&& from) noexcept
    : PROBUFF_NET_MAIL_READ_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MAIL_READ_RESPONSE& operator=(const PROBUFF_NET_MAIL_READ_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MAIL_READ_RESPONSE& operator=(PROBUFF_NET_MAIL_READ_RESPONSE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_MAIL_READ_RESPONSE& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_MAIL_READ_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MAIL_READ_RESPONSE*>(
               &_PROBUFF_NET_MAIL_READ_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(PROBUFF_NET_MAIL_READ_RESPONSE& a, PROBUFF_NET_MAIL_READ_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MAIL_READ_RESPONSE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MAIL_READ_RESPONSE* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_MAIL_READ_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_MAIL_READ_RESPONSE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_MAIL_READ_RESPONSE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_MAIL_READ_RESPONSE& from) {
    PROBUFF_NET_MAIL_READ_RESPONSE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MAIL_READ_RESPONSE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_MAIL_READ_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_MAIL_READ_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMMailidFieldNumber = 1,
    kMStatFieldNumber = 2,
  };
  // optional int64 m_mailid = 1;
  bool has_m_mailid() const;
  void clear_m_mailid() ;
  ::int64_t m_mailid() const;
  void set_m_mailid(::int64_t value);

  private:
  ::int64_t _internal_m_mailid() const;
  void _internal_set_m_mailid(::int64_t value);

  public:
  // optional bool m_stat = 2;
  bool has_m_stat() const;
  void clear_m_stat() ;
  bool m_stat() const;
  void set_m_stat(bool value);

  private:
  bool _internal_m_stat() const;
  void _internal_set_m_stat(bool value);

  public:
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int64_t m_mailid_;
    bool m_stat_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_MAIL_DRAW final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MAIL_DRAW) */ {
 public:
  inline PROBUFF_NET_MAIL_DRAW() : PROBUFF_NET_MAIL_DRAW(nullptr) {}
  ~PROBUFF_NET_MAIL_DRAW() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_DRAW(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_MAIL_DRAW(const PROBUFF_NET_MAIL_DRAW& from);
  PROBUFF_NET_MAIL_DRAW(PROBUFF_NET_MAIL_DRAW&& from) noexcept
    : PROBUFF_NET_MAIL_DRAW() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MAIL_DRAW& operator=(const PROBUFF_NET_MAIL_DRAW& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MAIL_DRAW& operator=(PROBUFF_NET_MAIL_DRAW&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_MAIL_DRAW& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_MAIL_DRAW* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MAIL_DRAW*>(
               &_PROBUFF_NET_MAIL_DRAW_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(PROBUFF_NET_MAIL_DRAW& a, PROBUFF_NET_MAIL_DRAW& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MAIL_DRAW* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MAIL_DRAW* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_MAIL_DRAW* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_MAIL_DRAW>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_MAIL_DRAW& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_MAIL_DRAW& from) {
    PROBUFF_NET_MAIL_DRAW::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MAIL_DRAW* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_MAIL_DRAW";
  }
  protected:
  explicit PROBUFF_NET_MAIL_DRAW(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMMailidFieldNumber = 1,
  };
  // optional int64 m_mailid = 1;
  bool has_m_mailid() const;
  void clear_m_mailid() ;
  ::int64_t m_mailid() const;
  void set_m_mailid(::int64_t value);

  private:
  ::int64_t _internal_m_mailid() const;
  void _internal_set_m_mailid(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MAIL_DRAW)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int64_t m_mailid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_MAIL_DRAW_RESPONSE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE) */ {
 public:
  inline PROBUFF_NET_MAIL_DRAW_RESPONSE() : PROBUFF_NET_MAIL_DRAW_RESPONSE(nullptr) {}
  ~PROBUFF_NET_MAIL_DRAW_RESPONSE() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_DRAW_RESPONSE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_MAIL_DRAW_RESPONSE(const PROBUFF_NET_MAIL_DRAW_RESPONSE& from);
  PROBUFF_NET_MAIL_DRAW_RESPONSE(PROBUFF_NET_MAIL_DRAW_RESPONSE&& from) noexcept
    : PROBUFF_NET_MAIL_DRAW_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MAIL_DRAW_RESPONSE& operator=(const PROBUFF_NET_MAIL_DRAW_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MAIL_DRAW_RESPONSE& operator=(PROBUFF_NET_MAIL_DRAW_RESPONSE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_MAIL_DRAW_RESPONSE& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_MAIL_DRAW_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MAIL_DRAW_RESPONSE*>(
               &_PROBUFF_NET_MAIL_DRAW_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(PROBUFF_NET_MAIL_DRAW_RESPONSE& a, PROBUFF_NET_MAIL_DRAW_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MAIL_DRAW_RESPONSE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MAIL_DRAW_RESPONSE* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_MAIL_DRAW_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_MAIL_DRAW_RESPONSE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_MAIL_DRAW_RESPONSE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_MAIL_DRAW_RESPONSE& from) {
    PROBUFF_NET_MAIL_DRAW_RESPONSE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MAIL_DRAW_RESPONSE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_MAIL_DRAW_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMMailidFieldNumber = 1,
    kMStatFieldNumber = 2,
  };
  // optional int64 m_mailid = 1;
  bool has_m_mailid() const;
  void clear_m_mailid() ;
  ::int64_t m_mailid() const;
  void set_m_mailid(::int64_t value);

  private:
  ::int64_t _internal_m_mailid() const;
  void _internal_set_m_mailid(::int64_t value);

  public:
  // optional bool m_stat = 2;
  bool has_m_stat() const;
  void clear_m_stat() ;
  bool m_stat() const;
  void set_m_stat(bool value);

  private:
  bool _internal_m_stat() const;
  void _internal_set_m_stat(bool value);

  public:
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int64_t m_mailid_;
    bool m_stat_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_MAIL_DEL final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MAIL_DEL) */ {
 public:
  inline PROBUFF_NET_MAIL_DEL() : PROBUFF_NET_MAIL_DEL(nullptr) {}
  ~PROBUFF_NET_MAIL_DEL() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_DEL(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_MAIL_DEL(const PROBUFF_NET_MAIL_DEL& from);
  PROBUFF_NET_MAIL_DEL(PROBUFF_NET_MAIL_DEL&& from) noexcept
    : PROBUFF_NET_MAIL_DEL() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MAIL_DEL& operator=(const PROBUFF_NET_MAIL_DEL& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MAIL_DEL& operator=(PROBUFF_NET_MAIL_DEL&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_MAIL_DEL& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_MAIL_DEL* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MAIL_DEL*>(
               &_PROBUFF_NET_MAIL_DEL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(PROBUFF_NET_MAIL_DEL& a, PROBUFF_NET_MAIL_DEL& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MAIL_DEL* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MAIL_DEL* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_MAIL_DEL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_MAIL_DEL>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_MAIL_DEL& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_MAIL_DEL& from) {
    PROBUFF_NET_MAIL_DEL::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MAIL_DEL* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_MAIL_DEL";
  }
  protected:
  explicit PROBUFF_NET_MAIL_DEL(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMMailidFieldNumber = 1,
  };
  // optional int64 m_mailid = 1;
  bool has_m_mailid() const;
  void clear_m_mailid() ;
  ::int64_t m_mailid() const;
  void set_m_mailid(::int64_t value);

  private:
  ::int64_t _internal_m_mailid() const;
  void _internal_set_m_mailid(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MAIL_DEL)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int64_t m_mailid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_MAIL_DEL_RESPONSE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE) */ {
 public:
  inline PROBUFF_NET_MAIL_DEL_RESPONSE() : PROBUFF_NET_MAIL_DEL_RESPONSE(nullptr) {}
  ~PROBUFF_NET_MAIL_DEL_RESPONSE() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_DEL_RESPONSE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_MAIL_DEL_RESPONSE(const PROBUFF_NET_MAIL_DEL_RESPONSE& from);
  PROBUFF_NET_MAIL_DEL_RESPONSE(PROBUFF_NET_MAIL_DEL_RESPONSE&& from) noexcept
    : PROBUFF_NET_MAIL_DEL_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MAIL_DEL_RESPONSE& operator=(const PROBUFF_NET_MAIL_DEL_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MAIL_DEL_RESPONSE& operator=(PROBUFF_NET_MAIL_DEL_RESPONSE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_MAIL_DEL_RESPONSE& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_MAIL_DEL_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MAIL_DEL_RESPONSE*>(
               &_PROBUFF_NET_MAIL_DEL_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(PROBUFF_NET_MAIL_DEL_RESPONSE& a, PROBUFF_NET_MAIL_DEL_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MAIL_DEL_RESPONSE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MAIL_DEL_RESPONSE* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_MAIL_DEL_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_MAIL_DEL_RESPONSE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_MAIL_DEL_RESPONSE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_MAIL_DEL_RESPONSE& from) {
    PROBUFF_NET_MAIL_DEL_RESPONSE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MAIL_DEL_RESPONSE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_MAIL_DEL_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMMailidFieldNumber = 1,
    kMStatFieldNumber = 2,
  };
  // optional int64 m_mailid = 1;
  bool has_m_mailid() const;
  void clear_m_mailid() ;
  ::int64_t m_mailid() const;
  void set_m_mailid(::int64_t value);

  private:
  ::int64_t _internal_m_mailid() const;
  void _internal_set_m_mailid(::int64_t value);

  public:
  // optional bool m_stat = 2;
  bool has_m_stat() const;
  void clear_m_stat() ;
  bool m_stat() const;
  void set_m_stat(bool value);

  private:
  bool _internal_m_stat() const;
  void _internal_set_m_stat(bool value);

  public:
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int64_t m_mailid_;
    bool m_stat_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class VECTOR2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.VECTOR2) */ {
 public:
  inline VECTOR2() : VECTOR2(nullptr) {}
  ~VECTOR2() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VECTOR2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VECTOR2(const VECTOR2& from);
  VECTOR2(VECTOR2&& from) noexcept
    : VECTOR2() {
    *this = ::std::move(from);
  }

  inline VECTOR2& operator=(const VECTOR2& from) {
    CopyFrom(from);
    return *this;
  }
  inline VECTOR2& operator=(VECTOR2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VECTOR2& default_instance() {
    return *internal_default_instance();
  }
  static inline const VECTOR2* internal_default_instance() {
    return reinterpret_cast<const VECTOR2*>(
               &_VECTOR2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(VECTOR2& a, VECTOR2& b) {
    a.Swap(&b);
  }
  inline void Swap(VECTOR2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VECTOR2* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VECTOR2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VECTOR2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VECTOR2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VECTOR2& from) {
    VECTOR2::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VECTOR2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.VECTOR2";
  }
  protected:
  explicit VECTOR2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMXFieldNumber = 1,
    kMYFieldNumber = 2,
  };
  // optional int32 m_x = 1;
  bool has_m_x() const;
  void clear_m_x() ;
  ::int32_t m_x() const;
  void set_m_x(::int32_t value);

  private:
  ::int32_t _internal_m_x() const;
  void _internal_set_m_x(::int32_t value);

  public:
  // optional int32 m_y = 2;
  bool has_m_y() const;
  void clear_m_y() ;
  ::int32_t m_y() const;
  void set_m_y(::int32_t value);

  private:
  ::int32_t _internal_m_y() const;
  void _internal_set_m_y(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:pbnet.VECTOR2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t m_x_;
    ::int32_t m_y_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class VECTOR3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.VECTOR3) */ {
 public:
  inline VECTOR3() : VECTOR3(nullptr) {}
  ~VECTOR3() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VECTOR3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VECTOR3(const VECTOR3& from);
  VECTOR3(VECTOR3&& from) noexcept
    : VECTOR3() {
    *this = ::std::move(from);
  }

  inline VECTOR3& operator=(const VECTOR3& from) {
    CopyFrom(from);
    return *this;
  }
  inline VECTOR3& operator=(VECTOR3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VECTOR3& default_instance() {
    return *internal_default_instance();
  }
  static inline const VECTOR3* internal_default_instance() {
    return reinterpret_cast<const VECTOR3*>(
               &_VECTOR3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(VECTOR3& a, VECTOR3& b) {
    a.Swap(&b);
  }
  inline void Swap(VECTOR3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VECTOR3* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VECTOR3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VECTOR3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VECTOR3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VECTOR3& from) {
    VECTOR3::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VECTOR3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.VECTOR3";
  }
  protected:
  explicit VECTOR3(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMXFieldNumber = 1,
    kMYFieldNumber = 2,
    kMZFieldNumber = 3,
  };
  // optional int32 m_x = 1;
  bool has_m_x() const;
  void clear_m_x() ;
  ::int32_t m_x() const;
  void set_m_x(::int32_t value);

  private:
  ::int32_t _internal_m_x() const;
  void _internal_set_m_x(::int32_t value);

  public:
  // optional int32 m_y = 2;
  bool has_m_y() const;
  void clear_m_y() ;
  ::int32_t m_y() const;
  void set_m_y(::int32_t value);

  private:
  ::int32_t _internal_m_y() const;
  void _internal_set_m_y(::int32_t value);

  public:
  // optional int32 m_z = 3;
  bool has_m_z() const;
  void clear_m_z() ;
  ::int32_t m_z() const;
  void set_m_z(::int32_t value);

  private:
  ::int32_t _internal_m_z() const;
  void _internal_set_m_z(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:pbnet.VECTOR3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t m_x_;
    ::int32_t m_y_;
    ::int32_t m_z_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class UNIT_POSITION final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.UNIT_POSITION) */ {
 public:
  inline UNIT_POSITION() : UNIT_POSITION(nullptr) {}
  ~UNIT_POSITION() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UNIT_POSITION(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UNIT_POSITION(const UNIT_POSITION& from);
  UNIT_POSITION(UNIT_POSITION&& from) noexcept
    : UNIT_POSITION() {
    *this = ::std::move(from);
  }

  inline UNIT_POSITION& operator=(const UNIT_POSITION& from) {
    CopyFrom(from);
    return *this;
  }
  inline UNIT_POSITION& operator=(UNIT_POSITION&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UNIT_POSITION& default_instance() {
    return *internal_default_instance();
  }
  static inline const UNIT_POSITION* internal_default_instance() {
    return reinterpret_cast<const UNIT_POSITION*>(
               &_UNIT_POSITION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(UNIT_POSITION& a, UNIT_POSITION& b) {
    a.Swap(&b);
  }
  inline void Swap(UNIT_POSITION* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UNIT_POSITION* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UNIT_POSITION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UNIT_POSITION>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UNIT_POSITION& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UNIT_POSITION& from) {
    UNIT_POSITION::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UNIT_POSITION* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.UNIT_POSITION";
  }
  protected:
  explicit UNIT_POSITION(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMPositionFieldNumber = 3,
    kMIdFieldNumber = 2,
    kMAngleFieldNumber = 4,
    kMSpeedFieldNumber = 5,
  };
  // optional .pbnet.VECTOR2 m_position = 3;
  bool has_m_position() const;
  void clear_m_position() ;
  const ::pbnet::VECTOR2& m_position() const;
  PROTOBUF_NODISCARD ::pbnet::VECTOR2* release_m_position();
  ::pbnet::VECTOR2* mutable_m_position();
  void set_allocated_m_position(::pbnet::VECTOR2* m_position);
  private:
  const ::pbnet::VECTOR2& _internal_m_position() const;
  ::pbnet::VECTOR2* _internal_mutable_m_position();
  public:
  void unsafe_arena_set_allocated_m_position(
      ::pbnet::VECTOR2* m_position);
  ::pbnet::VECTOR2* unsafe_arena_release_m_position();
  // optional int64 m_id = 2;
  bool has_m_id() const;
  void clear_m_id() ;
  ::int64_t m_id() const;
  void set_m_id(::int64_t value);

  private:
  ::int64_t _internal_m_id() const;
  void _internal_set_m_id(::int64_t value);

  public:
  // optional int32 m_angle = 4;
  bool has_m_angle() const;
  void clear_m_angle() ;
  ::int32_t m_angle() const;
  void set_m_angle(::int32_t value);

  private:
  ::int32_t _internal_m_angle() const;
  void _internal_set_m_angle(::int32_t value);

  public:
  // optional int32 m_speed = 5;
  bool has_m_speed() const;
  void clear_m_speed() ;
  ::int32_t m_speed() const;
  void set_m_speed(::int32_t value);

  private:
  ::int32_t _internal_m_speed() const;
  void _internal_set_m_speed(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:pbnet.UNIT_POSITION)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::pbnet::VECTOR2* m_position_;
    ::int64_t m_id_;
    ::int32_t m_angle_;
    ::int32_t m_speed_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class UNIT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.UNIT) */ {
 public:
  inline UNIT() : UNIT(nullptr) {}
  ~UNIT() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UNIT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UNIT(const UNIT& from);
  UNIT(UNIT&& from) noexcept
    : UNIT() {
    *this = ::std::move(from);
  }

  inline UNIT& operator=(const UNIT& from) {
    CopyFrom(from);
    return *this;
  }
  inline UNIT& operator=(UNIT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UNIT& default_instance() {
    return *internal_default_instance();
  }
  static inline const UNIT* internal_default_instance() {
    return reinterpret_cast<const UNIT*>(
               &_UNIT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(UNIT& a, UNIT& b) {
    a.Swap(&b);
  }
  inline void Swap(UNIT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UNIT* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UNIT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UNIT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UNIT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UNIT& from) {
    UNIT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UNIT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.UNIT";
  }
  protected:
  explicit UNIT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMPositionFieldNumber = 3,
    kMIdFieldNumber = 2,
    kMTypeFieldNumber = 1,
  };
  // optional .pbnet.UNIT_POSITION m_position = 3;
  bool has_m_position() const;
  void clear_m_position() ;
  const ::pbnet::UNIT_POSITION& m_position() const;
  PROTOBUF_NODISCARD ::pbnet::UNIT_POSITION* release_m_position();
  ::pbnet::UNIT_POSITION* mutable_m_position();
  void set_allocated_m_position(::pbnet::UNIT_POSITION* m_position);
  private:
  const ::pbnet::UNIT_POSITION& _internal_m_position() const;
  ::pbnet::UNIT_POSITION* _internal_mutable_m_position();
  public:
  void unsafe_arena_set_allocated_m_position(
      ::pbnet::UNIT_POSITION* m_position);
  ::pbnet::UNIT_POSITION* unsafe_arena_release_m_position();
  // optional int64 m_id = 2;
  bool has_m_id() const;
  void clear_m_id() ;
  ::int64_t m_id() const;
  void set_m_id(::int64_t value);

  private:
  ::int64_t _internal_m_id() const;
  void _internal_set_m_id(::int64_t value);

  public:
  // optional .pbnet.eunit m_type = 1;
  bool has_m_type() const;
  void clear_m_type() ;
  ::pbnet::eunit m_type() const;
  void set_m_type(::pbnet::eunit value);

  private:
  ::pbnet::eunit _internal_m_type() const;
  void _internal_set_m_type(::pbnet::eunit value);

  public:
  // @@protoc_insertion_point(class_scope:pbnet.UNIT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::pbnet::UNIT_POSITION* m_position_;
    ::int64_t m_id_;
    int m_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_SYNC_UNIT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_SYNC_UNIT) */ {
 public:
  inline PROBUFF_NET_SYNC_UNIT() : PROBUFF_NET_SYNC_UNIT(nullptr) {}
  ~PROBUFF_NET_SYNC_UNIT() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_SYNC_UNIT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_SYNC_UNIT(const PROBUFF_NET_SYNC_UNIT& from);
  PROBUFF_NET_SYNC_UNIT(PROBUFF_NET_SYNC_UNIT&& from) noexcept
    : PROBUFF_NET_SYNC_UNIT() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_SYNC_UNIT& operator=(const PROBUFF_NET_SYNC_UNIT& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_SYNC_UNIT& operator=(PROBUFF_NET_SYNC_UNIT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_SYNC_UNIT& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_SYNC_UNIT* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_SYNC_UNIT*>(
               &_PROBUFF_NET_SYNC_UNIT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(PROBUFF_NET_SYNC_UNIT& a, PROBUFF_NET_SYNC_UNIT& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_SYNC_UNIT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_SYNC_UNIT* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_SYNC_UNIT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_SYNC_UNIT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_SYNC_UNIT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_SYNC_UNIT& from) {
    PROBUFF_NET_SYNC_UNIT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_SYNC_UNIT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_SYNC_UNIT";
  }
  protected:
  explicit PROBUFF_NET_SYNC_UNIT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMUnitsFieldNumber = 1,
  };
  // repeated .pbnet.UNIT m_units = 1;
  int m_units_size() const;
  private:
  int _internal_m_units_size() const;

  public:
  void clear_m_units() ;
  ::pbnet::UNIT* mutable_m_units(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UNIT >*
      mutable_m_units();
  private:
  const ::pbnet::UNIT& _internal_m_units(int index) const;
  ::pbnet::UNIT* _internal_add_m_units();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::pbnet::UNIT>& _internal_m_units() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::pbnet::UNIT>* _internal_mutable_m_units();
  public:
  const ::pbnet::UNIT& m_units(int index) const;
  ::pbnet::UNIT* add_m_units();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UNIT >&
      m_units() const;
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_SYNC_UNIT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UNIT > m_units_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_ENTER_LEAVE_VIEW final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW) */ {
 public:
  inline PROBUFF_NET_ENTER_LEAVE_VIEW() : PROBUFF_NET_ENTER_LEAVE_VIEW(nullptr) {}
  ~PROBUFF_NET_ENTER_LEAVE_VIEW() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_ENTER_LEAVE_VIEW(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_ENTER_LEAVE_VIEW(const PROBUFF_NET_ENTER_LEAVE_VIEW& from);
  PROBUFF_NET_ENTER_LEAVE_VIEW(PROBUFF_NET_ENTER_LEAVE_VIEW&& from) noexcept
    : PROBUFF_NET_ENTER_LEAVE_VIEW() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_ENTER_LEAVE_VIEW& operator=(const PROBUFF_NET_ENTER_LEAVE_VIEW& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_ENTER_LEAVE_VIEW& operator=(PROBUFF_NET_ENTER_LEAVE_VIEW&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_ENTER_LEAVE_VIEW& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_ENTER_LEAVE_VIEW* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_ENTER_LEAVE_VIEW*>(
               &_PROBUFF_NET_ENTER_LEAVE_VIEW_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(PROBUFF_NET_ENTER_LEAVE_VIEW& a, PROBUFF_NET_ENTER_LEAVE_VIEW& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_ENTER_LEAVE_VIEW* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_ENTER_LEAVE_VIEW* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_ENTER_LEAVE_VIEW* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_ENTER_LEAVE_VIEW>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_ENTER_LEAVE_VIEW& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_ENTER_LEAVE_VIEW& from) {
    PROBUFF_NET_ENTER_LEAVE_VIEW::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_ENTER_LEAVE_VIEW* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW";
  }
  protected:
  explicit PROBUFF_NET_ENTER_LEAVE_VIEW(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMUnitsFieldNumber = 2,
    kMIsenterFieldNumber = 1,
  };
  // repeated int64 m_units = 2;
  int m_units_size() const;
  private:
  int _internal_m_units_size() const;

  public:
  void clear_m_units() ;
  ::int64_t m_units(int index) const;
  void set_m_units(int index, ::int64_t value);
  void add_m_units(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& m_units() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* mutable_m_units();

  private:
  ::int64_t _internal_m_units(int index) const;
  void _internal_add_m_units(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& _internal_m_units() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* _internal_mutable_m_units();

  public:
  // optional bool m_isenter = 1;
  bool has_m_isenter() const;
  void clear_m_isenter() ;
  bool m_isenter() const;
  void set_m_isenter(bool value);

  private:
  bool _internal_m_isenter() const;
  void _internal_set_m_isenter(bool value);

  public:
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t> m_units_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _m_units_cached_byte_size_;
    bool m_isenter_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse final : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse, 
    ::int64_t, ::pbnet::UNIT_POSITION,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse, 
    ::int64_t, ::pbnet::UNIT_POSITION,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse& other);
  static const PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse*>(&_PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_SYNC_POSITION final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_SYNC_POSITION) */ {
 public:
  inline PROBUFF_NET_SYNC_POSITION() : PROBUFF_NET_SYNC_POSITION(nullptr) {}
  ~PROBUFF_NET_SYNC_POSITION() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_SYNC_POSITION(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_SYNC_POSITION(const PROBUFF_NET_SYNC_POSITION& from);
  PROBUFF_NET_SYNC_POSITION(PROBUFF_NET_SYNC_POSITION&& from) noexcept
    : PROBUFF_NET_SYNC_POSITION() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_SYNC_POSITION& operator=(const PROBUFF_NET_SYNC_POSITION& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_SYNC_POSITION& operator=(PROBUFF_NET_SYNC_POSITION&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_SYNC_POSITION& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_SYNC_POSITION* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_SYNC_POSITION*>(
               &_PROBUFF_NET_SYNC_POSITION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(PROBUFF_NET_SYNC_POSITION& a, PROBUFF_NET_SYNC_POSITION& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_SYNC_POSITION* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_SYNC_POSITION* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_SYNC_POSITION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_SYNC_POSITION>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_SYNC_POSITION& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_SYNC_POSITION& from) {
    PROBUFF_NET_SYNC_POSITION::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_SYNC_POSITION* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_SYNC_POSITION";
  }
  protected:
  explicit PROBUFF_NET_SYNC_POSITION(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMPositionFieldNumber = 1,
  };
  // map<int64, .pbnet.UNIT_POSITION> m_position = 1;
  int m_position_size() const;
  private:
  int _internal_m_position_size() const;

  public:
  void clear_m_position() ;
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::int64_t, ::pbnet::UNIT_POSITION >&
      _internal_m_position() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::int64_t, ::pbnet::UNIT_POSITION >*
      _internal_mutable_m_position();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::int64_t, ::pbnet::UNIT_POSITION >&
      m_position() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::int64_t, ::pbnet::UNIT_POSITION >*
      mutable_m_position();
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_SYNC_POSITION)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse,
        ::int64_t, ::pbnet::UNIT_POSITION,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> m_position_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_CHANGE_ANGLE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_CHANGE_ANGLE) */ {
 public:
  inline PROBUFF_NET_CHANGE_ANGLE() : PROBUFF_NET_CHANGE_ANGLE(nullptr) {}
  ~PROBUFF_NET_CHANGE_ANGLE() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_CHANGE_ANGLE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_CHANGE_ANGLE(const PROBUFF_NET_CHANGE_ANGLE& from);
  PROBUFF_NET_CHANGE_ANGLE(PROBUFF_NET_CHANGE_ANGLE&& from) noexcept
    : PROBUFF_NET_CHANGE_ANGLE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_CHANGE_ANGLE& operator=(const PROBUFF_NET_CHANGE_ANGLE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_CHANGE_ANGLE& operator=(PROBUFF_NET_CHANGE_ANGLE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_CHANGE_ANGLE& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_CHANGE_ANGLE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_CHANGE_ANGLE*>(
               &_PROBUFF_NET_CHANGE_ANGLE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(PROBUFF_NET_CHANGE_ANGLE& a, PROBUFF_NET_CHANGE_ANGLE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_CHANGE_ANGLE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_CHANGE_ANGLE* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_CHANGE_ANGLE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_CHANGE_ANGLE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_CHANGE_ANGLE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_CHANGE_ANGLE& from) {
    PROBUFF_NET_CHANGE_ANGLE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_CHANGE_ANGLE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_CHANGE_ANGLE";
  }
  protected:
  explicit PROBUFF_NET_CHANGE_ANGLE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMPositionFieldNumber = 1,
  };
  // optional .pbnet.UNIT_POSITION m_position = 1;
  bool has_m_position() const;
  void clear_m_position() ;
  const ::pbnet::UNIT_POSITION& m_position() const;
  PROTOBUF_NODISCARD ::pbnet::UNIT_POSITION* release_m_position();
  ::pbnet::UNIT_POSITION* mutable_m_position();
  void set_allocated_m_position(::pbnet::UNIT_POSITION* m_position);
  private:
  const ::pbnet::UNIT_POSITION& _internal_m_position() const;
  ::pbnet::UNIT_POSITION* _internal_mutable_m_position();
  public:
  void unsafe_arena_set_allocated_m_position(
      ::pbnet::UNIT_POSITION* m_position);
  ::pbnet::UNIT_POSITION* unsafe_arena_release_m_position();
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_CHANGE_ANGLE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::pbnet::UNIT_POSITION* m_position_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_MATCHING final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MATCHING) */ {
 public:
  inline PROBUFF_NET_MATCHING() : PROBUFF_NET_MATCHING(nullptr) {}
  ~PROBUFF_NET_MATCHING() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_MATCHING(const PROBUFF_NET_MATCHING& from);
  PROBUFF_NET_MATCHING(PROBUFF_NET_MATCHING&& from) noexcept
    : PROBUFF_NET_MATCHING() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MATCHING& operator=(const PROBUFF_NET_MATCHING& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MATCHING& operator=(PROBUFF_NET_MATCHING&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_MATCHING& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_MATCHING* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MATCHING*>(
               &_PROBUFF_NET_MATCHING_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(PROBUFF_NET_MATCHING& a, PROBUFF_NET_MATCHING& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MATCHING* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MATCHING* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_MATCHING* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_MATCHING>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_MATCHING& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_MATCHING& from) {
    PROBUFF_NET_MATCHING::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MATCHING* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_MATCHING";
  }
  protected:
  explicit PROBUFF_NET_MATCHING(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMTypeFieldNumber = 1,
    kMTidFieldNumber = 2,
  };
  // optional .pbnet.eplays m_type = 1;
  bool has_m_type() const;
  void clear_m_type() ;
  ::pbnet::eplays m_type() const;
  void set_m_type(::pbnet::eplays value);

  private:
  ::pbnet::eplays _internal_m_type() const;
  void _internal_set_m_type(::pbnet::eplays value);

  public:
  // optional int32 m_tid = 2;
  bool has_m_tid() const;
  void clear_m_tid() ;
  ::int32_t m_tid() const;
  void set_m_tid(::int32_t value);

  private:
  ::int32_t _internal_m_tid() const;
  void _internal_set_m_tid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MATCHING)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int m_type_;
    ::int32_t m_tid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class MATCHING_MEMBER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.MATCHING_MEMBER) */ {
 public:
  inline MATCHING_MEMBER() : MATCHING_MEMBER(nullptr) {}
  ~MATCHING_MEMBER() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MATCHING_MEMBER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MATCHING_MEMBER(const MATCHING_MEMBER& from);
  MATCHING_MEMBER(MATCHING_MEMBER&& from) noexcept
    : MATCHING_MEMBER() {
    *this = ::std::move(from);
  }

  inline MATCHING_MEMBER& operator=(const MATCHING_MEMBER& from) {
    CopyFrom(from);
    return *this;
  }
  inline MATCHING_MEMBER& operator=(MATCHING_MEMBER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MATCHING_MEMBER& default_instance() {
    return *internal_default_instance();
  }
  static inline const MATCHING_MEMBER* internal_default_instance() {
    return reinterpret_cast<const MATCHING_MEMBER*>(
               &_MATCHING_MEMBER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(MATCHING_MEMBER& a, MATCHING_MEMBER& b) {
    a.Swap(&b);
  }
  inline void Swap(MATCHING_MEMBER* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MATCHING_MEMBER* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MATCHING_MEMBER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MATCHING_MEMBER>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MATCHING_MEMBER& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MATCHING_MEMBER& from) {
    MATCHING_MEMBER::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MATCHING_MEMBER* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.MATCHING_MEMBER";
  }
  protected:
  explicit MATCHING_MEMBER(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMNameFieldNumber = 2,
    kMIdFieldNumber = 1,
    kMLvFieldNumber = 3,
    kMBegmatchFieldNumber = 4,
    kMIsconfirmFieldNumber = 5,
  };
  // optional string m_name = 2;
  bool has_m_name() const;
  void clear_m_name() ;
  const std::string& m_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_m_name(Arg_&& arg, Args_... args);
  std::string* mutable_m_name();
  PROTOBUF_NODISCARD std::string* release_m_name();
  void set_allocated_m_name(std::string* ptr);

  private:
  const std::string& _internal_m_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_m_name(
      const std::string& value);
  std::string* _internal_mutable_m_name();

  public:
  // optional int64 m_id = 1;
  bool has_m_id() const;
  void clear_m_id() ;
  ::int64_t m_id() const;
  void set_m_id(::int64_t value);

  private:
  ::int64_t _internal_m_id() const;
  void _internal_set_m_id(::int64_t value);

  public:
  // optional int32 m_lv = 3;
  bool has_m_lv() const;
  void clear_m_lv() ;
  ::int32_t m_lv() const;
  void set_m_lv(::int32_t value);

  private:
  ::int32_t _internal_m_lv() const;
  void _internal_set_m_lv(::int32_t value);

  public:
  // optional int32 m_begmatch = 4;
  bool has_m_begmatch() const;
  void clear_m_begmatch() ;
  ::int32_t m_begmatch() const;
  void set_m_begmatch(::int32_t value);

  private:
  ::int32_t _internal_m_begmatch() const;
  void _internal_set_m_begmatch(::int32_t value);

  public:
  // optional bool m_isconfirm = 5;
  bool has_m_isconfirm() const;
  void clear_m_isconfirm() ;
  bool m_isconfirm() const;
  void set_m_isconfirm(bool value);

  private:
  bool _internal_m_isconfirm() const;
  void _internal_set_m_isconfirm(bool value);

  public:
  // @@protoc_insertion_point(class_scope:pbnet.MATCHING_MEMBER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_name_;
    ::int64_t m_id_;
    ::int32_t m_lv_;
    ::int32_t m_begmatch_;
    bool m_isconfirm_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_MATCHING_RESPONSE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MATCHING_RESPONSE) */ {
 public:
  inline PROBUFF_NET_MATCHING_RESPONSE() : PROBUFF_NET_MATCHING_RESPONSE(nullptr) {}
  ~PROBUFF_NET_MATCHING_RESPONSE() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_RESPONSE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_MATCHING_RESPONSE(const PROBUFF_NET_MATCHING_RESPONSE& from);
  PROBUFF_NET_MATCHING_RESPONSE(PROBUFF_NET_MATCHING_RESPONSE&& from) noexcept
    : PROBUFF_NET_MATCHING_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MATCHING_RESPONSE& operator=(const PROBUFF_NET_MATCHING_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MATCHING_RESPONSE& operator=(PROBUFF_NET_MATCHING_RESPONSE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_MATCHING_RESPONSE& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_MATCHING_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MATCHING_RESPONSE*>(
               &_PROBUFF_NET_MATCHING_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(PROBUFF_NET_MATCHING_RESPONSE& a, PROBUFF_NET_MATCHING_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MATCHING_RESPONSE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MATCHING_RESPONSE* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_MATCHING_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_MATCHING_RESPONSE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_MATCHING_RESPONSE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_MATCHING_RESPONSE& from) {
    PROBUFF_NET_MATCHING_RESPONSE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MATCHING_RESPONSE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_MATCHING_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_MATCHING_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMIdFieldNumber = 1,
  };
  // optional int64 m_id = 1;
  bool has_m_id() const;
  void clear_m_id() ;
  ::int64_t m_id() const;
  void set_m_id(::int64_t value);

  private:
  ::int64_t _internal_m_id() const;
  void _internal_set_m_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MATCHING_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int64_t m_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_MATCHING_CANCEL final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MATCHING_CANCEL) */ {
 public:
  inline PROBUFF_NET_MATCHING_CANCEL() : PROBUFF_NET_MATCHING_CANCEL(nullptr) {}
  ~PROBUFF_NET_MATCHING_CANCEL() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_CANCEL(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_MATCHING_CANCEL(const PROBUFF_NET_MATCHING_CANCEL& from);
  PROBUFF_NET_MATCHING_CANCEL(PROBUFF_NET_MATCHING_CANCEL&& from) noexcept
    : PROBUFF_NET_MATCHING_CANCEL() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MATCHING_CANCEL& operator=(const PROBUFF_NET_MATCHING_CANCEL& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MATCHING_CANCEL& operator=(PROBUFF_NET_MATCHING_CANCEL&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_MATCHING_CANCEL& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_MATCHING_CANCEL* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MATCHING_CANCEL*>(
               &_PROBUFF_NET_MATCHING_CANCEL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(PROBUFF_NET_MATCHING_CANCEL& a, PROBUFF_NET_MATCHING_CANCEL& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MATCHING_CANCEL* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MATCHING_CANCEL* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_MATCHING_CANCEL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_MATCHING_CANCEL>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_MATCHING_CANCEL& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_MATCHING_CANCEL& from) {
    PROBUFF_NET_MATCHING_CANCEL::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MATCHING_CANCEL* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_MATCHING_CANCEL";
  }
  protected:
  explicit PROBUFF_NET_MATCHING_CANCEL(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMRoomidFieldNumber = 2,
    kMTypeFieldNumber = 1,
  };
  // optional int64 m_roomid = 2;
  bool has_m_roomid() const;
  void clear_m_roomid() ;
  ::int64_t m_roomid() const;
  void set_m_roomid(::int64_t value);

  private:
  ::int64_t _internal_m_roomid() const;
  void _internal_set_m_roomid(::int64_t value);

  public:
  // optional .pbnet.eplays m_type = 1;
  bool has_m_type() const;
  void clear_m_type() ;
  ::pbnet::eplays m_type() const;
  void set_m_type(::pbnet::eplays value);

  private:
  ::pbnet::eplays _internal_m_type() const;
  void _internal_set_m_type(::pbnet::eplays value);

  public:
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MATCHING_CANCEL)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int64_t m_roomid_;
    int m_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_MATCHING_CANCEL_RESPONSE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE) */ {
 public:
  inline PROBUFF_NET_MATCHING_CANCEL_RESPONSE() : PROBUFF_NET_MATCHING_CANCEL_RESPONSE(nullptr) {}
  ~PROBUFF_NET_MATCHING_CANCEL_RESPONSE() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_CANCEL_RESPONSE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_MATCHING_CANCEL_RESPONSE(const PROBUFF_NET_MATCHING_CANCEL_RESPONSE& from);
  PROBUFF_NET_MATCHING_CANCEL_RESPONSE(PROBUFF_NET_MATCHING_CANCEL_RESPONSE&& from) noexcept
    : PROBUFF_NET_MATCHING_CANCEL_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MATCHING_CANCEL_RESPONSE& operator=(const PROBUFF_NET_MATCHING_CANCEL_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MATCHING_CANCEL_RESPONSE& operator=(PROBUFF_NET_MATCHING_CANCEL_RESPONSE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_MATCHING_CANCEL_RESPONSE& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_MATCHING_CANCEL_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MATCHING_CANCEL_RESPONSE*>(
               &_PROBUFF_NET_MATCHING_CANCEL_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(PROBUFF_NET_MATCHING_CANCEL_RESPONSE& a, PROBUFF_NET_MATCHING_CANCEL_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MATCHING_CANCEL_RESPONSE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MATCHING_CANCEL_RESPONSE* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_MATCHING_CANCEL_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_MATCHING_CANCEL_RESPONSE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_MATCHING_CANCEL_RESPONSE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_MATCHING_CANCEL_RESPONSE& from) {
    PROBUFF_NET_MATCHING_CANCEL_RESPONSE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MATCHING_CANCEL_RESPONSE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_MATCHING_CANCEL_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMTypeFieldNumber = 1,
    kMStatFieldNumber = 2,
  };
  // optional .pbnet.eplays m_type = 1;
  bool has_m_type() const;
  void clear_m_type() ;
  ::pbnet::eplays m_type() const;
  void set_m_type(::pbnet::eplays value);

  private:
  ::pbnet::eplays _internal_m_type() const;
  void _internal_set_m_type(::pbnet::eplays value);

  public:
  // optional .pbnet.ematching_cancel_stat m_stat = 2;
  bool has_m_stat() const;
  void clear_m_stat() ;
  ::pbnet::ematching_cancel_stat m_stat() const;
  void set_m_stat(::pbnet::ematching_cancel_stat value);

  private:
  ::pbnet::ematching_cancel_stat _internal_m_stat() const;
  void _internal_set_m_stat(::pbnet::ematching_cancel_stat value);

  public:
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int m_type_;
    int m_stat_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_MEMBER_MATCHING_CANCEL final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL) */ {
 public:
  inline PROBUFF_NET_MEMBER_MATCHING_CANCEL() : PROBUFF_NET_MEMBER_MATCHING_CANCEL(nullptr) {}
  ~PROBUFF_NET_MEMBER_MATCHING_CANCEL() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_MEMBER_MATCHING_CANCEL(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_MEMBER_MATCHING_CANCEL(const PROBUFF_NET_MEMBER_MATCHING_CANCEL& from);
  PROBUFF_NET_MEMBER_MATCHING_CANCEL(PROBUFF_NET_MEMBER_MATCHING_CANCEL&& from) noexcept
    : PROBUFF_NET_MEMBER_MATCHING_CANCEL() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MEMBER_MATCHING_CANCEL& operator=(const PROBUFF_NET_MEMBER_MATCHING_CANCEL& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MEMBER_MATCHING_CANCEL& operator=(PROBUFF_NET_MEMBER_MATCHING_CANCEL&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_MEMBER_MATCHING_CANCEL& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_MEMBER_MATCHING_CANCEL* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MEMBER_MATCHING_CANCEL*>(
               &_PROBUFF_NET_MEMBER_MATCHING_CANCEL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(PROBUFF_NET_MEMBER_MATCHING_CANCEL& a, PROBUFF_NET_MEMBER_MATCHING_CANCEL& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MEMBER_MATCHING_CANCEL* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MEMBER_MATCHING_CANCEL* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_MEMBER_MATCHING_CANCEL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_MEMBER_MATCHING_CANCEL>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_MEMBER_MATCHING_CANCEL& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_MEMBER_MATCHING_CANCEL& from) {
    PROBUFF_NET_MEMBER_MATCHING_CANCEL::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MEMBER_MATCHING_CANCEL* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL";
  }
  protected:
  explicit PROBUFF_NET_MEMBER_MATCHING_CANCEL(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMCancelmemberFieldNumber = 3,
    kMTypeFieldNumber = 1,
    kMCanceltypeFieldNumber = 2,
  };
  // repeated int64 m_cancelmember = 3;
  int m_cancelmember_size() const;
  private:
  int _internal_m_cancelmember_size() const;

  public:
  void clear_m_cancelmember() ;
  ::int64_t m_cancelmember(int index) const;
  void set_m_cancelmember(int index, ::int64_t value);
  void add_m_cancelmember(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& m_cancelmember() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* mutable_m_cancelmember();

  private:
  ::int64_t _internal_m_cancelmember(int index) const;
  void _internal_add_m_cancelmember(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& _internal_m_cancelmember() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* _internal_mutable_m_cancelmember();

  public:
  // optional .pbnet.eplays m_type = 1;
  bool has_m_type() const;
  void clear_m_type() ;
  ::pbnet::eplays m_type() const;
  void set_m_type(::pbnet::eplays value);

  private:
  ::pbnet::eplays _internal_m_type() const;
  void _internal_set_m_type(::pbnet::eplays value);

  public:
  // optional .pbnet.etype_matching_cancel m_canceltype = 2;
  bool has_m_canceltype() const;
  void clear_m_canceltype() ;
  ::pbnet::etype_matching_cancel m_canceltype() const;
  void set_m_canceltype(::pbnet::etype_matching_cancel value);

  private:
  ::pbnet::etype_matching_cancel _internal_m_canceltype() const;
  void _internal_set_m_canceltype(::pbnet::etype_matching_cancel value);

  public:
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t> m_cancelmember_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _m_cancelmember_cached_byte_size_;
    int m_type_;
    int m_canceltype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_MATCHING_WAITCONFIRM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM) */ {
 public:
  inline PROBUFF_NET_MATCHING_WAITCONFIRM() : PROBUFF_NET_MATCHING_WAITCONFIRM(nullptr) {}
  ~PROBUFF_NET_MATCHING_WAITCONFIRM() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_WAITCONFIRM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_MATCHING_WAITCONFIRM(const PROBUFF_NET_MATCHING_WAITCONFIRM& from);
  PROBUFF_NET_MATCHING_WAITCONFIRM(PROBUFF_NET_MATCHING_WAITCONFIRM&& from) noexcept
    : PROBUFF_NET_MATCHING_WAITCONFIRM() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MATCHING_WAITCONFIRM& operator=(const PROBUFF_NET_MATCHING_WAITCONFIRM& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MATCHING_WAITCONFIRM& operator=(PROBUFF_NET_MATCHING_WAITCONFIRM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_MATCHING_WAITCONFIRM& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_MATCHING_WAITCONFIRM* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MATCHING_WAITCONFIRM*>(
               &_PROBUFF_NET_MATCHING_WAITCONFIRM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(PROBUFF_NET_MATCHING_WAITCONFIRM& a, PROBUFF_NET_MATCHING_WAITCONFIRM& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MATCHING_WAITCONFIRM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MATCHING_WAITCONFIRM* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_MATCHING_WAITCONFIRM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_MATCHING_WAITCONFIRM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_MATCHING_WAITCONFIRM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_MATCHING_WAITCONFIRM& from) {
    PROBUFF_NET_MATCHING_WAITCONFIRM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MATCHING_WAITCONFIRM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM";
  }
  protected:
  explicit PROBUFF_NET_MATCHING_WAITCONFIRM(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMTypeFieldNumber = 1,
    kMRoomidFieldNumber = 2,
  };
  // optional .pbnet.eplays m_type = 1;
  bool has_m_type() const;
  void clear_m_type() ;
  ::pbnet::eplays m_type() const;
  void set_m_type(::pbnet::eplays value);

  private:
  ::pbnet::eplays _internal_m_type() const;
  void _internal_set_m_type(::pbnet::eplays value);

  public:
  // optional int32 m_roomid = 2;
  bool has_m_roomid() const;
  void clear_m_roomid() ;
  ::int32_t m_roomid() const;
  void set_m_roomid(::int32_t value);

  private:
  ::int32_t _internal_m_roomid() const;
  void _internal_set_m_roomid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int m_type_;
    ::int32_t m_roomid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_MATCHING_CONFIRM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MATCHING_CONFIRM) */ {
 public:
  inline PROBUFF_NET_MATCHING_CONFIRM() : PROBUFF_NET_MATCHING_CONFIRM(nullptr) {}
  ~PROBUFF_NET_MATCHING_CONFIRM() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_CONFIRM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_MATCHING_CONFIRM(const PROBUFF_NET_MATCHING_CONFIRM& from);
  PROBUFF_NET_MATCHING_CONFIRM(PROBUFF_NET_MATCHING_CONFIRM&& from) noexcept
    : PROBUFF_NET_MATCHING_CONFIRM() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MATCHING_CONFIRM& operator=(const PROBUFF_NET_MATCHING_CONFIRM& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MATCHING_CONFIRM& operator=(PROBUFF_NET_MATCHING_CONFIRM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_MATCHING_CONFIRM& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_MATCHING_CONFIRM* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MATCHING_CONFIRM*>(
               &_PROBUFF_NET_MATCHING_CONFIRM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(PROBUFF_NET_MATCHING_CONFIRM& a, PROBUFF_NET_MATCHING_CONFIRM& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MATCHING_CONFIRM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MATCHING_CONFIRM* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_MATCHING_CONFIRM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_MATCHING_CONFIRM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_MATCHING_CONFIRM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_MATCHING_CONFIRM& from) {
    PROBUFF_NET_MATCHING_CONFIRM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MATCHING_CONFIRM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_MATCHING_CONFIRM";
  }
  protected:
  explicit PROBUFF_NET_MATCHING_CONFIRM(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMTypeFieldNumber = 1,
    kMRoomidFieldNumber = 2,
  };
  // optional .pbnet.eplays m_type = 1;
  bool has_m_type() const;
  void clear_m_type() ;
  ::pbnet::eplays m_type() const;
  void set_m_type(::pbnet::eplays value);

  private:
  ::pbnet::eplays _internal_m_type() const;
  void _internal_set_m_type(::pbnet::eplays value);

  public:
  // optional int32 m_roomid = 2;
  bool has_m_roomid() const;
  void clear_m_roomid() ;
  ::int32_t m_roomid() const;
  void set_m_roomid(::int32_t value);

  private:
  ::int32_t _internal_m_roomid() const;
  void _internal_set_m_roomid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MATCHING_CONFIRM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int m_type_;
    ::int32_t m_roomid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_MATCHING_CONFIRM_RESPONSE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE) */ {
 public:
  inline PROBUFF_NET_MATCHING_CONFIRM_RESPONSE() : PROBUFF_NET_MATCHING_CONFIRM_RESPONSE(nullptr) {}
  ~PROBUFF_NET_MATCHING_CONFIRM_RESPONSE() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_CONFIRM_RESPONSE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_MATCHING_CONFIRM_RESPONSE(const PROBUFF_NET_MATCHING_CONFIRM_RESPONSE& from);
  PROBUFF_NET_MATCHING_CONFIRM_RESPONSE(PROBUFF_NET_MATCHING_CONFIRM_RESPONSE&& from) noexcept
    : PROBUFF_NET_MATCHING_CONFIRM_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MATCHING_CONFIRM_RESPONSE& operator=(const PROBUFF_NET_MATCHING_CONFIRM_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MATCHING_CONFIRM_RESPONSE& operator=(PROBUFF_NET_MATCHING_CONFIRM_RESPONSE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_MATCHING_CONFIRM_RESPONSE& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_MATCHING_CONFIRM_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MATCHING_CONFIRM_RESPONSE*>(
               &_PROBUFF_NET_MATCHING_CONFIRM_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(PROBUFF_NET_MATCHING_CONFIRM_RESPONSE& a, PROBUFF_NET_MATCHING_CONFIRM_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MATCHING_CONFIRM_RESPONSE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MATCHING_CONFIRM_RESPONSE* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_MATCHING_CONFIRM_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_MATCHING_CONFIRM_RESPONSE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_MATCHING_CONFIRM_RESPONSE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_MATCHING_CONFIRM_RESPONSE& from) {
    PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MATCHING_CONFIRM_RESPONSE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_MATCHING_CONFIRM_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMTypeFieldNumber = 1,
    kMRoomidFieldNumber = 2,
    kMStatFieldNumber = 3,
  };
  // optional .pbnet.eplays m_type = 1;
  bool has_m_type() const;
  void clear_m_type() ;
  ::pbnet::eplays m_type() const;
  void set_m_type(::pbnet::eplays value);

  private:
  ::pbnet::eplays _internal_m_type() const;
  void _internal_set_m_type(::pbnet::eplays value);

  public:
  // optional int32 m_roomid = 2;
  bool has_m_roomid() const;
  void clear_m_roomid() ;
  ::int32_t m_roomid() const;
  void set_m_roomid(::int32_t value);

  private:
  ::int32_t _internal_m_roomid() const;
  void _internal_set_m_roomid(::int32_t value);

  public:
  // optional .pbnet.ematching_confirm_stat m_stat = 3;
  bool has_m_stat() const;
  void clear_m_stat() ;
  ::pbnet::ematching_confirm_stat m_stat() const;
  void set_m_stat(::pbnet::ematching_confirm_stat value);

  private:
  ::pbnet::ematching_confirm_stat _internal_m_stat() const;
  void _internal_set_m_stat(::pbnet::ematching_confirm_stat value);

  public:
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int m_type_;
    ::int32_t m_roomid_;
    int m_stat_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_SYNC_MATCHING_CONFIRM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM) */ {
 public:
  inline PROBUFF_NET_SYNC_MATCHING_CONFIRM() : PROBUFF_NET_SYNC_MATCHING_CONFIRM(nullptr) {}
  ~PROBUFF_NET_SYNC_MATCHING_CONFIRM() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_SYNC_MATCHING_CONFIRM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_SYNC_MATCHING_CONFIRM(const PROBUFF_NET_SYNC_MATCHING_CONFIRM& from);
  PROBUFF_NET_SYNC_MATCHING_CONFIRM(PROBUFF_NET_SYNC_MATCHING_CONFIRM&& from) noexcept
    : PROBUFF_NET_SYNC_MATCHING_CONFIRM() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_SYNC_MATCHING_CONFIRM& operator=(const PROBUFF_NET_SYNC_MATCHING_CONFIRM& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_SYNC_MATCHING_CONFIRM& operator=(PROBUFF_NET_SYNC_MATCHING_CONFIRM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_SYNC_MATCHING_CONFIRM& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_SYNC_MATCHING_CONFIRM* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_SYNC_MATCHING_CONFIRM*>(
               &_PROBUFF_NET_SYNC_MATCHING_CONFIRM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(PROBUFF_NET_SYNC_MATCHING_CONFIRM& a, PROBUFF_NET_SYNC_MATCHING_CONFIRM& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_SYNC_MATCHING_CONFIRM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_SYNC_MATCHING_CONFIRM* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_SYNC_MATCHING_CONFIRM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_SYNC_MATCHING_CONFIRM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_SYNC_MATCHING_CONFIRM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_SYNC_MATCHING_CONFIRM& from) {
    PROBUFF_NET_SYNC_MATCHING_CONFIRM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_SYNC_MATCHING_CONFIRM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM";
  }
  protected:
  explicit PROBUFF_NET_SYNC_MATCHING_CONFIRM(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMRoleidFieldNumber = 3,
    kMTypeFieldNumber = 1,
    kMRoomidFieldNumber = 2,
  };
  // repeated int64 m_roleid = 3;
  int m_roleid_size() const;
  private:
  int _internal_m_roleid_size() const;

  public:
  void clear_m_roleid() ;
  ::int64_t m_roleid(int index) const;
  void set_m_roleid(int index, ::int64_t value);
  void add_m_roleid(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& m_roleid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* mutable_m_roleid();

  private:
  ::int64_t _internal_m_roleid(int index) const;
  void _internal_add_m_roleid(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& _internal_m_roleid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* _internal_mutable_m_roleid();

  public:
  // optional .pbnet.eplays m_type = 1;
  bool has_m_type() const;
  void clear_m_type() ;
  ::pbnet::eplays m_type() const;
  void set_m_type(::pbnet::eplays value);

  private:
  ::pbnet::eplays _internal_m_type() const;
  void _internal_set_m_type(::pbnet::eplays value);

  public:
  // optional int32 m_roomid = 2;
  bool has_m_roomid() const;
  void clear_m_roomid() ;
  ::int32_t m_roomid() const;
  void set_m_roomid(::int32_t value);

  private:
  ::int32_t _internal_m_roomid() const;
  void _internal_set_m_roomid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t> m_roleid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _m_roleid_cached_byte_size_;
    int m_type_;
    ::int32_t m_roomid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_MATCHING_SYNC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MATCHING_SYNC) */ {
 public:
  inline PROBUFF_NET_MATCHING_SYNC() : PROBUFF_NET_MATCHING_SYNC(nullptr) {}
  ~PROBUFF_NET_MATCHING_SYNC() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_SYNC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_MATCHING_SYNC(const PROBUFF_NET_MATCHING_SYNC& from);
  PROBUFF_NET_MATCHING_SYNC(PROBUFF_NET_MATCHING_SYNC&& from) noexcept
    : PROBUFF_NET_MATCHING_SYNC() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MATCHING_SYNC& operator=(const PROBUFF_NET_MATCHING_SYNC& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MATCHING_SYNC& operator=(PROBUFF_NET_MATCHING_SYNC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_MATCHING_SYNC& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_MATCHING_SYNC* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MATCHING_SYNC*>(
               &_PROBUFF_NET_MATCHING_SYNC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(PROBUFF_NET_MATCHING_SYNC& a, PROBUFF_NET_MATCHING_SYNC& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MATCHING_SYNC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MATCHING_SYNC* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_MATCHING_SYNC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_MATCHING_SYNC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_MATCHING_SYNC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_MATCHING_SYNC& from) {
    PROBUFF_NET_MATCHING_SYNC::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MATCHING_SYNC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_MATCHING_SYNC";
  }
  protected:
  explicit PROBUFF_NET_MATCHING_SYNC(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMMemberFieldNumber = 3,
    kMTypeFieldNumber = 1,
    kMRoomidFieldNumber = 2,
  };
  // repeated .pbnet.MATCHING_MEMBER m_member = 3;
  int m_member_size() const;
  private:
  int _internal_m_member_size() const;

  public:
  void clear_m_member() ;
  ::pbnet::MATCHING_MEMBER* mutable_m_member(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::MATCHING_MEMBER >*
      mutable_m_member();
  private:
  const ::pbnet::MATCHING_MEMBER& _internal_m_member(int index) const;
  ::pbnet::MATCHING_MEMBER* _internal_add_m_member();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::pbnet::MATCHING_MEMBER>& _internal_m_member() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::pbnet::MATCHING_MEMBER>* _internal_mutable_m_member();
  public:
  const ::pbnet::MATCHING_MEMBER& m_member(int index) const;
  ::pbnet::MATCHING_MEMBER* add_m_member();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::MATCHING_MEMBER >&
      m_member() const;
  // optional .pbnet.eplays m_type = 1;
  bool has_m_type() const;
  void clear_m_type() ;
  ::pbnet::eplays m_type() const;
  void set_m_type(::pbnet::eplays value);

  private:
  ::pbnet::eplays _internal_m_type() const;
  void _internal_set_m_type(::pbnet::eplays value);

  public:
  // optional int32 m_roomid = 2;
  bool has_m_roomid() const;
  void clear_m_roomid() ;
  ::int32_t m_roomid() const;
  void set_m_roomid(::int32_t value);

  private:
  ::int32_t _internal_m_roomid() const;
  void _internal_set_m_roomid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MATCHING_SYNC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::MATCHING_MEMBER > m_member_;
    int m_type_;
    ::int32_t m_roomid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_MATCHING_SUCCESS_RESPONSE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE) */ {
 public:
  inline PROBUFF_NET_MATCHING_SUCCESS_RESPONSE() : PROBUFF_NET_MATCHING_SUCCESS_RESPONSE(nullptr) {}
  ~PROBUFF_NET_MATCHING_SUCCESS_RESPONSE() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_SUCCESS_RESPONSE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_MATCHING_SUCCESS_RESPONSE(const PROBUFF_NET_MATCHING_SUCCESS_RESPONSE& from);
  PROBUFF_NET_MATCHING_SUCCESS_RESPONSE(PROBUFF_NET_MATCHING_SUCCESS_RESPONSE&& from) noexcept
    : PROBUFF_NET_MATCHING_SUCCESS_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MATCHING_SUCCESS_RESPONSE& operator=(const PROBUFF_NET_MATCHING_SUCCESS_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MATCHING_SUCCESS_RESPONSE& operator=(PROBUFF_NET_MATCHING_SUCCESS_RESPONSE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_MATCHING_SUCCESS_RESPONSE& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_MATCHING_SUCCESS_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MATCHING_SUCCESS_RESPONSE*>(
               &_PROBUFF_NET_MATCHING_SUCCESS_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(PROBUFF_NET_MATCHING_SUCCESS_RESPONSE& a, PROBUFF_NET_MATCHING_SUCCESS_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MATCHING_SUCCESS_RESPONSE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MATCHING_SUCCESS_RESPONSE* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_MATCHING_SUCCESS_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_MATCHING_SUCCESS_RESPONSE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_MATCHING_SUCCESS_RESPONSE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_MATCHING_SUCCESS_RESPONSE& from) {
    PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MATCHING_SUCCESS_RESPONSE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_MATCHING_SUCCESS_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMTypeFieldNumber = 1,
    kMRoomidFieldNumber = 2,
    kMPlaysactoridFieldNumber = 3,
  };
  // optional .pbnet.eplays m_type = 1;
  bool has_m_type() const;
  void clear_m_type() ;
  ::pbnet::eplays m_type() const;
  void set_m_type(::pbnet::eplays value);

  private:
  ::pbnet::eplays _internal_m_type() const;
  void _internal_set_m_type(::pbnet::eplays value);

  public:
  // optional int32 m_roomid = 2;
  bool has_m_roomid() const;
  void clear_m_roomid() ;
  ::int32_t m_roomid() const;
  void set_m_roomid(::int32_t value);

  private:
  ::int32_t _internal_m_roomid() const;
  void _internal_set_m_roomid(::int32_t value);

  public:
  // optional int64 m_playsactorid = 3;
  bool has_m_playsactorid() const;
  void clear_m_playsactorid() ;
  ::int64_t m_playsactorid() const;
  void set_m_playsactorid(::int64_t value);

  private:
  ::int64_t _internal_m_playsactorid() const;
  void _internal_set_m_playsactorid(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int m_type_;
    ::int32_t m_roomid_;
    ::int64_t m_playsactorid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_MATCHING_SUCCESS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MATCHING_SUCCESS) */ {
 public:
  inline PROBUFF_NET_MATCHING_SUCCESS() : PROBUFF_NET_MATCHING_SUCCESS(nullptr) {}
  ~PROBUFF_NET_MATCHING_SUCCESS() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_SUCCESS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_MATCHING_SUCCESS(const PROBUFF_NET_MATCHING_SUCCESS& from);
  PROBUFF_NET_MATCHING_SUCCESS(PROBUFF_NET_MATCHING_SUCCESS&& from) noexcept
    : PROBUFF_NET_MATCHING_SUCCESS() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MATCHING_SUCCESS& operator=(const PROBUFF_NET_MATCHING_SUCCESS& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MATCHING_SUCCESS& operator=(PROBUFF_NET_MATCHING_SUCCESS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_MATCHING_SUCCESS& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_MATCHING_SUCCESS* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MATCHING_SUCCESS*>(
               &_PROBUFF_NET_MATCHING_SUCCESS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(PROBUFF_NET_MATCHING_SUCCESS& a, PROBUFF_NET_MATCHING_SUCCESS& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MATCHING_SUCCESS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MATCHING_SUCCESS* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_MATCHING_SUCCESS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_MATCHING_SUCCESS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_MATCHING_SUCCESS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_MATCHING_SUCCESS& from) {
    PROBUFF_NET_MATCHING_SUCCESS::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MATCHING_SUCCESS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_MATCHING_SUCCESS";
  }
  protected:
  explicit PROBUFF_NET_MATCHING_SUCCESS(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMMemberFieldNumber = 3,
    kMTypeFieldNumber = 1,
    kMRoomidFieldNumber = 2,
    kMDataidFieldNumber = 4,
  };
  // repeated .pbnet.MATCHING_MEMBER m_member = 3;
  int m_member_size() const;
  private:
  int _internal_m_member_size() const;

  public:
  void clear_m_member() ;
  ::pbnet::MATCHING_MEMBER* mutable_m_member(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::MATCHING_MEMBER >*
      mutable_m_member();
  private:
  const ::pbnet::MATCHING_MEMBER& _internal_m_member(int index) const;
  ::pbnet::MATCHING_MEMBER* _internal_add_m_member();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::pbnet::MATCHING_MEMBER>& _internal_m_member() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::pbnet::MATCHING_MEMBER>* _internal_mutable_m_member();
  public:
  const ::pbnet::MATCHING_MEMBER& m_member(int index) const;
  ::pbnet::MATCHING_MEMBER* add_m_member();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::MATCHING_MEMBER >&
      m_member() const;
  // optional .pbnet.eplays m_type = 1;
  bool has_m_type() const;
  void clear_m_type() ;
  ::pbnet::eplays m_type() const;
  void set_m_type(::pbnet::eplays value);

  private:
  ::pbnet::eplays _internal_m_type() const;
  void _internal_set_m_type(::pbnet::eplays value);

  public:
  // optional int32 m_roomid = 2;
  bool has_m_roomid() const;
  void clear_m_roomid() ;
  ::int32_t m_roomid() const;
  void set_m_roomid(::int32_t value);

  private:
  ::int32_t _internal_m_roomid() const;
  void _internal_set_m_roomid(::int32_t value);

  public:
  // optional int32 m_dataid = 4;
  bool has_m_dataid() const;
  void clear_m_dataid() ;
  ::int32_t m_dataid() const;
  void set_m_dataid(::int32_t value);

  private:
  ::int32_t _internal_m_dataid() const;
  void _internal_set_m_dataid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MATCHING_SUCCESS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::MATCHING_MEMBER > m_member_;
    int m_type_;
    ::int32_t m_roomid_;
    ::int32_t m_dataid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};// -------------------------------------------------------------------

class PROBUFF_NET_ENTER_PLAYS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_ENTER_PLAYS) */ {
 public:
  inline PROBUFF_NET_ENTER_PLAYS() : PROBUFF_NET_ENTER_PLAYS(nullptr) {}
  ~PROBUFF_NET_ENTER_PLAYS() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_ENTER_PLAYS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_ENTER_PLAYS(const PROBUFF_NET_ENTER_PLAYS& from);
  PROBUFF_NET_ENTER_PLAYS(PROBUFF_NET_ENTER_PLAYS&& from) noexcept
    : PROBUFF_NET_ENTER_PLAYS() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_ENTER_PLAYS& operator=(const PROBUFF_NET_ENTER_PLAYS& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_ENTER_PLAYS& operator=(PROBUFF_NET_ENTER_PLAYS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_ENTER_PLAYS& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_ENTER_PLAYS* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_ENTER_PLAYS*>(
               &_PROBUFF_NET_ENTER_PLAYS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(PROBUFF_NET_ENTER_PLAYS& a, PROBUFF_NET_ENTER_PLAYS& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_ENTER_PLAYS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_ENTER_PLAYS* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_ENTER_PLAYS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_ENTER_PLAYS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_ENTER_PLAYS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_ENTER_PLAYS& from) {
    PROBUFF_NET_ENTER_PLAYS::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_ENTER_PLAYS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pbnet.PROBUFF_NET_ENTER_PLAYS";
  }
  protected:
  explicit PROBUFF_NET_ENTER_PLAYS(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMTypeFieldNumber = 1,
    kMRoomidFieldNumber = 2,
  };
  // optional .pbnet.eplays m_type = 1;
  bool has_m_type() const;
  void clear_m_type() ;
  ::pbnet::eplays m_type() const;
  void set_m_type(::pbnet::eplays value);

  private:
  ::pbnet::eplays _internal_m_type() const;
  void _internal_set_m_type(::pbnet::eplays value);

  public:
  // optional int32 m_roomid = 2;
  bool has_m_roomid() const;
  void clear_m_roomid() ;
  ::int32_t m_roomid() const;
  void set_m_roomid(::int32_t value);

  private:
  ::int32_t _internal_m_roomid() const;
  void _internal_set_m_roomid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_ENTER_PLAYS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int m_type_;
    ::int32_t m_roomid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_net_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PROBUFF_NET_HEARTBEAT

// -------------------------------------------------------------------

// PROBUFF_NET_ERROR

// optional int32 m_errnum = 1;
inline bool PROBUFF_NET_ERROR::has_m_errnum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PROBUFF_NET_ERROR::clear_m_errnum() {
  _impl_.m_errnum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t PROBUFF_NET_ERROR::m_errnum() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ERROR.m_errnum)
  return _internal_m_errnum();
}
inline void PROBUFF_NET_ERROR::set_m_errnum(::int32_t value) {
  _internal_set_m_errnum(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ERROR.m_errnum)
}
inline ::int32_t PROBUFF_NET_ERROR::_internal_m_errnum() const {
  return _impl_.m_errnum_;
}
inline void PROBUFF_NET_ERROR::_internal_set_m_errnum(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_errnum_ = value;
}

// -------------------------------------------------------------------

// PROBUFF_NET_ERROR_RESPONSE

// optional int32 m_errnum = 1;
inline bool PROBUFF_NET_ERROR_RESPONSE::has_m_errnum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PROBUFF_NET_ERROR_RESPONSE::clear_m_errnum() {
  _impl_.m_errnum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t PROBUFF_NET_ERROR_RESPONSE::m_errnum() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ERROR_RESPONSE.m_errnum)
  return _internal_m_errnum();
}
inline void PROBUFF_NET_ERROR_RESPONSE::set_m_errnum(::int32_t value) {
  _internal_set_m_errnum(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ERROR_RESPONSE.m_errnum)
}
inline ::int32_t PROBUFF_NET_ERROR_RESPONSE::_internal_m_errnum() const {
  return _impl_.m_errnum_;
}
inline void PROBUFF_NET_ERROR_RESPONSE::_internal_set_m_errnum(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.m_errnum_ = value;
}

// optional string m_errmessage = 2;
inline bool PROBUFF_NET_ERROR_RESPONSE::has_m_errmessage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PROBUFF_NET_ERROR_RESPONSE::clear_m_errmessage() {
  _impl_.m_errmessage_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PROBUFF_NET_ERROR_RESPONSE::m_errmessage() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ERROR_RESPONSE.m_errmessage)
  return _internal_m_errmessage();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PROBUFF_NET_ERROR_RESPONSE::set_m_errmessage(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_errmessage_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ERROR_RESPONSE.m_errmessage)
}
inline std::string* PROBUFF_NET_ERROR_RESPONSE::mutable_m_errmessage() {
  std::string* _s = _internal_mutable_m_errmessage();
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_ERROR_RESPONSE.m_errmessage)
  return _s;
}
inline const std::string& PROBUFF_NET_ERROR_RESPONSE::_internal_m_errmessage() const {
  return _impl_.m_errmessage_.Get();
}
inline void PROBUFF_NET_ERROR_RESPONSE::_internal_set_m_errmessage(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.m_errmessage_.Set(value, GetArenaForAllocation());
}
inline std::string* PROBUFF_NET_ERROR_RESPONSE::_internal_mutable_m_errmessage() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.m_errmessage_.Mutable( GetArenaForAllocation());
}
inline std::string* PROBUFF_NET_ERROR_RESPONSE::release_m_errmessage() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_ERROR_RESPONSE.m_errmessage)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.m_errmessage_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.m_errmessage_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PROBUFF_NET_ERROR_RESPONSE::set_allocated_m_errmessage(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.m_errmessage_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.m_errmessage_.IsDefault()) {
          _impl_.m_errmessage_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_ERROR_RESPONSE.m_errmessage)
}

// -------------------------------------------------------------------

// PROBUFF_NET_GET_TIME

// -------------------------------------------------------------------

// PROBUFF_NET_GET_TIME_RESPONSE

// optional int32 m_utc = 1;
inline bool PROBUFF_NET_GET_TIME_RESPONSE::has_m_utc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PROBUFF_NET_GET_TIME_RESPONSE::clear_m_utc() {
  _impl_.m_utc_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t PROBUFF_NET_GET_TIME_RESPONSE::m_utc() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_GET_TIME_RESPONSE.m_utc)
  return _internal_m_utc();
}
inline void PROBUFF_NET_GET_TIME_RESPONSE::set_m_utc(::int32_t value) {
  _internal_set_m_utc(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_GET_TIME_RESPONSE.m_utc)
}
inline ::int32_t PROBUFF_NET_GET_TIME_RESPONSE::_internal_m_utc() const {
  return _impl_.m_utc_;
}
inline void PROBUFF_NET_GET_TIME_RESPONSE::_internal_set_m_utc(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_utc_ = value;
}

// -------------------------------------------------------------------

// PROBUFF_NET_GET_NOTICE

// -------------------------------------------------------------------

// PROBUFF_NET_GET_NOTICE_RESPONSE

// repeated .pbdb.db_notice m_notices = 1;
inline int PROBUFF_NET_GET_NOTICE_RESPONSE::_internal_m_notices_size() const {
  return _impl_.m_notices_.size();
}
inline int PROBUFF_NET_GET_NOTICE_RESPONSE::m_notices_size() const {
  return _internal_m_notices_size();
}
inline ::pbdb::db_notice* PROBUFF_NET_GET_NOTICE_RESPONSE::mutable_m_notices(int index) {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_GET_NOTICE_RESPONSE.m_notices)
  return _internal_mutable_m_notices()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_notice >*
PROBUFF_NET_GET_NOTICE_RESPONSE::mutable_m_notices() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_GET_NOTICE_RESPONSE.m_notices)
  return _internal_mutable_m_notices();
}
inline const ::pbdb::db_notice& PROBUFF_NET_GET_NOTICE_RESPONSE::_internal_m_notices(int index) const {
  return _internal_m_notices().Get(index);
}
inline const ::pbdb::db_notice& PROBUFF_NET_GET_NOTICE_RESPONSE::m_notices(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_GET_NOTICE_RESPONSE.m_notices)
  return _internal_m_notices(index);
}
inline ::pbdb::db_notice* PROBUFF_NET_GET_NOTICE_RESPONSE::_internal_add_m_notices() {
  return _internal_mutable_m_notices()->Add();
}
inline ::pbdb::db_notice* PROBUFF_NET_GET_NOTICE_RESPONSE::add_m_notices() {
  ::pbdb::db_notice* _add = _internal_add_m_notices();
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_GET_NOTICE_RESPONSE.m_notices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_notice >&
PROBUFF_NET_GET_NOTICE_RESPONSE::m_notices() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_GET_NOTICE_RESPONSE.m_notices)
  return _internal_m_notices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::pbdb::db_notice>&
PROBUFF_NET_GET_NOTICE_RESPONSE::_internal_m_notices() const {
  return _impl_.m_notices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::pbdb::db_notice>*
PROBUFF_NET_GET_NOTICE_RESPONSE::_internal_mutable_m_notices() {
  return &_impl_.m_notices_;
}

// -------------------------------------------------------------------

// PROBUFF_NET_ACOUNT_LOGIN

// optional int32 m_area = 1;
inline bool PROBUFF_NET_ACOUNT_LOGIN::has_m_area() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void PROBUFF_NET_ACOUNT_LOGIN::clear_m_area() {
  _impl_.m_area_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t PROBUFF_NET_ACOUNT_LOGIN::m_area() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_area)
  return _internal_m_area();
}
inline void PROBUFF_NET_ACOUNT_LOGIN::set_m_area(::int32_t value) {
  _internal_set_m_area(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_area)
}
inline ::int32_t PROBUFF_NET_ACOUNT_LOGIN::_internal_m_area() const {
  return _impl_.m_area_;
}
inline void PROBUFF_NET_ACOUNT_LOGIN::_internal_set_m_area(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.m_area_ = value;
}

// optional string m_account = 2;
inline bool PROBUFF_NET_ACOUNT_LOGIN::has_m_account() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PROBUFF_NET_ACOUNT_LOGIN::clear_m_account() {
  _impl_.m_account_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PROBUFF_NET_ACOUNT_LOGIN::m_account() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_account)
  return _internal_m_account();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PROBUFF_NET_ACOUNT_LOGIN::set_m_account(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_account_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_account)
}
inline std::string* PROBUFF_NET_ACOUNT_LOGIN::mutable_m_account() {
  std::string* _s = _internal_mutable_m_account();
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_account)
  return _s;
}
inline const std::string& PROBUFF_NET_ACOUNT_LOGIN::_internal_m_account() const {
  return _impl_.m_account_.Get();
}
inline void PROBUFF_NET_ACOUNT_LOGIN::_internal_set_m_account(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.m_account_.Set(value, GetArenaForAllocation());
}
inline std::string* PROBUFF_NET_ACOUNT_LOGIN::_internal_mutable_m_account() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.m_account_.Mutable( GetArenaForAllocation());
}
inline std::string* PROBUFF_NET_ACOUNT_LOGIN::release_m_account() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_account)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.m_account_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.m_account_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PROBUFF_NET_ACOUNT_LOGIN::set_allocated_m_account(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.m_account_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.m_account_.IsDefault()) {
          _impl_.m_account_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_account)
}

// optional string m_password = 3;
inline bool PROBUFF_NET_ACOUNT_LOGIN::has_m_password() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PROBUFF_NET_ACOUNT_LOGIN::clear_m_password() {
  _impl_.m_password_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PROBUFF_NET_ACOUNT_LOGIN::m_password() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_password)
  return _internal_m_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PROBUFF_NET_ACOUNT_LOGIN::set_m_password(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.m_password_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_password)
}
inline std::string* PROBUFF_NET_ACOUNT_LOGIN::mutable_m_password() {
  std::string* _s = _internal_mutable_m_password();
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_password)
  return _s;
}
inline const std::string& PROBUFF_NET_ACOUNT_LOGIN::_internal_m_password() const {
  return _impl_.m_password_.Get();
}
inline void PROBUFF_NET_ACOUNT_LOGIN::_internal_set_m_password(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.m_password_.Set(value, GetArenaForAllocation());
}
inline std::string* PROBUFF_NET_ACOUNT_LOGIN::_internal_mutable_m_password() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.m_password_.Mutable( GetArenaForAllocation());
}
inline std::string* PROBUFF_NET_ACOUNT_LOGIN::release_m_password() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_password)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.m_password_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.m_password_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PROBUFF_NET_ACOUNT_LOGIN::set_allocated_m_password(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.m_password_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.m_password_.IsDefault()) {
          _impl_.m_password_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_password)
}

// -------------------------------------------------------------------

// PROBUFF_NET_ACOUNT_LOGIN_RESPONSE

// optional int32 m_area = 1;
inline bool PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::has_m_area() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::clear_m_area() {
  _impl_.m_area_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::m_area() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_area)
  return _internal_m_area();
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::set_m_area(::int32_t value) {
  _internal_set_m_area(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_area)
}
inline ::int32_t PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_m_area() const {
  return _impl_.m_area_;
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_set_m_area(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.m_area_ = value;
}

// optional int64 m_roleid = 2;
inline bool PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::has_m_roleid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::clear_m_roleid() {
  _impl_.m_roleid_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::m_roleid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_roleid)
  return _internal_m_roleid();
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::set_m_roleid(::int64_t value) {
  _internal_set_m_roleid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_roleid)
}
inline ::int64_t PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_m_roleid() const {
  return _impl_.m_roleid_;
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_set_m_roleid(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.m_roleid_ = value;
}

// optional string m_session = 3;
inline bool PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::has_m_session() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::clear_m_session() {
  _impl_.m_session_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::m_session() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_session)
  return _internal_m_session();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::set_m_session(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_session_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_session)
}
inline std::string* PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::mutable_m_session() {
  std::string* _s = _internal_mutable_m_session();
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_session)
  return _s;
}
inline const std::string& PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_m_session() const {
  return _impl_.m_session_.Get();
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_set_m_session(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.m_session_.Set(value, GetArenaForAllocation());
}
inline std::string* PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_mutable_m_session() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.m_session_.Mutable( GetArenaForAllocation());
}
inline std::string* PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::release_m_session() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_session)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.m_session_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.m_session_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::set_allocated_m_session(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.m_session_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.m_session_.IsDefault()) {
          _impl_.m_session_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_session)
}

// optional string m_account = 4;
inline bool PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::has_m_account() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::clear_m_account() {
  _impl_.m_account_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::m_account() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_account)
  return _internal_m_account();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::set_m_account(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.m_account_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_account)
}
inline std::string* PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::mutable_m_account() {
  std::string* _s = _internal_mutable_m_account();
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_account)
  return _s;
}
inline const std::string& PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_m_account() const {
  return _impl_.m_account_.Get();
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_set_m_account(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.m_account_.Set(value, GetArenaForAllocation());
}
inline std::string* PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_mutable_m_account() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.m_account_.Mutable( GetArenaForAllocation());
}
inline std::string* PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::release_m_account() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_account)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.m_account_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.m_account_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::set_allocated_m_account(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.m_account_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.m_account_.IsDefault()) {
          _impl_.m_account_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_account)
}

// optional int32 m_gatewayid = 5;
inline bool PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::has_m_gatewayid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::clear_m_gatewayid() {
  _impl_.m_gatewayid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::m_gatewayid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_gatewayid)
  return _internal_m_gatewayid();
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::set_m_gatewayid(::int32_t value) {
  _internal_set_m_gatewayid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_gatewayid)
}
inline ::int32_t PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_m_gatewayid() const {
  return _impl_.m_gatewayid_;
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_set_m_gatewayid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.m_gatewayid_ = value;
}

// -------------------------------------------------------------------

// PROBUFF_NET_ROLE_LOGIN

// optional int64 m_roleid = 1;
inline bool PROBUFF_NET_ROLE_LOGIN::has_m_roleid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PROBUFF_NET_ROLE_LOGIN::clear_m_roleid() {
  _impl_.m_roleid_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t PROBUFF_NET_ROLE_LOGIN::m_roleid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ROLE_LOGIN.m_roleid)
  return _internal_m_roleid();
}
inline void PROBUFF_NET_ROLE_LOGIN::set_m_roleid(::int64_t value) {
  _internal_set_m_roleid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ROLE_LOGIN.m_roleid)
}
inline ::int64_t PROBUFF_NET_ROLE_LOGIN::_internal_m_roleid() const {
  return _impl_.m_roleid_;
}
inline void PROBUFF_NET_ROLE_LOGIN::_internal_set_m_roleid(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.m_roleid_ = value;
}

// optional string m_session = 2;
inline bool PROBUFF_NET_ROLE_LOGIN::has_m_session() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PROBUFF_NET_ROLE_LOGIN::clear_m_session() {
  _impl_.m_session_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PROBUFF_NET_ROLE_LOGIN::m_session() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ROLE_LOGIN.m_session)
  return _internal_m_session();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PROBUFF_NET_ROLE_LOGIN::set_m_session(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_session_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ROLE_LOGIN.m_session)
}
inline std::string* PROBUFF_NET_ROLE_LOGIN::mutable_m_session() {
  std::string* _s = _internal_mutable_m_session();
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_ROLE_LOGIN.m_session)
  return _s;
}
inline const std::string& PROBUFF_NET_ROLE_LOGIN::_internal_m_session() const {
  return _impl_.m_session_.Get();
}
inline void PROBUFF_NET_ROLE_LOGIN::_internal_set_m_session(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.m_session_.Set(value, GetArenaForAllocation());
}
inline std::string* PROBUFF_NET_ROLE_LOGIN::_internal_mutable_m_session() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.m_session_.Mutable( GetArenaForAllocation());
}
inline std::string* PROBUFF_NET_ROLE_LOGIN::release_m_session() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_ROLE_LOGIN.m_session)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.m_session_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.m_session_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PROBUFF_NET_ROLE_LOGIN::set_allocated_m_session(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.m_session_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.m_session_.IsDefault()) {
          _impl_.m_session_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_ROLE_LOGIN.m_session)
}

// optional bool m_iscreate = 3;
inline bool PROBUFF_NET_ROLE_LOGIN::has_m_iscreate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void PROBUFF_NET_ROLE_LOGIN::clear_m_iscreate() {
  _impl_.m_iscreate_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool PROBUFF_NET_ROLE_LOGIN::m_iscreate() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ROLE_LOGIN.m_iscreate)
  return _internal_m_iscreate();
}
inline void PROBUFF_NET_ROLE_LOGIN::set_m_iscreate(bool value) {
  _internal_set_m_iscreate(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ROLE_LOGIN.m_iscreate)
}
inline bool PROBUFF_NET_ROLE_LOGIN::_internal_m_iscreate() const {
  return _impl_.m_iscreate_;
}
inline void PROBUFF_NET_ROLE_LOGIN::_internal_set_m_iscreate(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.m_iscreate_ = value;
}

// optional int32 m_area = 4;
inline bool PROBUFF_NET_ROLE_LOGIN::has_m_area() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void PROBUFF_NET_ROLE_LOGIN::clear_m_area() {
  _impl_.m_area_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t PROBUFF_NET_ROLE_LOGIN::m_area() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ROLE_LOGIN.m_area)
  return _internal_m_area();
}
inline void PROBUFF_NET_ROLE_LOGIN::set_m_area(::int32_t value) {
  _internal_set_m_area(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ROLE_LOGIN.m_area)
}
inline ::int32_t PROBUFF_NET_ROLE_LOGIN::_internal_m_area() const {
  return _impl_.m_area_;
}
inline void PROBUFF_NET_ROLE_LOGIN::_internal_set_m_area(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.m_area_ = value;
}

// optional int32 m_gatewayid = 5;
inline bool PROBUFF_NET_ROLE_LOGIN::has_m_gatewayid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void PROBUFF_NET_ROLE_LOGIN::clear_m_gatewayid() {
  _impl_.m_gatewayid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t PROBUFF_NET_ROLE_LOGIN::m_gatewayid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ROLE_LOGIN.m_gatewayid)
  return _internal_m_gatewayid();
}
inline void PROBUFF_NET_ROLE_LOGIN::set_m_gatewayid(::int32_t value) {
  _internal_set_m_gatewayid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ROLE_LOGIN.m_gatewayid)
}
inline ::int32_t PROBUFF_NET_ROLE_LOGIN::_internal_m_gatewayid() const {
  return _impl_.m_gatewayid_;
}
inline void PROBUFF_NET_ROLE_LOGIN::_internal_set_m_gatewayid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.m_gatewayid_ = value;
}

// -------------------------------------------------------------------

// PROBUFF_NET_ROLE_SYNC

// -------------------------------------------------------------------

// PROBUFF_NET_ROLE_SYNC_RESPONSE

// optional .pbdb.db_role m_role = 1;
inline bool PROBUFF_NET_ROLE_SYNC_RESPONSE::has_m_role() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.m_role_ != nullptr);
  return value;
}
inline const ::pbdb::db_role& PROBUFF_NET_ROLE_SYNC_RESPONSE::_internal_m_role() const {
  const ::pbdb::db_role* p = _impl_.m_role_;
  return p != nullptr ? *p : reinterpret_cast<const ::pbdb::db_role&>(
      ::pbdb::_db_role_default_instance_);
}
inline const ::pbdb::db_role& PROBUFF_NET_ROLE_SYNC_RESPONSE::m_role() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.m_role)
  return _internal_m_role();
}
inline void PROBUFF_NET_ROLE_SYNC_RESPONSE::unsafe_arena_set_allocated_m_role(
    ::pbdb::db_role* m_role) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.m_role_);
  }
  _impl_.m_role_ = m_role;
  if (m_role) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.m_role)
}
inline ::pbdb::db_role* PROBUFF_NET_ROLE_SYNC_RESPONSE::release_m_role() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::pbdb::db_role* temp = _impl_.m_role_;
  _impl_.m_role_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pbdb::db_role* PROBUFF_NET_ROLE_SYNC_RESPONSE::unsafe_arena_release_m_role() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.m_role)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::pbdb::db_role* temp = _impl_.m_role_;
  _impl_.m_role_ = nullptr;
  return temp;
}
inline ::pbdb::db_role* PROBUFF_NET_ROLE_SYNC_RESPONSE::_internal_mutable_m_role() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.m_role_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbdb::db_role>(GetArenaForAllocation());
    _impl_.m_role_ = p;
  }
  return _impl_.m_role_;
}
inline ::pbdb::db_role* PROBUFF_NET_ROLE_SYNC_RESPONSE::mutable_m_role() {
  ::pbdb::db_role* _msg = _internal_mutable_m_role();
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.m_role)
  return _msg;
}
inline void PROBUFF_NET_ROLE_SYNC_RESPONSE::set_allocated_m_role(::pbdb::db_role* m_role) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.m_role_);
  }
  if (m_role) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(m_role));
    if (message_arena != submessage_arena) {
      m_role = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_role, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.m_role_ = m_role;
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.m_role)
}

// optional .pbdb.db_bag m_bag = 2;
inline bool PROBUFF_NET_ROLE_SYNC_RESPONSE::has_m_bag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.m_bag_ != nullptr);
  return value;
}
inline const ::pbdb::db_bag& PROBUFF_NET_ROLE_SYNC_RESPONSE::_internal_m_bag() const {
  const ::pbdb::db_bag* p = _impl_.m_bag_;
  return p != nullptr ? *p : reinterpret_cast<const ::pbdb::db_bag&>(
      ::pbdb::_db_bag_default_instance_);
}
inline const ::pbdb::db_bag& PROBUFF_NET_ROLE_SYNC_RESPONSE::m_bag() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.m_bag)
  return _internal_m_bag();
}
inline void PROBUFF_NET_ROLE_SYNC_RESPONSE::unsafe_arena_set_allocated_m_bag(
    ::pbdb::db_bag* m_bag) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.m_bag_);
  }
  _impl_.m_bag_ = m_bag;
  if (m_bag) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.m_bag)
}
inline ::pbdb::db_bag* PROBUFF_NET_ROLE_SYNC_RESPONSE::release_m_bag() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::pbdb::db_bag* temp = _impl_.m_bag_;
  _impl_.m_bag_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pbdb::db_bag* PROBUFF_NET_ROLE_SYNC_RESPONSE::unsafe_arena_release_m_bag() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.m_bag)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::pbdb::db_bag* temp = _impl_.m_bag_;
  _impl_.m_bag_ = nullptr;
  return temp;
}
inline ::pbdb::db_bag* PROBUFF_NET_ROLE_SYNC_RESPONSE::_internal_mutable_m_bag() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.m_bag_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbdb::db_bag>(GetArenaForAllocation());
    _impl_.m_bag_ = p;
  }
  return _impl_.m_bag_;
}
inline ::pbdb::db_bag* PROBUFF_NET_ROLE_SYNC_RESPONSE::mutable_m_bag() {
  ::pbdb::db_bag* _msg = _internal_mutable_m_bag();
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.m_bag)
  return _msg;
}
inline void PROBUFF_NET_ROLE_SYNC_RESPONSE::set_allocated_m_bag(::pbdb::db_bag* m_bag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.m_bag_);
  }
  if (m_bag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(m_bag));
    if (message_arena != submessage_arena) {
      m_bag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_bag, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.m_bag_ = m_bag;
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.m_bag)
}

// optional .pbdb.db_task m_task = 3;
inline bool PROBUFF_NET_ROLE_SYNC_RESPONSE::has_m_task() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.m_task_ != nullptr);
  return value;
}
inline const ::pbdb::db_task& PROBUFF_NET_ROLE_SYNC_RESPONSE::_internal_m_task() const {
  const ::pbdb::db_task* p = _impl_.m_task_;
  return p != nullptr ? *p : reinterpret_cast<const ::pbdb::db_task&>(
      ::pbdb::_db_task_default_instance_);
}
inline const ::pbdb::db_task& PROBUFF_NET_ROLE_SYNC_RESPONSE::m_task() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.m_task)
  return _internal_m_task();
}
inline void PROBUFF_NET_ROLE_SYNC_RESPONSE::unsafe_arena_set_allocated_m_task(
    ::pbdb::db_task* m_task) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.m_task_);
  }
  _impl_.m_task_ = m_task;
  if (m_task) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.m_task)
}
inline ::pbdb::db_task* PROBUFF_NET_ROLE_SYNC_RESPONSE::release_m_task() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::pbdb::db_task* temp = _impl_.m_task_;
  _impl_.m_task_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pbdb::db_task* PROBUFF_NET_ROLE_SYNC_RESPONSE::unsafe_arena_release_m_task() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.m_task)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::pbdb::db_task* temp = _impl_.m_task_;
  _impl_.m_task_ = nullptr;
  return temp;
}
inline ::pbdb::db_task* PROBUFF_NET_ROLE_SYNC_RESPONSE::_internal_mutable_m_task() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.m_task_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbdb::db_task>(GetArenaForAllocation());
    _impl_.m_task_ = p;
  }
  return _impl_.m_task_;
}
inline ::pbdb::db_task* PROBUFF_NET_ROLE_SYNC_RESPONSE::mutable_m_task() {
  ::pbdb::db_task* _msg = _internal_mutable_m_task();
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.m_task)
  return _msg;
}
inline void PROBUFF_NET_ROLE_SYNC_RESPONSE::set_allocated_m_task(::pbdb::db_task* m_task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.m_task_);
  }
  if (m_task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(m_task));
    if (message_arena != submessage_arena) {
      m_task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_task, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.m_task_ = m_task;
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.m_task)
}

// -------------------------------------------------------------------

// PROBUFF_NET_BAG_SYNC

// -------------------------------------------------------------------

// PROBUFF_NET_BAG_SYNC_RESPONSE

// optional .pbdb.db_bag m_bag = 1;
inline bool PROBUFF_NET_BAG_SYNC_RESPONSE::has_m_bag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.m_bag_ != nullptr);
  return value;
}
inline const ::pbdb::db_bag& PROBUFF_NET_BAG_SYNC_RESPONSE::_internal_m_bag() const {
  const ::pbdb::db_bag* p = _impl_.m_bag_;
  return p != nullptr ? *p : reinterpret_cast<const ::pbdb::db_bag&>(
      ::pbdb::_db_bag_default_instance_);
}
inline const ::pbdb::db_bag& PROBUFF_NET_BAG_SYNC_RESPONSE::m_bag() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE.m_bag)
  return _internal_m_bag();
}
inline void PROBUFF_NET_BAG_SYNC_RESPONSE::unsafe_arena_set_allocated_m_bag(
    ::pbdb::db_bag* m_bag) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.m_bag_);
  }
  _impl_.m_bag_ = m_bag;
  if (m_bag) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE.m_bag)
}
inline ::pbdb::db_bag* PROBUFF_NET_BAG_SYNC_RESPONSE::release_m_bag() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::pbdb::db_bag* temp = _impl_.m_bag_;
  _impl_.m_bag_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pbdb::db_bag* PROBUFF_NET_BAG_SYNC_RESPONSE::unsafe_arena_release_m_bag() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE.m_bag)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::pbdb::db_bag* temp = _impl_.m_bag_;
  _impl_.m_bag_ = nullptr;
  return temp;
}
inline ::pbdb::db_bag* PROBUFF_NET_BAG_SYNC_RESPONSE::_internal_mutable_m_bag() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.m_bag_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbdb::db_bag>(GetArenaForAllocation());
    _impl_.m_bag_ = p;
  }
  return _impl_.m_bag_;
}
inline ::pbdb::db_bag* PROBUFF_NET_BAG_SYNC_RESPONSE::mutable_m_bag() {
  ::pbdb::db_bag* _msg = _internal_mutable_m_bag();
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE.m_bag)
  return _msg;
}
inline void PROBUFF_NET_BAG_SYNC_RESPONSE::set_allocated_m_bag(::pbdb::db_bag* m_bag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.m_bag_);
  }
  if (m_bag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(m_bag));
    if (message_arena != submessage_arena) {
      m_bag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_bag, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.m_bag_ = m_bag;
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE.m_bag)
}

// -------------------------------------------------------------------

// PROBUFF_NET_BAG_UPDATE

// -------------------------------------------------------------------

// PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem

// optional int32 m_id = 1;
inline bool PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::has_m_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::clear_m_id() {
  _impl_.m_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::m_id() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem.m_id)
  return _internal_m_id();
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::set_m_id(::int32_t value) {
  _internal_set_m_id(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem.m_id)
}
inline ::int32_t PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::_internal_m_id() const {
  return _impl_.m_id_;
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::_internal_set_m_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_id_ = value;
}

// optional int32 m_count = 2;
inline bool PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::has_m_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::clear_m_count() {
  _impl_.m_count_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::m_count() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem.m_count)
  return _internal_m_count();
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::set_m_count(::int32_t value) {
  _internal_set_m_count(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem.m_count)
}
inline ::int32_t PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::_internal_m_count() const {
  return _impl_.m_count_;
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::_internal_set_m_count(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.m_count_ = value;
}

// -------------------------------------------------------------------

// PROBUFF_NET_BAG_UPDATE_RESPONSE_additem

// optional int32 m_id = 1;
inline bool PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::has_m_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::clear_m_id() {
  _impl_.m_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::m_id() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem.m_id)
  return _internal_m_id();
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::set_m_id(::int32_t value) {
  _internal_set_m_id(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem.m_id)
}
inline ::int32_t PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::_internal_m_id() const {
  return _impl_.m_id_;
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::_internal_set_m_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_id_ = value;
}

// optional int32 m_count = 2;
inline bool PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::has_m_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::clear_m_count() {
  _impl_.m_count_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::m_count() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem.m_count)
  return _internal_m_count();
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::set_m_count(::int32_t value) {
  _internal_set_m_count(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem.m_count)
}
inline ::int32_t PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::_internal_m_count() const {
  return _impl_.m_count_;
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::_internal_set_m_count(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.m_count_ = value;
}

// -------------------------------------------------------------------

// PROBUFF_NET_BAG_UPDATE_RESPONSE

// repeated .pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem m_delitems = 1;
inline int PROBUFF_NET_BAG_UPDATE_RESPONSE::_internal_m_delitems_size() const {
  return _impl_.m_delitems_.size();
}
inline int PROBUFF_NET_BAG_UPDATE_RESPONSE::m_delitems_size() const {
  return _internal_m_delitems_size();
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE::clear_m_delitems() {
  _internal_mutable_m_delitems()->Clear();
}
inline ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem* PROBUFF_NET_BAG_UPDATE_RESPONSE::mutable_m_delitems(int index) {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.m_delitems)
  return _internal_mutable_m_delitems()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem >*
PROBUFF_NET_BAG_UPDATE_RESPONSE::mutable_m_delitems() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.m_delitems)
  return _internal_mutable_m_delitems();
}
inline const ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem& PROBUFF_NET_BAG_UPDATE_RESPONSE::_internal_m_delitems(int index) const {
  return _internal_m_delitems().Get(index);
}
inline const ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem& PROBUFF_NET_BAG_UPDATE_RESPONSE::m_delitems(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.m_delitems)
  return _internal_m_delitems(index);
}
inline ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem* PROBUFF_NET_BAG_UPDATE_RESPONSE::_internal_add_m_delitems() {
  return _internal_mutable_m_delitems()->Add();
}
inline ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem* PROBUFF_NET_BAG_UPDATE_RESPONSE::add_m_delitems() {
  ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem* _add = _internal_add_m_delitems();
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.m_delitems)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem >&
PROBUFF_NET_BAG_UPDATE_RESPONSE::m_delitems() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.m_delitems)
  return _internal_m_delitems();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem>&
PROBUFF_NET_BAG_UPDATE_RESPONSE::_internal_m_delitems() const {
  return _impl_.m_delitems_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem>*
PROBUFF_NET_BAG_UPDATE_RESPONSE::_internal_mutable_m_delitems() {
  return &_impl_.m_delitems_;
}

// repeated int32 m_delnostackitems = 2;
inline int PROBUFF_NET_BAG_UPDATE_RESPONSE::_internal_m_delnostackitems_size() const {
  return _impl_.m_delnostackitems_.size();
}
inline int PROBUFF_NET_BAG_UPDATE_RESPONSE::m_delnostackitems_size() const {
  return _internal_m_delnostackitems_size();
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE::clear_m_delnostackitems() {
  _internal_mutable_m_delnostackitems()->Clear();
}
inline ::int32_t PROBUFF_NET_BAG_UPDATE_RESPONSE::m_delnostackitems(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.m_delnostackitems)
  return _internal_m_delnostackitems(index);
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE::set_m_delnostackitems(int index, ::int32_t value) {
  _internal_mutable_m_delnostackitems()->Set(index, value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.m_delnostackitems)
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE::add_m_delnostackitems(::int32_t value) {
  _internal_add_m_delnostackitems(value);
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.m_delnostackitems)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& PROBUFF_NET_BAG_UPDATE_RESPONSE::m_delnostackitems() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.m_delnostackitems)
  return _internal_m_delnostackitems();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* PROBUFF_NET_BAG_UPDATE_RESPONSE::mutable_m_delnostackitems() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.m_delnostackitems)
  return _internal_mutable_m_delnostackitems();
}

inline ::int32_t PROBUFF_NET_BAG_UPDATE_RESPONSE::_internal_m_delnostackitems(int index) const {
  return _internal_m_delnostackitems().Get(index);
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE::_internal_add_m_delnostackitems(::int32_t value) {
  _internal_mutable_m_delnostackitems()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& PROBUFF_NET_BAG_UPDATE_RESPONSE::_internal_m_delnostackitems() const {
  return _impl_.m_delnostackitems_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* PROBUFF_NET_BAG_UPDATE_RESPONSE::_internal_mutable_m_delnostackitems() {
  return &_impl_.m_delnostackitems_;
}

// repeated .pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem m_additems = 3;
inline int PROBUFF_NET_BAG_UPDATE_RESPONSE::_internal_m_additems_size() const {
  return _impl_.m_additems_.size();
}
inline int PROBUFF_NET_BAG_UPDATE_RESPONSE::m_additems_size() const {
  return _internal_m_additems_size();
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE::clear_m_additems() {
  _internal_mutable_m_additems()->Clear();
}
inline ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem* PROBUFF_NET_BAG_UPDATE_RESPONSE::mutable_m_additems(int index) {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.m_additems)
  return _internal_mutable_m_additems()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem >*
PROBUFF_NET_BAG_UPDATE_RESPONSE::mutable_m_additems() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.m_additems)
  return _internal_mutable_m_additems();
}
inline const ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem& PROBUFF_NET_BAG_UPDATE_RESPONSE::_internal_m_additems(int index) const {
  return _internal_m_additems().Get(index);
}
inline const ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem& PROBUFF_NET_BAG_UPDATE_RESPONSE::m_additems(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.m_additems)
  return _internal_m_additems(index);
}
inline ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem* PROBUFF_NET_BAG_UPDATE_RESPONSE::_internal_add_m_additems() {
  return _internal_mutable_m_additems()->Add();
}
inline ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem* PROBUFF_NET_BAG_UPDATE_RESPONSE::add_m_additems() {
  ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem* _add = _internal_add_m_additems();
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.m_additems)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem >&
PROBUFF_NET_BAG_UPDATE_RESPONSE::m_additems() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.m_additems)
  return _internal_m_additems();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem>&
PROBUFF_NET_BAG_UPDATE_RESPONSE::_internal_m_additems() const {
  return _impl_.m_additems_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem>*
PROBUFF_NET_BAG_UPDATE_RESPONSE::_internal_mutable_m_additems() {
  return &_impl_.m_additems_;
}

// repeated int32 m_addnostackitems = 4;
inline int PROBUFF_NET_BAG_UPDATE_RESPONSE::_internal_m_addnostackitems_size() const {
  return _impl_.m_addnostackitems_.size();
}
inline int PROBUFF_NET_BAG_UPDATE_RESPONSE::m_addnostackitems_size() const {
  return _internal_m_addnostackitems_size();
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE::clear_m_addnostackitems() {
  _internal_mutable_m_addnostackitems()->Clear();
}
inline ::int32_t PROBUFF_NET_BAG_UPDATE_RESPONSE::m_addnostackitems(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.m_addnostackitems)
  return _internal_m_addnostackitems(index);
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE::set_m_addnostackitems(int index, ::int32_t value) {
  _internal_mutable_m_addnostackitems()->Set(index, value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.m_addnostackitems)
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE::add_m_addnostackitems(::int32_t value) {
  _internal_add_m_addnostackitems(value);
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.m_addnostackitems)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& PROBUFF_NET_BAG_UPDATE_RESPONSE::m_addnostackitems() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.m_addnostackitems)
  return _internal_m_addnostackitems();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* PROBUFF_NET_BAG_UPDATE_RESPONSE::mutable_m_addnostackitems() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.m_addnostackitems)
  return _internal_mutable_m_addnostackitems();
}

inline ::int32_t PROBUFF_NET_BAG_UPDATE_RESPONSE::_internal_m_addnostackitems(int index) const {
  return _internal_m_addnostackitems().Get(index);
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE::_internal_add_m_addnostackitems(::int32_t value) {
  _internal_mutable_m_addnostackitems()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& PROBUFF_NET_BAG_UPDATE_RESPONSE::_internal_m_addnostackitems() const {
  return _impl_.m_addnostackitems_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* PROBUFF_NET_BAG_UPDATE_RESPONSE::_internal_mutable_m_addnostackitems() {
  return &_impl_.m_addnostackitems_;
}

// -------------------------------------------------------------------

// PROBUFF_NET_CMD

// optional string m_cmd = 1;
inline bool PROBUFF_NET_CMD::has_m_cmd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PROBUFF_NET_CMD::clear_m_cmd() {
  _impl_.m_cmd_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PROBUFF_NET_CMD::m_cmd() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_CMD.m_cmd)
  return _internal_m_cmd();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PROBUFF_NET_CMD::set_m_cmd(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_cmd_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_CMD.m_cmd)
}
inline std::string* PROBUFF_NET_CMD::mutable_m_cmd() {
  std::string* _s = _internal_mutable_m_cmd();
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_CMD.m_cmd)
  return _s;
}
inline const std::string& PROBUFF_NET_CMD::_internal_m_cmd() const {
  return _impl_.m_cmd_.Get();
}
inline void PROBUFF_NET_CMD::_internal_set_m_cmd(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.m_cmd_.Set(value, GetArenaForAllocation());
}
inline std::string* PROBUFF_NET_CMD::_internal_mutable_m_cmd() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.m_cmd_.Mutable( GetArenaForAllocation());
}
inline std::string* PROBUFF_NET_CMD::release_m_cmd() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_CMD.m_cmd)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.m_cmd_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.m_cmd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PROBUFF_NET_CMD::set_allocated_m_cmd(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.m_cmd_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.m_cmd_.IsDefault()) {
          _impl_.m_cmd_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_CMD.m_cmd)
}

// -------------------------------------------------------------------

// PROBUFF_NET_CHAT

// optional int32 m_type = 1;
inline bool PROBUFF_NET_CHAT::has_m_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PROBUFF_NET_CHAT::clear_m_type() {
  _impl_.m_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t PROBUFF_NET_CHAT::m_type() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_CHAT.m_type)
  return _internal_m_type();
}
inline void PROBUFF_NET_CHAT::set_m_type(::int32_t value) {
  _internal_set_m_type(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_CHAT.m_type)
}
inline ::int32_t PROBUFF_NET_CHAT::_internal_m_type() const {
  return _impl_.m_type_;
}
inline void PROBUFF_NET_CHAT::_internal_set_m_type(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.m_type_ = value;
}

// optional int32 m_channelid = 2;
inline bool PROBUFF_NET_CHAT::has_m_channelid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void PROBUFF_NET_CHAT::clear_m_channelid() {
  _impl_.m_channelid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t PROBUFF_NET_CHAT::m_channelid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_CHAT.m_channelid)
  return _internal_m_channelid();
}
inline void PROBUFF_NET_CHAT::set_m_channelid(::int32_t value) {
  _internal_set_m_channelid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_CHAT.m_channelid)
}
inline ::int32_t PROBUFF_NET_CHAT::_internal_m_channelid() const {
  return _impl_.m_channelid_;
}
inline void PROBUFF_NET_CHAT::_internal_set_m_channelid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.m_channelid_ = value;
}

// optional string m_content = 3;
inline bool PROBUFF_NET_CHAT::has_m_content() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PROBUFF_NET_CHAT::clear_m_content() {
  _impl_.m_content_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PROBUFF_NET_CHAT::m_content() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_CHAT.m_content)
  return _internal_m_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PROBUFF_NET_CHAT::set_m_content(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_content_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_CHAT.m_content)
}
inline std::string* PROBUFF_NET_CHAT::mutable_m_content() {
  std::string* _s = _internal_mutable_m_content();
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_CHAT.m_content)
  return _s;
}
inline const std::string& PROBUFF_NET_CHAT::_internal_m_content() const {
  return _impl_.m_content_.Get();
}
inline void PROBUFF_NET_CHAT::_internal_set_m_content(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.m_content_.Set(value, GetArenaForAllocation());
}
inline std::string* PROBUFF_NET_CHAT::_internal_mutable_m_content() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.m_content_.Mutable( GetArenaForAllocation());
}
inline std::string* PROBUFF_NET_CHAT::release_m_content() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_CHAT.m_content)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.m_content_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.m_content_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PROBUFF_NET_CHAT::set_allocated_m_content(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.m_content_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.m_content_.IsDefault()) {
          _impl_.m_content_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_CHAT.m_content)
}

// -------------------------------------------------------------------

// chatitem

// optional int64 m_roleid = 1;
inline bool chatitem::has_m_roleid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void chatitem::clear_m_roleid() {
  _impl_.m_roleid_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t chatitem::m_roleid() const {
  // @@protoc_insertion_point(field_get:pbnet.chatitem.m_roleid)
  return _internal_m_roleid();
}
inline void chatitem::set_m_roleid(::int64_t value) {
  _internal_set_m_roleid(value);
  // @@protoc_insertion_point(field_set:pbnet.chatitem.m_roleid)
}
inline ::int64_t chatitem::_internal_m_roleid() const {
  return _impl_.m_roleid_;
}
inline void chatitem::_internal_set_m_roleid(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.m_roleid_ = value;
}

// optional string m_rolename = 2;
inline bool chatitem::has_m_rolename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void chatitem::clear_m_rolename() {
  _impl_.m_rolename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& chatitem::m_rolename() const {
  // @@protoc_insertion_point(field_get:pbnet.chatitem.m_rolename)
  return _internal_m_rolename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void chatitem::set_m_rolename(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_rolename_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbnet.chatitem.m_rolename)
}
inline std::string* chatitem::mutable_m_rolename() {
  std::string* _s = _internal_mutable_m_rolename();
  // @@protoc_insertion_point(field_mutable:pbnet.chatitem.m_rolename)
  return _s;
}
inline const std::string& chatitem::_internal_m_rolename() const {
  return _impl_.m_rolename_.Get();
}
inline void chatitem::_internal_set_m_rolename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.m_rolename_.Set(value, GetArenaForAllocation());
}
inline std::string* chatitem::_internal_mutable_m_rolename() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.m_rolename_.Mutable( GetArenaForAllocation());
}
inline std::string* chatitem::release_m_rolename() {
  // @@protoc_insertion_point(field_release:pbnet.chatitem.m_rolename)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.m_rolename_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.m_rolename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void chatitem::set_allocated_m_rolename(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.m_rolename_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.m_rolename_.IsDefault()) {
          _impl_.m_rolename_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbnet.chatitem.m_rolename)
}

// optional string m_content = 3;
inline bool chatitem::has_m_content() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void chatitem::clear_m_content() {
  _impl_.m_content_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& chatitem::m_content() const {
  // @@protoc_insertion_point(field_get:pbnet.chatitem.m_content)
  return _internal_m_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void chatitem::set_m_content(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.m_content_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbnet.chatitem.m_content)
}
inline std::string* chatitem::mutable_m_content() {
  std::string* _s = _internal_mutable_m_content();
  // @@protoc_insertion_point(field_mutable:pbnet.chatitem.m_content)
  return _s;
}
inline const std::string& chatitem::_internal_m_content() const {
  return _impl_.m_content_.Get();
}
inline void chatitem::_internal_set_m_content(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.m_content_.Set(value, GetArenaForAllocation());
}
inline std::string* chatitem::_internal_mutable_m_content() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.m_content_.Mutable( GetArenaForAllocation());
}
inline std::string* chatitem::release_m_content() {
  // @@protoc_insertion_point(field_release:pbnet.chatitem.m_content)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.m_content_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.m_content_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void chatitem::set_allocated_m_content(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.m_content_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.m_content_.IsDefault()) {
          _impl_.m_content_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbnet.chatitem.m_content)
}

// optional int32 m_utc = 4;
inline bool chatitem::has_m_utc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void chatitem::clear_m_utc() {
  _impl_.m_utc_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t chatitem::m_utc() const {
  // @@protoc_insertion_point(field_get:pbnet.chatitem.m_utc)
  return _internal_m_utc();
}
inline void chatitem::set_m_utc(::int32_t value) {
  _internal_set_m_utc(value);
  // @@protoc_insertion_point(field_set:pbnet.chatitem.m_utc)
}
inline ::int32_t chatitem::_internal_m_utc() const {
  return _impl_.m_utc_;
}
inline void chatitem::_internal_set_m_utc(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.m_utc_ = value;
}

// -------------------------------------------------------------------

// PROBUFF_NET_CHAT_RESPONSE

// optional int32 m_type = 1;
inline bool PROBUFF_NET_CHAT_RESPONSE::has_m_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PROBUFF_NET_CHAT_RESPONSE::clear_m_type() {
  _impl_.m_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t PROBUFF_NET_CHAT_RESPONSE::m_type() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_CHAT_RESPONSE.m_type)
  return _internal_m_type();
}
inline void PROBUFF_NET_CHAT_RESPONSE::set_m_type(::int32_t value) {
  _internal_set_m_type(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_CHAT_RESPONSE.m_type)
}
inline ::int32_t PROBUFF_NET_CHAT_RESPONSE::_internal_m_type() const {
  return _impl_.m_type_;
}
inline void PROBUFF_NET_CHAT_RESPONSE::_internal_set_m_type(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_type_ = value;
}

// optional int32 m_channelid = 2;
inline bool PROBUFF_NET_CHAT_RESPONSE::has_m_channelid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PROBUFF_NET_CHAT_RESPONSE::clear_m_channelid() {
  _impl_.m_channelid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t PROBUFF_NET_CHAT_RESPONSE::m_channelid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_CHAT_RESPONSE.m_channelid)
  return _internal_m_channelid();
}
inline void PROBUFF_NET_CHAT_RESPONSE::set_m_channelid(::int32_t value) {
  _internal_set_m_channelid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_CHAT_RESPONSE.m_channelid)
}
inline ::int32_t PROBUFF_NET_CHAT_RESPONSE::_internal_m_channelid() const {
  return _impl_.m_channelid_;
}
inline void PROBUFF_NET_CHAT_RESPONSE::_internal_set_m_channelid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.m_channelid_ = value;
}

// repeated .pbnet.chatitem m_chatlist = 3;
inline int PROBUFF_NET_CHAT_RESPONSE::_internal_m_chatlist_size() const {
  return _impl_.m_chatlist_.size();
}
inline int PROBUFF_NET_CHAT_RESPONSE::m_chatlist_size() const {
  return _internal_m_chatlist_size();
}
inline void PROBUFF_NET_CHAT_RESPONSE::clear_m_chatlist() {
  _internal_mutable_m_chatlist()->Clear();
}
inline ::pbnet::chatitem* PROBUFF_NET_CHAT_RESPONSE::mutable_m_chatlist(int index) {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_CHAT_RESPONSE.m_chatlist)
  return _internal_mutable_m_chatlist()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::chatitem >*
PROBUFF_NET_CHAT_RESPONSE::mutable_m_chatlist() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_CHAT_RESPONSE.m_chatlist)
  return _internal_mutable_m_chatlist();
}
inline const ::pbnet::chatitem& PROBUFF_NET_CHAT_RESPONSE::_internal_m_chatlist(int index) const {
  return _internal_m_chatlist().Get(index);
}
inline const ::pbnet::chatitem& PROBUFF_NET_CHAT_RESPONSE::m_chatlist(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_CHAT_RESPONSE.m_chatlist)
  return _internal_m_chatlist(index);
}
inline ::pbnet::chatitem* PROBUFF_NET_CHAT_RESPONSE::_internal_add_m_chatlist() {
  return _internal_mutable_m_chatlist()->Add();
}
inline ::pbnet::chatitem* PROBUFF_NET_CHAT_RESPONSE::add_m_chatlist() {
  ::pbnet::chatitem* _add = _internal_add_m_chatlist();
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_CHAT_RESPONSE.m_chatlist)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::chatitem >&
PROBUFF_NET_CHAT_RESPONSE::m_chatlist() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_CHAT_RESPONSE.m_chatlist)
  return _internal_m_chatlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::pbnet::chatitem>&
PROBUFF_NET_CHAT_RESPONSE::_internal_m_chatlist() const {
  return _impl_.m_chatlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::pbnet::chatitem>*
PROBUFF_NET_CHAT_RESPONSE::_internal_mutable_m_chatlist() {
  return &_impl_.m_chatlist_;
}

// optional bool m_stat = 4;
inline bool PROBUFF_NET_CHAT_RESPONSE::has_m_stat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void PROBUFF_NET_CHAT_RESPONSE::clear_m_stat() {
  _impl_.m_stat_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool PROBUFF_NET_CHAT_RESPONSE::m_stat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_CHAT_RESPONSE.m_stat)
  return _internal_m_stat();
}
inline void PROBUFF_NET_CHAT_RESPONSE::set_m_stat(bool value) {
  _internal_set_m_stat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_CHAT_RESPONSE.m_stat)
}
inline bool PROBUFF_NET_CHAT_RESPONSE::_internal_m_stat() const {
  return _impl_.m_stat_;
}
inline void PROBUFF_NET_CHAT_RESPONSE::_internal_set_m_stat(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.m_stat_ = value;
}

// -------------------------------------------------------------------

// PROBUFF_NET_SWITCH_LINE

// optional int32 m_line = 1;
inline bool PROBUFF_NET_SWITCH_LINE::has_m_line() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PROBUFF_NET_SWITCH_LINE::clear_m_line() {
  _impl_.m_line_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t PROBUFF_NET_SWITCH_LINE::m_line() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_SWITCH_LINE.m_line)
  return _internal_m_line();
}
inline void PROBUFF_NET_SWITCH_LINE::set_m_line(::int32_t value) {
  _internal_set_m_line(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_SWITCH_LINE.m_line)
}
inline ::int32_t PROBUFF_NET_SWITCH_LINE::_internal_m_line() const {
  return _impl_.m_line_;
}
inline void PROBUFF_NET_SWITCH_LINE::_internal_set_m_line(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_line_ = value;
}

// -------------------------------------------------------------------

// PROBUFF_NET_SWITCH_LINE_RESPONSE

// optional int32 m_line = 1;
inline bool PROBUFF_NET_SWITCH_LINE_RESPONSE::has_m_line() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PROBUFF_NET_SWITCH_LINE_RESPONSE::clear_m_line() {
  _impl_.m_line_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t PROBUFF_NET_SWITCH_LINE_RESPONSE::m_line() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE.m_line)
  return _internal_m_line();
}
inline void PROBUFF_NET_SWITCH_LINE_RESPONSE::set_m_line(::int32_t value) {
  _internal_set_m_line(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE.m_line)
}
inline ::int32_t PROBUFF_NET_SWITCH_LINE_RESPONSE::_internal_m_line() const {
  return _impl_.m_line_;
}
inline void PROBUFF_NET_SWITCH_LINE_RESPONSE::_internal_set_m_line(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_line_ = value;
}

// optional bool m_stat = 2;
inline bool PROBUFF_NET_SWITCH_LINE_RESPONSE::has_m_stat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PROBUFF_NET_SWITCH_LINE_RESPONSE::clear_m_stat() {
  _impl_.m_stat_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool PROBUFF_NET_SWITCH_LINE_RESPONSE::m_stat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE.m_stat)
  return _internal_m_stat();
}
inline void PROBUFF_NET_SWITCH_LINE_RESPONSE::set_m_stat(bool value) {
  _internal_set_m_stat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE.m_stat)
}
inline bool PROBUFF_NET_SWITCH_LINE_RESPONSE::_internal_m_stat() const {
  return _impl_.m_stat_;
}
inline void PROBUFF_NET_SWITCH_LINE_RESPONSE::_internal_set_m_stat(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.m_stat_ = value;
}

// -------------------------------------------------------------------

// PROBUFF_NET_MAIL_LIST

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PROBUFF_NET_MAIL_LIST_RESPONSE

// map<int32, .pbdb.mail> m_mail = 1;
inline int PROBUFF_NET_MAIL_LIST_RESPONSE::_internal_m_mail_size() const {
  return _impl_.m_mail_.size();
}
inline int PROBUFF_NET_MAIL_LIST_RESPONSE::m_mail_size() const {
  return _internal_m_mail_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::int32_t, ::pbdb::mail >&
PROBUFF_NET_MAIL_LIST_RESPONSE::_internal_m_mail() const {
  return _impl_.m_mail_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::int32_t, ::pbdb::mail >&
PROBUFF_NET_MAIL_LIST_RESPONSE::m_mail() const {
  // @@protoc_insertion_point(field_map:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE.m_mail)
  return _internal_m_mail();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::int32_t, ::pbdb::mail >*
PROBUFF_NET_MAIL_LIST_RESPONSE::_internal_mutable_m_mail() {
  return _impl_.m_mail_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::int32_t, ::pbdb::mail >*
PROBUFF_NET_MAIL_LIST_RESPONSE::mutable_m_mail() {
  // @@protoc_insertion_point(field_mutable_map:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE.m_mail)
  return _internal_mutable_m_mail();
}

// -------------------------------------------------------------------

// PROBUFF_NET_MAIL_READ

// optional int64 m_mailid = 1;
inline bool PROBUFF_NET_MAIL_READ::has_m_mailid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PROBUFF_NET_MAIL_READ::clear_m_mailid() {
  _impl_.m_mailid_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t PROBUFF_NET_MAIL_READ::m_mailid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MAIL_READ.m_mailid)
  return _internal_m_mailid();
}
inline void PROBUFF_NET_MAIL_READ::set_m_mailid(::int64_t value) {
  _internal_set_m_mailid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MAIL_READ.m_mailid)
}
inline ::int64_t PROBUFF_NET_MAIL_READ::_internal_m_mailid() const {
  return _impl_.m_mailid_;
}
inline void PROBUFF_NET_MAIL_READ::_internal_set_m_mailid(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_mailid_ = value;
}

// -------------------------------------------------------------------

// PROBUFF_NET_MAIL_READ_RESPONSE

// optional int64 m_mailid = 1;
inline bool PROBUFF_NET_MAIL_READ_RESPONSE::has_m_mailid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PROBUFF_NET_MAIL_READ_RESPONSE::clear_m_mailid() {
  _impl_.m_mailid_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t PROBUFF_NET_MAIL_READ_RESPONSE::m_mailid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE.m_mailid)
  return _internal_m_mailid();
}
inline void PROBUFF_NET_MAIL_READ_RESPONSE::set_m_mailid(::int64_t value) {
  _internal_set_m_mailid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE.m_mailid)
}
inline ::int64_t PROBUFF_NET_MAIL_READ_RESPONSE::_internal_m_mailid() const {
  return _impl_.m_mailid_;
}
inline void PROBUFF_NET_MAIL_READ_RESPONSE::_internal_set_m_mailid(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_mailid_ = value;
}

// optional bool m_stat = 2;
inline bool PROBUFF_NET_MAIL_READ_RESPONSE::has_m_stat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PROBUFF_NET_MAIL_READ_RESPONSE::clear_m_stat() {
  _impl_.m_stat_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool PROBUFF_NET_MAIL_READ_RESPONSE::m_stat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE.m_stat)
  return _internal_m_stat();
}
inline void PROBUFF_NET_MAIL_READ_RESPONSE::set_m_stat(bool value) {
  _internal_set_m_stat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE.m_stat)
}
inline bool PROBUFF_NET_MAIL_READ_RESPONSE::_internal_m_stat() const {
  return _impl_.m_stat_;
}
inline void PROBUFF_NET_MAIL_READ_RESPONSE::_internal_set_m_stat(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.m_stat_ = value;
}

// -------------------------------------------------------------------

// PROBUFF_NET_MAIL_DRAW

// optional int64 m_mailid = 1;
inline bool PROBUFF_NET_MAIL_DRAW::has_m_mailid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PROBUFF_NET_MAIL_DRAW::clear_m_mailid() {
  _impl_.m_mailid_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t PROBUFF_NET_MAIL_DRAW::m_mailid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MAIL_DRAW.m_mailid)
  return _internal_m_mailid();
}
inline void PROBUFF_NET_MAIL_DRAW::set_m_mailid(::int64_t value) {
  _internal_set_m_mailid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MAIL_DRAW.m_mailid)
}
inline ::int64_t PROBUFF_NET_MAIL_DRAW::_internal_m_mailid() const {
  return _impl_.m_mailid_;
}
inline void PROBUFF_NET_MAIL_DRAW::_internal_set_m_mailid(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_mailid_ = value;
}

// -------------------------------------------------------------------

// PROBUFF_NET_MAIL_DRAW_RESPONSE

// optional int64 m_mailid = 1;
inline bool PROBUFF_NET_MAIL_DRAW_RESPONSE::has_m_mailid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PROBUFF_NET_MAIL_DRAW_RESPONSE::clear_m_mailid() {
  _impl_.m_mailid_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t PROBUFF_NET_MAIL_DRAW_RESPONSE::m_mailid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE.m_mailid)
  return _internal_m_mailid();
}
inline void PROBUFF_NET_MAIL_DRAW_RESPONSE::set_m_mailid(::int64_t value) {
  _internal_set_m_mailid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE.m_mailid)
}
inline ::int64_t PROBUFF_NET_MAIL_DRAW_RESPONSE::_internal_m_mailid() const {
  return _impl_.m_mailid_;
}
inline void PROBUFF_NET_MAIL_DRAW_RESPONSE::_internal_set_m_mailid(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_mailid_ = value;
}

// optional bool m_stat = 2;
inline bool PROBUFF_NET_MAIL_DRAW_RESPONSE::has_m_stat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PROBUFF_NET_MAIL_DRAW_RESPONSE::clear_m_stat() {
  _impl_.m_stat_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool PROBUFF_NET_MAIL_DRAW_RESPONSE::m_stat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE.m_stat)
  return _internal_m_stat();
}
inline void PROBUFF_NET_MAIL_DRAW_RESPONSE::set_m_stat(bool value) {
  _internal_set_m_stat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE.m_stat)
}
inline bool PROBUFF_NET_MAIL_DRAW_RESPONSE::_internal_m_stat() const {
  return _impl_.m_stat_;
}
inline void PROBUFF_NET_MAIL_DRAW_RESPONSE::_internal_set_m_stat(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.m_stat_ = value;
}

// -------------------------------------------------------------------

// PROBUFF_NET_MAIL_DEL

// optional int64 m_mailid = 1;
inline bool PROBUFF_NET_MAIL_DEL::has_m_mailid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PROBUFF_NET_MAIL_DEL::clear_m_mailid() {
  _impl_.m_mailid_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t PROBUFF_NET_MAIL_DEL::m_mailid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MAIL_DEL.m_mailid)
  return _internal_m_mailid();
}
inline void PROBUFF_NET_MAIL_DEL::set_m_mailid(::int64_t value) {
  _internal_set_m_mailid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MAIL_DEL.m_mailid)
}
inline ::int64_t PROBUFF_NET_MAIL_DEL::_internal_m_mailid() const {
  return _impl_.m_mailid_;
}
inline void PROBUFF_NET_MAIL_DEL::_internal_set_m_mailid(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_mailid_ = value;
}

// -------------------------------------------------------------------

// PROBUFF_NET_MAIL_DEL_RESPONSE

// optional int64 m_mailid = 1;
inline bool PROBUFF_NET_MAIL_DEL_RESPONSE::has_m_mailid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PROBUFF_NET_MAIL_DEL_RESPONSE::clear_m_mailid() {
  _impl_.m_mailid_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t PROBUFF_NET_MAIL_DEL_RESPONSE::m_mailid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE.m_mailid)
  return _internal_m_mailid();
}
inline void PROBUFF_NET_MAIL_DEL_RESPONSE::set_m_mailid(::int64_t value) {
  _internal_set_m_mailid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE.m_mailid)
}
inline ::int64_t PROBUFF_NET_MAIL_DEL_RESPONSE::_internal_m_mailid() const {
  return _impl_.m_mailid_;
}
inline void PROBUFF_NET_MAIL_DEL_RESPONSE::_internal_set_m_mailid(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_mailid_ = value;
}

// optional bool m_stat = 2;
inline bool PROBUFF_NET_MAIL_DEL_RESPONSE::has_m_stat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PROBUFF_NET_MAIL_DEL_RESPONSE::clear_m_stat() {
  _impl_.m_stat_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool PROBUFF_NET_MAIL_DEL_RESPONSE::m_stat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE.m_stat)
  return _internal_m_stat();
}
inline void PROBUFF_NET_MAIL_DEL_RESPONSE::set_m_stat(bool value) {
  _internal_set_m_stat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE.m_stat)
}
inline bool PROBUFF_NET_MAIL_DEL_RESPONSE::_internal_m_stat() const {
  return _impl_.m_stat_;
}
inline void PROBUFF_NET_MAIL_DEL_RESPONSE::_internal_set_m_stat(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.m_stat_ = value;
}

// -------------------------------------------------------------------

// VECTOR2

// optional int32 m_x = 1;
inline bool VECTOR2::has_m_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void VECTOR2::clear_m_x() {
  _impl_.m_x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t VECTOR2::m_x() const {
  // @@protoc_insertion_point(field_get:pbnet.VECTOR2.m_x)
  return _internal_m_x();
}
inline void VECTOR2::set_m_x(::int32_t value) {
  _internal_set_m_x(value);
  // @@protoc_insertion_point(field_set:pbnet.VECTOR2.m_x)
}
inline ::int32_t VECTOR2::_internal_m_x() const {
  return _impl_.m_x_;
}
inline void VECTOR2::_internal_set_m_x(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_x_ = value;
}

// optional int32 m_y = 2;
inline bool VECTOR2::has_m_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void VECTOR2::clear_m_y() {
  _impl_.m_y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t VECTOR2::m_y() const {
  // @@protoc_insertion_point(field_get:pbnet.VECTOR2.m_y)
  return _internal_m_y();
}
inline void VECTOR2::set_m_y(::int32_t value) {
  _internal_set_m_y(value);
  // @@protoc_insertion_point(field_set:pbnet.VECTOR2.m_y)
}
inline ::int32_t VECTOR2::_internal_m_y() const {
  return _impl_.m_y_;
}
inline void VECTOR2::_internal_set_m_y(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.m_y_ = value;
}

// -------------------------------------------------------------------

// VECTOR3

// optional int32 m_x = 1;
inline bool VECTOR3::has_m_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void VECTOR3::clear_m_x() {
  _impl_.m_x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t VECTOR3::m_x() const {
  // @@protoc_insertion_point(field_get:pbnet.VECTOR3.m_x)
  return _internal_m_x();
}
inline void VECTOR3::set_m_x(::int32_t value) {
  _internal_set_m_x(value);
  // @@protoc_insertion_point(field_set:pbnet.VECTOR3.m_x)
}
inline ::int32_t VECTOR3::_internal_m_x() const {
  return _impl_.m_x_;
}
inline void VECTOR3::_internal_set_m_x(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_x_ = value;
}

// optional int32 m_y = 2;
inline bool VECTOR3::has_m_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void VECTOR3::clear_m_y() {
  _impl_.m_y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t VECTOR3::m_y() const {
  // @@protoc_insertion_point(field_get:pbnet.VECTOR3.m_y)
  return _internal_m_y();
}
inline void VECTOR3::set_m_y(::int32_t value) {
  _internal_set_m_y(value);
  // @@protoc_insertion_point(field_set:pbnet.VECTOR3.m_y)
}
inline ::int32_t VECTOR3::_internal_m_y() const {
  return _impl_.m_y_;
}
inline void VECTOR3::_internal_set_m_y(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.m_y_ = value;
}

// optional int32 m_z = 3;
inline bool VECTOR3::has_m_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void VECTOR3::clear_m_z() {
  _impl_.m_z_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t VECTOR3::m_z() const {
  // @@protoc_insertion_point(field_get:pbnet.VECTOR3.m_z)
  return _internal_m_z();
}
inline void VECTOR3::set_m_z(::int32_t value) {
  _internal_set_m_z(value);
  // @@protoc_insertion_point(field_set:pbnet.VECTOR3.m_z)
}
inline ::int32_t VECTOR3::_internal_m_z() const {
  return _impl_.m_z_;
}
inline void VECTOR3::_internal_set_m_z(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.m_z_ = value;
}

// -------------------------------------------------------------------

// UNIT_POSITION

// optional int64 m_id = 2;
inline bool UNIT_POSITION::has_m_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void UNIT_POSITION::clear_m_id() {
  _impl_.m_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t UNIT_POSITION::m_id() const {
  // @@protoc_insertion_point(field_get:pbnet.UNIT_POSITION.m_id)
  return _internal_m_id();
}
inline void UNIT_POSITION::set_m_id(::int64_t value) {
  _internal_set_m_id(value);
  // @@protoc_insertion_point(field_set:pbnet.UNIT_POSITION.m_id)
}
inline ::int64_t UNIT_POSITION::_internal_m_id() const {
  return _impl_.m_id_;
}
inline void UNIT_POSITION::_internal_set_m_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.m_id_ = value;
}

// optional .pbnet.VECTOR2 m_position = 3;
inline bool UNIT_POSITION::has_m_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.m_position_ != nullptr);
  return value;
}
inline void UNIT_POSITION::clear_m_position() {
  if (_impl_.m_position_ != nullptr) _impl_.m_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::pbnet::VECTOR2& UNIT_POSITION::_internal_m_position() const {
  const ::pbnet::VECTOR2* p = _impl_.m_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::pbnet::VECTOR2&>(
      ::pbnet::_VECTOR2_default_instance_);
}
inline const ::pbnet::VECTOR2& UNIT_POSITION::m_position() const {
  // @@protoc_insertion_point(field_get:pbnet.UNIT_POSITION.m_position)
  return _internal_m_position();
}
inline void UNIT_POSITION::unsafe_arena_set_allocated_m_position(
    ::pbnet::VECTOR2* m_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.m_position_);
  }
  _impl_.m_position_ = m_position;
  if (m_position) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.UNIT_POSITION.m_position)
}
inline ::pbnet::VECTOR2* UNIT_POSITION::release_m_position() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::pbnet::VECTOR2* temp = _impl_.m_position_;
  _impl_.m_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pbnet::VECTOR2* UNIT_POSITION::unsafe_arena_release_m_position() {
  // @@protoc_insertion_point(field_release:pbnet.UNIT_POSITION.m_position)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::pbnet::VECTOR2* temp = _impl_.m_position_;
  _impl_.m_position_ = nullptr;
  return temp;
}
inline ::pbnet::VECTOR2* UNIT_POSITION::_internal_mutable_m_position() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.m_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbnet::VECTOR2>(GetArenaForAllocation());
    _impl_.m_position_ = p;
  }
  return _impl_.m_position_;
}
inline ::pbnet::VECTOR2* UNIT_POSITION::mutable_m_position() {
  ::pbnet::VECTOR2* _msg = _internal_mutable_m_position();
  // @@protoc_insertion_point(field_mutable:pbnet.UNIT_POSITION.m_position)
  return _msg;
}
inline void UNIT_POSITION::set_allocated_m_position(::pbnet::VECTOR2* m_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.m_position_;
  }
  if (m_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(m_position);
    if (message_arena != submessage_arena) {
      m_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.m_position_ = m_position;
  // @@protoc_insertion_point(field_set_allocated:pbnet.UNIT_POSITION.m_position)
}

// optional int32 m_angle = 4;
inline bool UNIT_POSITION::has_m_angle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void UNIT_POSITION::clear_m_angle() {
  _impl_.m_angle_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t UNIT_POSITION::m_angle() const {
  // @@protoc_insertion_point(field_get:pbnet.UNIT_POSITION.m_angle)
  return _internal_m_angle();
}
inline void UNIT_POSITION::set_m_angle(::int32_t value) {
  _internal_set_m_angle(value);
  // @@protoc_insertion_point(field_set:pbnet.UNIT_POSITION.m_angle)
}
inline ::int32_t UNIT_POSITION::_internal_m_angle() const {
  return _impl_.m_angle_;
}
inline void UNIT_POSITION::_internal_set_m_angle(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.m_angle_ = value;
}

// optional int32 m_speed = 5;
inline bool UNIT_POSITION::has_m_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void UNIT_POSITION::clear_m_speed() {
  _impl_.m_speed_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t UNIT_POSITION::m_speed() const {
  // @@protoc_insertion_point(field_get:pbnet.UNIT_POSITION.m_speed)
  return _internal_m_speed();
}
inline void UNIT_POSITION::set_m_speed(::int32_t value) {
  _internal_set_m_speed(value);
  // @@protoc_insertion_point(field_set:pbnet.UNIT_POSITION.m_speed)
}
inline ::int32_t UNIT_POSITION::_internal_m_speed() const {
  return _impl_.m_speed_;
}
inline void UNIT_POSITION::_internal_set_m_speed(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.m_speed_ = value;
}

// -------------------------------------------------------------------

// UNIT

// optional .pbnet.eunit m_type = 1;
inline bool UNIT::has_m_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void UNIT::clear_m_type() {
  _impl_.m_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::pbnet::eunit UNIT::m_type() const {
  // @@protoc_insertion_point(field_get:pbnet.UNIT.m_type)
  return _internal_m_type();
}
inline void UNIT::set_m_type(::pbnet::eunit value) {
   _internal_set_m_type(value);
  // @@protoc_insertion_point(field_set:pbnet.UNIT.m_type)
}
inline ::pbnet::eunit UNIT::_internal_m_type() const {
  return static_cast<::pbnet::eunit>(_impl_.m_type_);
}
inline void UNIT::_internal_set_m_type(::pbnet::eunit value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.m_type_ = value;
}

// optional int64 m_id = 2;
inline bool UNIT::has_m_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void UNIT::clear_m_id() {
  _impl_.m_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t UNIT::m_id() const {
  // @@protoc_insertion_point(field_get:pbnet.UNIT.m_id)
  return _internal_m_id();
}
inline void UNIT::set_m_id(::int64_t value) {
  _internal_set_m_id(value);
  // @@protoc_insertion_point(field_set:pbnet.UNIT.m_id)
}
inline ::int64_t UNIT::_internal_m_id() const {
  return _impl_.m_id_;
}
inline void UNIT::_internal_set_m_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.m_id_ = value;
}

// optional .pbnet.UNIT_POSITION m_position = 3;
inline bool UNIT::has_m_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.m_position_ != nullptr);
  return value;
}
inline void UNIT::clear_m_position() {
  if (_impl_.m_position_ != nullptr) _impl_.m_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::pbnet::UNIT_POSITION& UNIT::_internal_m_position() const {
  const ::pbnet::UNIT_POSITION* p = _impl_.m_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::pbnet::UNIT_POSITION&>(
      ::pbnet::_UNIT_POSITION_default_instance_);
}
inline const ::pbnet::UNIT_POSITION& UNIT::m_position() const {
  // @@protoc_insertion_point(field_get:pbnet.UNIT.m_position)
  return _internal_m_position();
}
inline void UNIT::unsafe_arena_set_allocated_m_position(
    ::pbnet::UNIT_POSITION* m_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.m_position_);
  }
  _impl_.m_position_ = m_position;
  if (m_position) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.UNIT.m_position)
}
inline ::pbnet::UNIT_POSITION* UNIT::release_m_position() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::pbnet::UNIT_POSITION* temp = _impl_.m_position_;
  _impl_.m_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pbnet::UNIT_POSITION* UNIT::unsafe_arena_release_m_position() {
  // @@protoc_insertion_point(field_release:pbnet.UNIT.m_position)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::pbnet::UNIT_POSITION* temp = _impl_.m_position_;
  _impl_.m_position_ = nullptr;
  return temp;
}
inline ::pbnet::UNIT_POSITION* UNIT::_internal_mutable_m_position() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.m_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbnet::UNIT_POSITION>(GetArenaForAllocation());
    _impl_.m_position_ = p;
  }
  return _impl_.m_position_;
}
inline ::pbnet::UNIT_POSITION* UNIT::mutable_m_position() {
  ::pbnet::UNIT_POSITION* _msg = _internal_mutable_m_position();
  // @@protoc_insertion_point(field_mutable:pbnet.UNIT.m_position)
  return _msg;
}
inline void UNIT::set_allocated_m_position(::pbnet::UNIT_POSITION* m_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.m_position_;
  }
  if (m_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(m_position);
    if (message_arena != submessage_arena) {
      m_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.m_position_ = m_position;
  // @@protoc_insertion_point(field_set_allocated:pbnet.UNIT.m_position)
}

// -------------------------------------------------------------------

// PROBUFF_NET_SYNC_UNIT

// repeated .pbnet.UNIT m_units = 1;
inline int PROBUFF_NET_SYNC_UNIT::_internal_m_units_size() const {
  return _impl_.m_units_.size();
}
inline int PROBUFF_NET_SYNC_UNIT::m_units_size() const {
  return _internal_m_units_size();
}
inline void PROBUFF_NET_SYNC_UNIT::clear_m_units() {
  _internal_mutable_m_units()->Clear();
}
inline ::pbnet::UNIT* PROBUFF_NET_SYNC_UNIT::mutable_m_units(int index) {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_SYNC_UNIT.m_units)
  return _internal_mutable_m_units()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UNIT >*
PROBUFF_NET_SYNC_UNIT::mutable_m_units() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_SYNC_UNIT.m_units)
  return _internal_mutable_m_units();
}
inline const ::pbnet::UNIT& PROBUFF_NET_SYNC_UNIT::_internal_m_units(int index) const {
  return _internal_m_units().Get(index);
}
inline const ::pbnet::UNIT& PROBUFF_NET_SYNC_UNIT::m_units(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_SYNC_UNIT.m_units)
  return _internal_m_units(index);
}
inline ::pbnet::UNIT* PROBUFF_NET_SYNC_UNIT::_internal_add_m_units() {
  return _internal_mutable_m_units()->Add();
}
inline ::pbnet::UNIT* PROBUFF_NET_SYNC_UNIT::add_m_units() {
  ::pbnet::UNIT* _add = _internal_add_m_units();
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_SYNC_UNIT.m_units)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UNIT >&
PROBUFF_NET_SYNC_UNIT::m_units() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_SYNC_UNIT.m_units)
  return _internal_m_units();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::pbnet::UNIT>&
PROBUFF_NET_SYNC_UNIT::_internal_m_units() const {
  return _impl_.m_units_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::pbnet::UNIT>*
PROBUFF_NET_SYNC_UNIT::_internal_mutable_m_units() {
  return &_impl_.m_units_;
}

// -------------------------------------------------------------------

// PROBUFF_NET_ENTER_LEAVE_VIEW

// optional bool m_isenter = 1;
inline bool PROBUFF_NET_ENTER_LEAVE_VIEW::has_m_isenter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PROBUFF_NET_ENTER_LEAVE_VIEW::clear_m_isenter() {
  _impl_.m_isenter_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool PROBUFF_NET_ENTER_LEAVE_VIEW::m_isenter() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW.m_isenter)
  return _internal_m_isenter();
}
inline void PROBUFF_NET_ENTER_LEAVE_VIEW::set_m_isenter(bool value) {
  _internal_set_m_isenter(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW.m_isenter)
}
inline bool PROBUFF_NET_ENTER_LEAVE_VIEW::_internal_m_isenter() const {
  return _impl_.m_isenter_;
}
inline void PROBUFF_NET_ENTER_LEAVE_VIEW::_internal_set_m_isenter(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_isenter_ = value;
}

// repeated int64 m_units = 2;
inline int PROBUFF_NET_ENTER_LEAVE_VIEW::_internal_m_units_size() const {
  return _impl_.m_units_.size();
}
inline int PROBUFF_NET_ENTER_LEAVE_VIEW::m_units_size() const {
  return _internal_m_units_size();
}
inline void PROBUFF_NET_ENTER_LEAVE_VIEW::clear_m_units() {
  _internal_mutable_m_units()->Clear();
}
inline ::int64_t PROBUFF_NET_ENTER_LEAVE_VIEW::m_units(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW.m_units)
  return _internal_m_units(index);
}
inline void PROBUFF_NET_ENTER_LEAVE_VIEW::set_m_units(int index, ::int64_t value) {
  _internal_mutable_m_units()->Set(index, value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW.m_units)
}
inline void PROBUFF_NET_ENTER_LEAVE_VIEW::add_m_units(::int64_t value) {
  _internal_add_m_units(value);
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW.m_units)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& PROBUFF_NET_ENTER_LEAVE_VIEW::m_units() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW.m_units)
  return _internal_m_units();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* PROBUFF_NET_ENTER_LEAVE_VIEW::mutable_m_units() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW.m_units)
  return _internal_mutable_m_units();
}

inline ::int64_t PROBUFF_NET_ENTER_LEAVE_VIEW::_internal_m_units(int index) const {
  return _internal_m_units().Get(index);
}
inline void PROBUFF_NET_ENTER_LEAVE_VIEW::_internal_add_m_units(::int64_t value) {
  _internal_mutable_m_units()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& PROBUFF_NET_ENTER_LEAVE_VIEW::_internal_m_units() const {
  return _impl_.m_units_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* PROBUFF_NET_ENTER_LEAVE_VIEW::_internal_mutable_m_units() {
  return &_impl_.m_units_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PROBUFF_NET_SYNC_POSITION

// map<int64, .pbnet.UNIT_POSITION> m_position = 1;
inline int PROBUFF_NET_SYNC_POSITION::_internal_m_position_size() const {
  return _impl_.m_position_.size();
}
inline int PROBUFF_NET_SYNC_POSITION::m_position_size() const {
  return _internal_m_position_size();
}
inline void PROBUFF_NET_SYNC_POSITION::clear_m_position() {
  _impl_.m_position_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::int64_t, ::pbnet::UNIT_POSITION >&
PROBUFF_NET_SYNC_POSITION::_internal_m_position() const {
  return _impl_.m_position_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::int64_t, ::pbnet::UNIT_POSITION >&
PROBUFF_NET_SYNC_POSITION::m_position() const {
  // @@protoc_insertion_point(field_map:pbnet.PROBUFF_NET_SYNC_POSITION.m_position)
  return _internal_m_position();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::int64_t, ::pbnet::UNIT_POSITION >*
PROBUFF_NET_SYNC_POSITION::_internal_mutable_m_position() {
  return _impl_.m_position_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::int64_t, ::pbnet::UNIT_POSITION >*
PROBUFF_NET_SYNC_POSITION::mutable_m_position() {
  // @@protoc_insertion_point(field_mutable_map:pbnet.PROBUFF_NET_SYNC_POSITION.m_position)
  return _internal_mutable_m_position();
}

// -------------------------------------------------------------------

// PROBUFF_NET_CHANGE_ANGLE

// optional .pbnet.UNIT_POSITION m_position = 1;
inline bool PROBUFF_NET_CHANGE_ANGLE::has_m_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.m_position_ != nullptr);
  return value;
}
inline void PROBUFF_NET_CHANGE_ANGLE::clear_m_position() {
  if (_impl_.m_position_ != nullptr) _impl_.m_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::pbnet::UNIT_POSITION& PROBUFF_NET_CHANGE_ANGLE::_internal_m_position() const {
  const ::pbnet::UNIT_POSITION* p = _impl_.m_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::pbnet::UNIT_POSITION&>(
      ::pbnet::_UNIT_POSITION_default_instance_);
}
inline const ::pbnet::UNIT_POSITION& PROBUFF_NET_CHANGE_ANGLE::m_position() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_CHANGE_ANGLE.m_position)
  return _internal_m_position();
}
inline void PROBUFF_NET_CHANGE_ANGLE::unsafe_arena_set_allocated_m_position(
    ::pbnet::UNIT_POSITION* m_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.m_position_);
  }
  _impl_.m_position_ = m_position;
  if (m_position) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.PROBUFF_NET_CHANGE_ANGLE.m_position)
}
inline ::pbnet::UNIT_POSITION* PROBUFF_NET_CHANGE_ANGLE::release_m_position() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::pbnet::UNIT_POSITION* temp = _impl_.m_position_;
  _impl_.m_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pbnet::UNIT_POSITION* PROBUFF_NET_CHANGE_ANGLE::unsafe_arena_release_m_position() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_CHANGE_ANGLE.m_position)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::pbnet::UNIT_POSITION* temp = _impl_.m_position_;
  _impl_.m_position_ = nullptr;
  return temp;
}
inline ::pbnet::UNIT_POSITION* PROBUFF_NET_CHANGE_ANGLE::_internal_mutable_m_position() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.m_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbnet::UNIT_POSITION>(GetArenaForAllocation());
    _impl_.m_position_ = p;
  }
  return _impl_.m_position_;
}
inline ::pbnet::UNIT_POSITION* PROBUFF_NET_CHANGE_ANGLE::mutable_m_position() {
  ::pbnet::UNIT_POSITION* _msg = _internal_mutable_m_position();
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_CHANGE_ANGLE.m_position)
  return _msg;
}
inline void PROBUFF_NET_CHANGE_ANGLE::set_allocated_m_position(::pbnet::UNIT_POSITION* m_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.m_position_;
  }
  if (m_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(m_position);
    if (message_arena != submessage_arena) {
      m_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.m_position_ = m_position;
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_CHANGE_ANGLE.m_position)
}

// -------------------------------------------------------------------

// PROBUFF_NET_MATCHING

// optional .pbnet.eplays m_type = 1;
inline bool PROBUFF_NET_MATCHING::has_m_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PROBUFF_NET_MATCHING::clear_m_type() {
  _impl_.m_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::pbnet::eplays PROBUFF_NET_MATCHING::m_type() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING.m_type)
  return _internal_m_type();
}
inline void PROBUFF_NET_MATCHING::set_m_type(::pbnet::eplays value) {
   _internal_set_m_type(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING.m_type)
}
inline ::pbnet::eplays PROBUFF_NET_MATCHING::_internal_m_type() const {
  return static_cast<::pbnet::eplays>(_impl_.m_type_);
}
inline void PROBUFF_NET_MATCHING::_internal_set_m_type(::pbnet::eplays value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_type_ = value;
}

// optional int32 m_tid = 2;
inline bool PROBUFF_NET_MATCHING::has_m_tid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PROBUFF_NET_MATCHING::clear_m_tid() {
  _impl_.m_tid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t PROBUFF_NET_MATCHING::m_tid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING.m_tid)
  return _internal_m_tid();
}
inline void PROBUFF_NET_MATCHING::set_m_tid(::int32_t value) {
  _internal_set_m_tid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING.m_tid)
}
inline ::int32_t PROBUFF_NET_MATCHING::_internal_m_tid() const {
  return _impl_.m_tid_;
}
inline void PROBUFF_NET_MATCHING::_internal_set_m_tid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.m_tid_ = value;
}

// -------------------------------------------------------------------

// MATCHING_MEMBER

// optional int64 m_id = 1;
inline bool MATCHING_MEMBER::has_m_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void MATCHING_MEMBER::clear_m_id() {
  _impl_.m_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t MATCHING_MEMBER::m_id() const {
  // @@protoc_insertion_point(field_get:pbnet.MATCHING_MEMBER.m_id)
  return _internal_m_id();
}
inline void MATCHING_MEMBER::set_m_id(::int64_t value) {
  _internal_set_m_id(value);
  // @@protoc_insertion_point(field_set:pbnet.MATCHING_MEMBER.m_id)
}
inline ::int64_t MATCHING_MEMBER::_internal_m_id() const {
  return _impl_.m_id_;
}
inline void MATCHING_MEMBER::_internal_set_m_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.m_id_ = value;
}

// optional string m_name = 2;
inline bool MATCHING_MEMBER::has_m_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MATCHING_MEMBER::clear_m_name() {
  _impl_.m_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MATCHING_MEMBER::m_name() const {
  // @@protoc_insertion_point(field_get:pbnet.MATCHING_MEMBER.m_name)
  return _internal_m_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MATCHING_MEMBER::set_m_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbnet.MATCHING_MEMBER.m_name)
}
inline std::string* MATCHING_MEMBER::mutable_m_name() {
  std::string* _s = _internal_mutable_m_name();
  // @@protoc_insertion_point(field_mutable:pbnet.MATCHING_MEMBER.m_name)
  return _s;
}
inline const std::string& MATCHING_MEMBER::_internal_m_name() const {
  return _impl_.m_name_.Get();
}
inline void MATCHING_MEMBER::_internal_set_m_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.m_name_.Set(value, GetArenaForAllocation());
}
inline std::string* MATCHING_MEMBER::_internal_mutable_m_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.m_name_.Mutable( GetArenaForAllocation());
}
inline std::string* MATCHING_MEMBER::release_m_name() {
  // @@protoc_insertion_point(field_release:pbnet.MATCHING_MEMBER.m_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.m_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.m_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void MATCHING_MEMBER::set_allocated_m_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.m_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.m_name_.IsDefault()) {
          _impl_.m_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbnet.MATCHING_MEMBER.m_name)
}

// optional int32 m_lv = 3;
inline bool MATCHING_MEMBER::has_m_lv() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void MATCHING_MEMBER::clear_m_lv() {
  _impl_.m_lv_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t MATCHING_MEMBER::m_lv() const {
  // @@protoc_insertion_point(field_get:pbnet.MATCHING_MEMBER.m_lv)
  return _internal_m_lv();
}
inline void MATCHING_MEMBER::set_m_lv(::int32_t value) {
  _internal_set_m_lv(value);
  // @@protoc_insertion_point(field_set:pbnet.MATCHING_MEMBER.m_lv)
}
inline ::int32_t MATCHING_MEMBER::_internal_m_lv() const {
  return _impl_.m_lv_;
}
inline void MATCHING_MEMBER::_internal_set_m_lv(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.m_lv_ = value;
}

// optional int32 m_begmatch = 4;
inline bool MATCHING_MEMBER::has_m_begmatch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void MATCHING_MEMBER::clear_m_begmatch() {
  _impl_.m_begmatch_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t MATCHING_MEMBER::m_begmatch() const {
  // @@protoc_insertion_point(field_get:pbnet.MATCHING_MEMBER.m_begmatch)
  return _internal_m_begmatch();
}
inline void MATCHING_MEMBER::set_m_begmatch(::int32_t value) {
  _internal_set_m_begmatch(value);
  // @@protoc_insertion_point(field_set:pbnet.MATCHING_MEMBER.m_begmatch)
}
inline ::int32_t MATCHING_MEMBER::_internal_m_begmatch() const {
  return _impl_.m_begmatch_;
}
inline void MATCHING_MEMBER::_internal_set_m_begmatch(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.m_begmatch_ = value;
}

// optional bool m_isconfirm = 5;
inline bool MATCHING_MEMBER::has_m_isconfirm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void MATCHING_MEMBER::clear_m_isconfirm() {
  _impl_.m_isconfirm_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool MATCHING_MEMBER::m_isconfirm() const {
  // @@protoc_insertion_point(field_get:pbnet.MATCHING_MEMBER.m_isconfirm)
  return _internal_m_isconfirm();
}
inline void MATCHING_MEMBER::set_m_isconfirm(bool value) {
  _internal_set_m_isconfirm(value);
  // @@protoc_insertion_point(field_set:pbnet.MATCHING_MEMBER.m_isconfirm)
}
inline bool MATCHING_MEMBER::_internal_m_isconfirm() const {
  return _impl_.m_isconfirm_;
}
inline void MATCHING_MEMBER::_internal_set_m_isconfirm(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.m_isconfirm_ = value;
}

// -------------------------------------------------------------------

// PROBUFF_NET_MATCHING_RESPONSE

// optional int64 m_id = 1;
inline bool PROBUFF_NET_MATCHING_RESPONSE::has_m_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PROBUFF_NET_MATCHING_RESPONSE::clear_m_id() {
  _impl_.m_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t PROBUFF_NET_MATCHING_RESPONSE::m_id() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_RESPONSE.m_id)
  return _internal_m_id();
}
inline void PROBUFF_NET_MATCHING_RESPONSE::set_m_id(::int64_t value) {
  _internal_set_m_id(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING_RESPONSE.m_id)
}
inline ::int64_t PROBUFF_NET_MATCHING_RESPONSE::_internal_m_id() const {
  return _impl_.m_id_;
}
inline void PROBUFF_NET_MATCHING_RESPONSE::_internal_set_m_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_id_ = value;
}

// -------------------------------------------------------------------

// PROBUFF_NET_MATCHING_CANCEL

// optional .pbnet.eplays m_type = 1;
inline bool PROBUFF_NET_MATCHING_CANCEL::has_m_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PROBUFF_NET_MATCHING_CANCEL::clear_m_type() {
  _impl_.m_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::pbnet::eplays PROBUFF_NET_MATCHING_CANCEL::m_type() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_CANCEL.m_type)
  return _internal_m_type();
}
inline void PROBUFF_NET_MATCHING_CANCEL::set_m_type(::pbnet::eplays value) {
   _internal_set_m_type(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING_CANCEL.m_type)
}
inline ::pbnet::eplays PROBUFF_NET_MATCHING_CANCEL::_internal_m_type() const {
  return static_cast<::pbnet::eplays>(_impl_.m_type_);
}
inline void PROBUFF_NET_MATCHING_CANCEL::_internal_set_m_type(::pbnet::eplays value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.m_type_ = value;
}

// optional int64 m_roomid = 2;
inline bool PROBUFF_NET_MATCHING_CANCEL::has_m_roomid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PROBUFF_NET_MATCHING_CANCEL::clear_m_roomid() {
  _impl_.m_roomid_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t PROBUFF_NET_MATCHING_CANCEL::m_roomid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_CANCEL.m_roomid)
  return _internal_m_roomid();
}
inline void PROBUFF_NET_MATCHING_CANCEL::set_m_roomid(::int64_t value) {
  _internal_set_m_roomid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING_CANCEL.m_roomid)
}
inline ::int64_t PROBUFF_NET_MATCHING_CANCEL::_internal_m_roomid() const {
  return _impl_.m_roomid_;
}
inline void PROBUFF_NET_MATCHING_CANCEL::_internal_set_m_roomid(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_roomid_ = value;
}

// -------------------------------------------------------------------

// PROBUFF_NET_MATCHING_CANCEL_RESPONSE

// optional .pbnet.eplays m_type = 1;
inline bool PROBUFF_NET_MATCHING_CANCEL_RESPONSE::has_m_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PROBUFF_NET_MATCHING_CANCEL_RESPONSE::clear_m_type() {
  _impl_.m_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::pbnet::eplays PROBUFF_NET_MATCHING_CANCEL_RESPONSE::m_type() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE.m_type)
  return _internal_m_type();
}
inline void PROBUFF_NET_MATCHING_CANCEL_RESPONSE::set_m_type(::pbnet::eplays value) {
   _internal_set_m_type(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE.m_type)
}
inline ::pbnet::eplays PROBUFF_NET_MATCHING_CANCEL_RESPONSE::_internal_m_type() const {
  return static_cast<::pbnet::eplays>(_impl_.m_type_);
}
inline void PROBUFF_NET_MATCHING_CANCEL_RESPONSE::_internal_set_m_type(::pbnet::eplays value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_type_ = value;
}

// optional .pbnet.ematching_cancel_stat m_stat = 2;
inline bool PROBUFF_NET_MATCHING_CANCEL_RESPONSE::has_m_stat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PROBUFF_NET_MATCHING_CANCEL_RESPONSE::clear_m_stat() {
  _impl_.m_stat_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::pbnet::ematching_cancel_stat PROBUFF_NET_MATCHING_CANCEL_RESPONSE::m_stat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE.m_stat)
  return _internal_m_stat();
}
inline void PROBUFF_NET_MATCHING_CANCEL_RESPONSE::set_m_stat(::pbnet::ematching_cancel_stat value) {
   _internal_set_m_stat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE.m_stat)
}
inline ::pbnet::ematching_cancel_stat PROBUFF_NET_MATCHING_CANCEL_RESPONSE::_internal_m_stat() const {
  return static_cast<::pbnet::ematching_cancel_stat>(_impl_.m_stat_);
}
inline void PROBUFF_NET_MATCHING_CANCEL_RESPONSE::_internal_set_m_stat(::pbnet::ematching_cancel_stat value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.m_stat_ = value;
}

// -------------------------------------------------------------------

// PROBUFF_NET_MEMBER_MATCHING_CANCEL

// optional .pbnet.eplays m_type = 1;
inline bool PROBUFF_NET_MEMBER_MATCHING_CANCEL::has_m_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PROBUFF_NET_MEMBER_MATCHING_CANCEL::clear_m_type() {
  _impl_.m_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::pbnet::eplays PROBUFF_NET_MEMBER_MATCHING_CANCEL::m_type() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL.m_type)
  return _internal_m_type();
}
inline void PROBUFF_NET_MEMBER_MATCHING_CANCEL::set_m_type(::pbnet::eplays value) {
   _internal_set_m_type(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL.m_type)
}
inline ::pbnet::eplays PROBUFF_NET_MEMBER_MATCHING_CANCEL::_internal_m_type() const {
  return static_cast<::pbnet::eplays>(_impl_.m_type_);
}
inline void PROBUFF_NET_MEMBER_MATCHING_CANCEL::_internal_set_m_type(::pbnet::eplays value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_type_ = value;
}

// optional .pbnet.etype_matching_cancel m_canceltype = 2;
inline bool PROBUFF_NET_MEMBER_MATCHING_CANCEL::has_m_canceltype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PROBUFF_NET_MEMBER_MATCHING_CANCEL::clear_m_canceltype() {
  _impl_.m_canceltype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::pbnet::etype_matching_cancel PROBUFF_NET_MEMBER_MATCHING_CANCEL::m_canceltype() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL.m_canceltype)
  return _internal_m_canceltype();
}
inline void PROBUFF_NET_MEMBER_MATCHING_CANCEL::set_m_canceltype(::pbnet::etype_matching_cancel value) {
   _internal_set_m_canceltype(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL.m_canceltype)
}
inline ::pbnet::etype_matching_cancel PROBUFF_NET_MEMBER_MATCHING_CANCEL::_internal_m_canceltype() const {
  return static_cast<::pbnet::etype_matching_cancel>(_impl_.m_canceltype_);
}
inline void PROBUFF_NET_MEMBER_MATCHING_CANCEL::_internal_set_m_canceltype(::pbnet::etype_matching_cancel value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.m_canceltype_ = value;
}

// repeated int64 m_cancelmember = 3;
inline int PROBUFF_NET_MEMBER_MATCHING_CANCEL::_internal_m_cancelmember_size() const {
  return _impl_.m_cancelmember_.size();
}
inline int PROBUFF_NET_MEMBER_MATCHING_CANCEL::m_cancelmember_size() const {
  return _internal_m_cancelmember_size();
}
inline void PROBUFF_NET_MEMBER_MATCHING_CANCEL::clear_m_cancelmember() {
  _internal_mutable_m_cancelmember()->Clear();
}
inline ::int64_t PROBUFF_NET_MEMBER_MATCHING_CANCEL::m_cancelmember(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL.m_cancelmember)
  return _internal_m_cancelmember(index);
}
inline void PROBUFF_NET_MEMBER_MATCHING_CANCEL::set_m_cancelmember(int index, ::int64_t value) {
  _internal_mutable_m_cancelmember()->Set(index, value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL.m_cancelmember)
}
inline void PROBUFF_NET_MEMBER_MATCHING_CANCEL::add_m_cancelmember(::int64_t value) {
  _internal_add_m_cancelmember(value);
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL.m_cancelmember)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& PROBUFF_NET_MEMBER_MATCHING_CANCEL::m_cancelmember() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL.m_cancelmember)
  return _internal_m_cancelmember();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* PROBUFF_NET_MEMBER_MATCHING_CANCEL::mutable_m_cancelmember() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL.m_cancelmember)
  return _internal_mutable_m_cancelmember();
}

inline ::int64_t PROBUFF_NET_MEMBER_MATCHING_CANCEL::_internal_m_cancelmember(int index) const {
  return _internal_m_cancelmember().Get(index);
}
inline void PROBUFF_NET_MEMBER_MATCHING_CANCEL::_internal_add_m_cancelmember(::int64_t value) {
  _internal_mutable_m_cancelmember()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& PROBUFF_NET_MEMBER_MATCHING_CANCEL::_internal_m_cancelmember() const {
  return _impl_.m_cancelmember_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* PROBUFF_NET_MEMBER_MATCHING_CANCEL::_internal_mutable_m_cancelmember() {
  return &_impl_.m_cancelmember_;
}

// -------------------------------------------------------------------

// PROBUFF_NET_MATCHING_WAITCONFIRM

// optional .pbnet.eplays m_type = 1;
inline bool PROBUFF_NET_MATCHING_WAITCONFIRM::has_m_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PROBUFF_NET_MATCHING_WAITCONFIRM::clear_m_type() {
  _impl_.m_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::pbnet::eplays PROBUFF_NET_MATCHING_WAITCONFIRM::m_type() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM.m_type)
  return _internal_m_type();
}
inline void PROBUFF_NET_MATCHING_WAITCONFIRM::set_m_type(::pbnet::eplays value) {
   _internal_set_m_type(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM.m_type)
}
inline ::pbnet::eplays PROBUFF_NET_MATCHING_WAITCONFIRM::_internal_m_type() const {
  return static_cast<::pbnet::eplays>(_impl_.m_type_);
}
inline void PROBUFF_NET_MATCHING_WAITCONFIRM::_internal_set_m_type(::pbnet::eplays value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_type_ = value;
}

// optional int32 m_roomid = 2;
inline bool PROBUFF_NET_MATCHING_WAITCONFIRM::has_m_roomid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PROBUFF_NET_MATCHING_WAITCONFIRM::clear_m_roomid() {
  _impl_.m_roomid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t PROBUFF_NET_MATCHING_WAITCONFIRM::m_roomid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM.m_roomid)
  return _internal_m_roomid();
}
inline void PROBUFF_NET_MATCHING_WAITCONFIRM::set_m_roomid(::int32_t value) {
  _internal_set_m_roomid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM.m_roomid)
}
inline ::int32_t PROBUFF_NET_MATCHING_WAITCONFIRM::_internal_m_roomid() const {
  return _impl_.m_roomid_;
}
inline void PROBUFF_NET_MATCHING_WAITCONFIRM::_internal_set_m_roomid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.m_roomid_ = value;
}

// -------------------------------------------------------------------

// PROBUFF_NET_MATCHING_CONFIRM

// optional .pbnet.eplays m_type = 1;
inline bool PROBUFF_NET_MATCHING_CONFIRM::has_m_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PROBUFF_NET_MATCHING_CONFIRM::clear_m_type() {
  _impl_.m_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::pbnet::eplays PROBUFF_NET_MATCHING_CONFIRM::m_type() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_CONFIRM.m_type)
  return _internal_m_type();
}
inline void PROBUFF_NET_MATCHING_CONFIRM::set_m_type(::pbnet::eplays value) {
   _internal_set_m_type(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING_CONFIRM.m_type)
}
inline ::pbnet::eplays PROBUFF_NET_MATCHING_CONFIRM::_internal_m_type() const {
  return static_cast<::pbnet::eplays>(_impl_.m_type_);
}
inline void PROBUFF_NET_MATCHING_CONFIRM::_internal_set_m_type(::pbnet::eplays value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_type_ = value;
}

// optional int32 m_roomid = 2;
inline bool PROBUFF_NET_MATCHING_CONFIRM::has_m_roomid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PROBUFF_NET_MATCHING_CONFIRM::clear_m_roomid() {
  _impl_.m_roomid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t PROBUFF_NET_MATCHING_CONFIRM::m_roomid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_CONFIRM.m_roomid)
  return _internal_m_roomid();
}
inline void PROBUFF_NET_MATCHING_CONFIRM::set_m_roomid(::int32_t value) {
  _internal_set_m_roomid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING_CONFIRM.m_roomid)
}
inline ::int32_t PROBUFF_NET_MATCHING_CONFIRM::_internal_m_roomid() const {
  return _impl_.m_roomid_;
}
inline void PROBUFF_NET_MATCHING_CONFIRM::_internal_set_m_roomid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.m_roomid_ = value;
}

// -------------------------------------------------------------------

// PROBUFF_NET_MATCHING_CONFIRM_RESPONSE

// optional .pbnet.eplays m_type = 1;
inline bool PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::has_m_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::clear_m_type() {
  _impl_.m_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::pbnet::eplays PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::m_type() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE.m_type)
  return _internal_m_type();
}
inline void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::set_m_type(::pbnet::eplays value) {
   _internal_set_m_type(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE.m_type)
}
inline ::pbnet::eplays PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::_internal_m_type() const {
  return static_cast<::pbnet::eplays>(_impl_.m_type_);
}
inline void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::_internal_set_m_type(::pbnet::eplays value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_type_ = value;
}

// optional int32 m_roomid = 2;
inline bool PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::has_m_roomid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::clear_m_roomid() {
  _impl_.m_roomid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::m_roomid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE.m_roomid)
  return _internal_m_roomid();
}
inline void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::set_m_roomid(::int32_t value) {
  _internal_set_m_roomid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE.m_roomid)
}
inline ::int32_t PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::_internal_m_roomid() const {
  return _impl_.m_roomid_;
}
inline void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::_internal_set_m_roomid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.m_roomid_ = value;
}

// optional .pbnet.ematching_confirm_stat m_stat = 3;
inline bool PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::has_m_stat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::clear_m_stat() {
  _impl_.m_stat_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::pbnet::ematching_confirm_stat PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::m_stat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE.m_stat)
  return _internal_m_stat();
}
inline void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::set_m_stat(::pbnet::ematching_confirm_stat value) {
   _internal_set_m_stat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE.m_stat)
}
inline ::pbnet::ematching_confirm_stat PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::_internal_m_stat() const {
  return static_cast<::pbnet::ematching_confirm_stat>(_impl_.m_stat_);
}
inline void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::_internal_set_m_stat(::pbnet::ematching_confirm_stat value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.m_stat_ = value;
}

// -------------------------------------------------------------------

// PROBUFF_NET_SYNC_MATCHING_CONFIRM

// optional .pbnet.eplays m_type = 1;
inline bool PROBUFF_NET_SYNC_MATCHING_CONFIRM::has_m_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PROBUFF_NET_SYNC_MATCHING_CONFIRM::clear_m_type() {
  _impl_.m_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::pbnet::eplays PROBUFF_NET_SYNC_MATCHING_CONFIRM::m_type() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM.m_type)
  return _internal_m_type();
}
inline void PROBUFF_NET_SYNC_MATCHING_CONFIRM::set_m_type(::pbnet::eplays value) {
   _internal_set_m_type(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM.m_type)
}
inline ::pbnet::eplays PROBUFF_NET_SYNC_MATCHING_CONFIRM::_internal_m_type() const {
  return static_cast<::pbnet::eplays>(_impl_.m_type_);
}
inline void PROBUFF_NET_SYNC_MATCHING_CONFIRM::_internal_set_m_type(::pbnet::eplays value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_type_ = value;
}

// optional int32 m_roomid = 2;
inline bool PROBUFF_NET_SYNC_MATCHING_CONFIRM::has_m_roomid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PROBUFF_NET_SYNC_MATCHING_CONFIRM::clear_m_roomid() {
  _impl_.m_roomid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t PROBUFF_NET_SYNC_MATCHING_CONFIRM::m_roomid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM.m_roomid)
  return _internal_m_roomid();
}
inline void PROBUFF_NET_SYNC_MATCHING_CONFIRM::set_m_roomid(::int32_t value) {
  _internal_set_m_roomid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM.m_roomid)
}
inline ::int32_t PROBUFF_NET_SYNC_MATCHING_CONFIRM::_internal_m_roomid() const {
  return _impl_.m_roomid_;
}
inline void PROBUFF_NET_SYNC_MATCHING_CONFIRM::_internal_set_m_roomid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.m_roomid_ = value;
}

// repeated int64 m_roleid = 3;
inline int PROBUFF_NET_SYNC_MATCHING_CONFIRM::_internal_m_roleid_size() const {
  return _impl_.m_roleid_.size();
}
inline int PROBUFF_NET_SYNC_MATCHING_CONFIRM::m_roleid_size() const {
  return _internal_m_roleid_size();
}
inline void PROBUFF_NET_SYNC_MATCHING_CONFIRM::clear_m_roleid() {
  _internal_mutable_m_roleid()->Clear();
}
inline ::int64_t PROBUFF_NET_SYNC_MATCHING_CONFIRM::m_roleid(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM.m_roleid)
  return _internal_m_roleid(index);
}
inline void PROBUFF_NET_SYNC_MATCHING_CONFIRM::set_m_roleid(int index, ::int64_t value) {
  _internal_mutable_m_roleid()->Set(index, value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM.m_roleid)
}
inline void PROBUFF_NET_SYNC_MATCHING_CONFIRM::add_m_roleid(::int64_t value) {
  _internal_add_m_roleid(value);
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM.m_roleid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& PROBUFF_NET_SYNC_MATCHING_CONFIRM::m_roleid() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM.m_roleid)
  return _internal_m_roleid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* PROBUFF_NET_SYNC_MATCHING_CONFIRM::mutable_m_roleid() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM.m_roleid)
  return _internal_mutable_m_roleid();
}

inline ::int64_t PROBUFF_NET_SYNC_MATCHING_CONFIRM::_internal_m_roleid(int index) const {
  return _internal_m_roleid().Get(index);
}
inline void PROBUFF_NET_SYNC_MATCHING_CONFIRM::_internal_add_m_roleid(::int64_t value) {
  _internal_mutable_m_roleid()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& PROBUFF_NET_SYNC_MATCHING_CONFIRM::_internal_m_roleid() const {
  return _impl_.m_roleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* PROBUFF_NET_SYNC_MATCHING_CONFIRM::_internal_mutable_m_roleid() {
  return &_impl_.m_roleid_;
}

// -------------------------------------------------------------------

// PROBUFF_NET_MATCHING_SYNC

// optional .pbnet.eplays m_type = 1;
inline bool PROBUFF_NET_MATCHING_SYNC::has_m_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PROBUFF_NET_MATCHING_SYNC::clear_m_type() {
  _impl_.m_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::pbnet::eplays PROBUFF_NET_MATCHING_SYNC::m_type() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_SYNC.m_type)
  return _internal_m_type();
}
inline void PROBUFF_NET_MATCHING_SYNC::set_m_type(::pbnet::eplays value) {
   _internal_set_m_type(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING_SYNC.m_type)
}
inline ::pbnet::eplays PROBUFF_NET_MATCHING_SYNC::_internal_m_type() const {
  return static_cast<::pbnet::eplays>(_impl_.m_type_);
}
inline void PROBUFF_NET_MATCHING_SYNC::_internal_set_m_type(::pbnet::eplays value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_type_ = value;
}

// optional int32 m_roomid = 2;
inline bool PROBUFF_NET_MATCHING_SYNC::has_m_roomid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PROBUFF_NET_MATCHING_SYNC::clear_m_roomid() {
  _impl_.m_roomid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t PROBUFF_NET_MATCHING_SYNC::m_roomid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_SYNC.m_roomid)
  return _internal_m_roomid();
}
inline void PROBUFF_NET_MATCHING_SYNC::set_m_roomid(::int32_t value) {
  _internal_set_m_roomid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING_SYNC.m_roomid)
}
inline ::int32_t PROBUFF_NET_MATCHING_SYNC::_internal_m_roomid() const {
  return _impl_.m_roomid_;
}
inline void PROBUFF_NET_MATCHING_SYNC::_internal_set_m_roomid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.m_roomid_ = value;
}

// repeated .pbnet.MATCHING_MEMBER m_member = 3;
inline int PROBUFF_NET_MATCHING_SYNC::_internal_m_member_size() const {
  return _impl_.m_member_.size();
}
inline int PROBUFF_NET_MATCHING_SYNC::m_member_size() const {
  return _internal_m_member_size();
}
inline void PROBUFF_NET_MATCHING_SYNC::clear_m_member() {
  _internal_mutable_m_member()->Clear();
}
inline ::pbnet::MATCHING_MEMBER* PROBUFF_NET_MATCHING_SYNC::mutable_m_member(int index) {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_MATCHING_SYNC.m_member)
  return _internal_mutable_m_member()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::MATCHING_MEMBER >*
PROBUFF_NET_MATCHING_SYNC::mutable_m_member() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_MATCHING_SYNC.m_member)
  return _internal_mutable_m_member();
}
inline const ::pbnet::MATCHING_MEMBER& PROBUFF_NET_MATCHING_SYNC::_internal_m_member(int index) const {
  return _internal_m_member().Get(index);
}
inline const ::pbnet::MATCHING_MEMBER& PROBUFF_NET_MATCHING_SYNC::m_member(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_SYNC.m_member)
  return _internal_m_member(index);
}
inline ::pbnet::MATCHING_MEMBER* PROBUFF_NET_MATCHING_SYNC::_internal_add_m_member() {
  return _internal_mutable_m_member()->Add();
}
inline ::pbnet::MATCHING_MEMBER* PROBUFF_NET_MATCHING_SYNC::add_m_member() {
  ::pbnet::MATCHING_MEMBER* _add = _internal_add_m_member();
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_MATCHING_SYNC.m_member)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::MATCHING_MEMBER >&
PROBUFF_NET_MATCHING_SYNC::m_member() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_MATCHING_SYNC.m_member)
  return _internal_m_member();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::pbnet::MATCHING_MEMBER>&
PROBUFF_NET_MATCHING_SYNC::_internal_m_member() const {
  return _impl_.m_member_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::pbnet::MATCHING_MEMBER>*
PROBUFF_NET_MATCHING_SYNC::_internal_mutable_m_member() {
  return &_impl_.m_member_;
}

// -------------------------------------------------------------------

// PROBUFF_NET_MATCHING_SUCCESS_RESPONSE

// optional .pbnet.eplays m_type = 1;
inline bool PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::has_m_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::clear_m_type() {
  _impl_.m_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::pbnet::eplays PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::m_type() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE.m_type)
  return _internal_m_type();
}
inline void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::set_m_type(::pbnet::eplays value) {
   _internal_set_m_type(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE.m_type)
}
inline ::pbnet::eplays PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::_internal_m_type() const {
  return static_cast<::pbnet::eplays>(_impl_.m_type_);
}
inline void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::_internal_set_m_type(::pbnet::eplays value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_type_ = value;
}

// optional int32 m_roomid = 2;
inline bool PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::has_m_roomid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::clear_m_roomid() {
  _impl_.m_roomid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::m_roomid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE.m_roomid)
  return _internal_m_roomid();
}
inline void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::set_m_roomid(::int32_t value) {
  _internal_set_m_roomid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE.m_roomid)
}
inline ::int32_t PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::_internal_m_roomid() const {
  return _impl_.m_roomid_;
}
inline void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::_internal_set_m_roomid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.m_roomid_ = value;
}

// optional int64 m_playsactorid = 3;
inline bool PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::has_m_playsactorid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::clear_m_playsactorid() {
  _impl_.m_playsactorid_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::m_playsactorid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE.m_playsactorid)
  return _internal_m_playsactorid();
}
inline void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::set_m_playsactorid(::int64_t value) {
  _internal_set_m_playsactorid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE.m_playsactorid)
}
inline ::int64_t PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::_internal_m_playsactorid() const {
  return _impl_.m_playsactorid_;
}
inline void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::_internal_set_m_playsactorid(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.m_playsactorid_ = value;
}

// -------------------------------------------------------------------

// PROBUFF_NET_MATCHING_SUCCESS

// optional .pbnet.eplays m_type = 1;
inline bool PROBUFF_NET_MATCHING_SUCCESS::has_m_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PROBUFF_NET_MATCHING_SUCCESS::clear_m_type() {
  _impl_.m_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::pbnet::eplays PROBUFF_NET_MATCHING_SUCCESS::m_type() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_SUCCESS.m_type)
  return _internal_m_type();
}
inline void PROBUFF_NET_MATCHING_SUCCESS::set_m_type(::pbnet::eplays value) {
   _internal_set_m_type(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING_SUCCESS.m_type)
}
inline ::pbnet::eplays PROBUFF_NET_MATCHING_SUCCESS::_internal_m_type() const {
  return static_cast<::pbnet::eplays>(_impl_.m_type_);
}
inline void PROBUFF_NET_MATCHING_SUCCESS::_internal_set_m_type(::pbnet::eplays value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_type_ = value;
}

// optional int32 m_roomid = 2;
inline bool PROBUFF_NET_MATCHING_SUCCESS::has_m_roomid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PROBUFF_NET_MATCHING_SUCCESS::clear_m_roomid() {
  _impl_.m_roomid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t PROBUFF_NET_MATCHING_SUCCESS::m_roomid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_SUCCESS.m_roomid)
  return _internal_m_roomid();
}
inline void PROBUFF_NET_MATCHING_SUCCESS::set_m_roomid(::int32_t value) {
  _internal_set_m_roomid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING_SUCCESS.m_roomid)
}
inline ::int32_t PROBUFF_NET_MATCHING_SUCCESS::_internal_m_roomid() const {
  return _impl_.m_roomid_;
}
inline void PROBUFF_NET_MATCHING_SUCCESS::_internal_set_m_roomid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.m_roomid_ = value;
}

// repeated .pbnet.MATCHING_MEMBER m_member = 3;
inline int PROBUFF_NET_MATCHING_SUCCESS::_internal_m_member_size() const {
  return _impl_.m_member_.size();
}
inline int PROBUFF_NET_MATCHING_SUCCESS::m_member_size() const {
  return _internal_m_member_size();
}
inline void PROBUFF_NET_MATCHING_SUCCESS::clear_m_member() {
  _internal_mutable_m_member()->Clear();
}
inline ::pbnet::MATCHING_MEMBER* PROBUFF_NET_MATCHING_SUCCESS::mutable_m_member(int index) {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_MATCHING_SUCCESS.m_member)
  return _internal_mutable_m_member()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::MATCHING_MEMBER >*
PROBUFF_NET_MATCHING_SUCCESS::mutable_m_member() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_MATCHING_SUCCESS.m_member)
  return _internal_mutable_m_member();
}
inline const ::pbnet::MATCHING_MEMBER& PROBUFF_NET_MATCHING_SUCCESS::_internal_m_member(int index) const {
  return _internal_m_member().Get(index);
}
inline const ::pbnet::MATCHING_MEMBER& PROBUFF_NET_MATCHING_SUCCESS::m_member(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_SUCCESS.m_member)
  return _internal_m_member(index);
}
inline ::pbnet::MATCHING_MEMBER* PROBUFF_NET_MATCHING_SUCCESS::_internal_add_m_member() {
  return _internal_mutable_m_member()->Add();
}
inline ::pbnet::MATCHING_MEMBER* PROBUFF_NET_MATCHING_SUCCESS::add_m_member() {
  ::pbnet::MATCHING_MEMBER* _add = _internal_add_m_member();
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_MATCHING_SUCCESS.m_member)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::MATCHING_MEMBER >&
PROBUFF_NET_MATCHING_SUCCESS::m_member() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_MATCHING_SUCCESS.m_member)
  return _internal_m_member();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::pbnet::MATCHING_MEMBER>&
PROBUFF_NET_MATCHING_SUCCESS::_internal_m_member() const {
  return _impl_.m_member_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::pbnet::MATCHING_MEMBER>*
PROBUFF_NET_MATCHING_SUCCESS::_internal_mutable_m_member() {
  return &_impl_.m_member_;
}

// optional int32 m_dataid = 4;
inline bool PROBUFF_NET_MATCHING_SUCCESS::has_m_dataid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void PROBUFF_NET_MATCHING_SUCCESS::clear_m_dataid() {
  _impl_.m_dataid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t PROBUFF_NET_MATCHING_SUCCESS::m_dataid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_SUCCESS.m_dataid)
  return _internal_m_dataid();
}
inline void PROBUFF_NET_MATCHING_SUCCESS::set_m_dataid(::int32_t value) {
  _internal_set_m_dataid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING_SUCCESS.m_dataid)
}
inline ::int32_t PROBUFF_NET_MATCHING_SUCCESS::_internal_m_dataid() const {
  return _impl_.m_dataid_;
}
inline void PROBUFF_NET_MATCHING_SUCCESS::_internal_set_m_dataid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.m_dataid_ = value;
}

// -------------------------------------------------------------------

// PROBUFF_NET_ENTER_PLAYS

// optional .pbnet.eplays m_type = 1;
inline bool PROBUFF_NET_ENTER_PLAYS::has_m_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PROBUFF_NET_ENTER_PLAYS::clear_m_type() {
  _impl_.m_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::pbnet::eplays PROBUFF_NET_ENTER_PLAYS::m_type() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ENTER_PLAYS.m_type)
  return _internal_m_type();
}
inline void PROBUFF_NET_ENTER_PLAYS::set_m_type(::pbnet::eplays value) {
   _internal_set_m_type(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ENTER_PLAYS.m_type)
}
inline ::pbnet::eplays PROBUFF_NET_ENTER_PLAYS::_internal_m_type() const {
  return static_cast<::pbnet::eplays>(_impl_.m_type_);
}
inline void PROBUFF_NET_ENTER_PLAYS::_internal_set_m_type(::pbnet::eplays value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_type_ = value;
}

// optional int32 m_roomid = 2;
inline bool PROBUFF_NET_ENTER_PLAYS::has_m_roomid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PROBUFF_NET_ENTER_PLAYS::clear_m_roomid() {
  _impl_.m_roomid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t PROBUFF_NET_ENTER_PLAYS::m_roomid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ENTER_PLAYS.m_roomid)
  return _internal_m_roomid();
}
inline void PROBUFF_NET_ENTER_PLAYS::set_m_roomid(::int32_t value) {
  _internal_set_m_roomid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ENTER_PLAYS.m_roomid)
}
inline ::int32_t PROBUFF_NET_ENTER_PLAYS::_internal_m_roomid() const {
  return _impl_.m_roomid_;
}
inline void PROBUFF_NET_ENTER_PLAYS::_internal_set_m_roomid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.m_roomid_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace pbnet


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::pbnet::enum_logic_chat> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::pbnet::enum_logic_chat>() {
  return ::pbnet::enum_logic_chat_descriptor();
}
template <>
struct is_proto_enum<::pbnet::eunit> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::pbnet::eunit>() {
  return ::pbnet::eunit_descriptor();
}
template <>
struct is_proto_enum<::pbnet::eplays> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::pbnet::eplays>() {
  return ::pbnet::eplays_descriptor();
}
template <>
struct is_proto_enum<::pbnet::ematching_cancel_stat> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::pbnet::ematching_cancel_stat>() {
  return ::pbnet::ematching_cancel_stat_descriptor();
}
template <>
struct is_proto_enum<::pbnet::etype_matching_cancel> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::pbnet::etype_matching_cancel>() {
  return ::pbnet::etype_matching_cancel_descriptor();
}
template <>
struct is_proto_enum<::pbnet::ematching_confirm_stat> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::pbnet::ematching_confirm_stat>() {
  return ::pbnet::ematching_confirm_stat_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_net_2eproto_2epb_2eh
