// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gm_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gm_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gm_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gm_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gm_2eproto;
namespace GM {
class PROBUFF_GM_ADD_NOTICE;
class PROBUFF_GM_ADD_NOTICEDefaultTypeInternal;
extern PROBUFF_GM_ADD_NOTICEDefaultTypeInternal _PROBUFF_GM_ADD_NOTICE_default_instance_;
class PROBUFF_GM_ADD_NOTICE_RESPONSE;
class PROBUFF_GM_ADD_NOTICE_RESPONSEDefaultTypeInternal;
extern PROBUFF_GM_ADD_NOTICE_RESPONSEDefaultTypeInternal _PROBUFF_GM_ADD_NOTICE_RESPONSE_default_instance_;
class PROBUFF_GM_DEL_NOTICE;
class PROBUFF_GM_DEL_NOTICEDefaultTypeInternal;
extern PROBUFF_GM_DEL_NOTICEDefaultTypeInternal _PROBUFF_GM_DEL_NOTICE_default_instance_;
class PROBUFF_GM_DEL_NOTICE_RESPONSE;
class PROBUFF_GM_DEL_NOTICE_RESPONSEDefaultTypeInternal;
extern PROBUFF_GM_DEL_NOTICE_RESPONSEDefaultTypeInternal _PROBUFF_GM_DEL_NOTICE_RESPONSE_default_instance_;
class PROBUFF_GM_GET_NOTICE;
class PROBUFF_GM_GET_NOTICEDefaultTypeInternal;
extern PROBUFF_GM_GET_NOTICEDefaultTypeInternal _PROBUFF_GM_GET_NOTICE_default_instance_;
class PROBUFF_GM_GET_NOTICE_RESPONSE;
class PROBUFF_GM_GET_NOTICE_RESPONSEDefaultTypeInternal;
extern PROBUFF_GM_GET_NOTICE_RESPONSEDefaultTypeInternal _PROBUFF_GM_GET_NOTICE_RESPONSE_default_instance_;
class PROBUFF_GM_RECHARGE;
class PROBUFF_GM_RECHARGEDefaultTypeInternal;
extern PROBUFF_GM_RECHARGEDefaultTypeInternal _PROBUFF_GM_RECHARGE_default_instance_;
class PROBUFF_GM_RECHARGE_RESPONSE;
class PROBUFF_GM_RECHARGE_RESPONSEDefaultTypeInternal;
extern PROBUFF_GM_RECHARGE_RESPONSEDefaultTypeInternal _PROBUFF_GM_RECHARGE_RESPONSE_default_instance_;
class gm_notice;
class gm_noticeDefaultTypeInternal;
extern gm_noticeDefaultTypeInternal _gm_notice_default_instance_;
}  // namespace GM
PROTOBUF_NAMESPACE_OPEN
template<> ::GM::PROBUFF_GM_ADD_NOTICE* Arena::CreateMaybeMessage<::GM::PROBUFF_GM_ADD_NOTICE>(Arena*);
template<> ::GM::PROBUFF_GM_ADD_NOTICE_RESPONSE* Arena::CreateMaybeMessage<::GM::PROBUFF_GM_ADD_NOTICE_RESPONSE>(Arena*);
template<> ::GM::PROBUFF_GM_DEL_NOTICE* Arena::CreateMaybeMessage<::GM::PROBUFF_GM_DEL_NOTICE>(Arena*);
template<> ::GM::PROBUFF_GM_DEL_NOTICE_RESPONSE* Arena::CreateMaybeMessage<::GM::PROBUFF_GM_DEL_NOTICE_RESPONSE>(Arena*);
template<> ::GM::PROBUFF_GM_GET_NOTICE* Arena::CreateMaybeMessage<::GM::PROBUFF_GM_GET_NOTICE>(Arena*);
template<> ::GM::PROBUFF_GM_GET_NOTICE_RESPONSE* Arena::CreateMaybeMessage<::GM::PROBUFF_GM_GET_NOTICE_RESPONSE>(Arena*);
template<> ::GM::PROBUFF_GM_RECHARGE* Arena::CreateMaybeMessage<::GM::PROBUFF_GM_RECHARGE>(Arena*);
template<> ::GM::PROBUFF_GM_RECHARGE_RESPONSE* Arena::CreateMaybeMessage<::GM::PROBUFF_GM_RECHARGE_RESPONSE>(Arena*);
template<> ::GM::gm_notice* Arena::CreateMaybeMessage<::GM::gm_notice>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace GM {

// ===================================================================

class PROBUFF_GM_GET_NOTICE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GM.PROBUFF_GM_GET_NOTICE) */ {
 public:
  inline PROBUFF_GM_GET_NOTICE() : PROBUFF_GM_GET_NOTICE(nullptr) {}
  virtual ~PROBUFF_GM_GET_NOTICE();

  PROBUFF_GM_GET_NOTICE(const PROBUFF_GM_GET_NOTICE& from);
  PROBUFF_GM_GET_NOTICE(PROBUFF_GM_GET_NOTICE&& from) noexcept
    : PROBUFF_GM_GET_NOTICE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_GM_GET_NOTICE& operator=(const PROBUFF_GM_GET_NOTICE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_GM_GET_NOTICE& operator=(PROBUFF_GM_GET_NOTICE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_GM_GET_NOTICE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_GM_GET_NOTICE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_GM_GET_NOTICE*>(
               &_PROBUFF_GM_GET_NOTICE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PROBUFF_GM_GET_NOTICE& a, PROBUFF_GM_GET_NOTICE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_GM_GET_NOTICE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_GM_GET_NOTICE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_GM_GET_NOTICE* New() const final {
    return CreateMaybeMessage<PROBUFF_GM_GET_NOTICE>(nullptr);
  }

  PROBUFF_GM_GET_NOTICE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_GM_GET_NOTICE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_GM_GET_NOTICE& from);
  void MergeFrom(const PROBUFF_GM_GET_NOTICE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_GM_GET_NOTICE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GM.PROBUFF_GM_GET_NOTICE";
  }
  protected:
  explicit PROBUFF_GM_GET_NOTICE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gm_2eproto);
    return ::descriptor_table_gm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GM.PROBUFF_GM_GET_NOTICE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gm_2eproto;
};
// -------------------------------------------------------------------

class gm_notice PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GM.gm_notice) */ {
 public:
  inline gm_notice() : gm_notice(nullptr) {}
  virtual ~gm_notice();

  gm_notice(const gm_notice& from);
  gm_notice(gm_notice&& from) noexcept
    : gm_notice() {
    *this = ::std::move(from);
  }

  inline gm_notice& operator=(const gm_notice& from) {
    CopyFrom(from);
    return *this;
  }
  inline gm_notice& operator=(gm_notice&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const gm_notice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const gm_notice* internal_default_instance() {
    return reinterpret_cast<const gm_notice*>(
               &_gm_notice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(gm_notice& a, gm_notice& b) {
    a.Swap(&b);
  }
  inline void Swap(gm_notice* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(gm_notice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline gm_notice* New() const final {
    return CreateMaybeMessage<gm_notice>(nullptr);
  }

  gm_notice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<gm_notice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const gm_notice& from);
  void MergeFrom(const gm_notice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(gm_notice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GM.gm_notice";
  }
  protected:
  explicit gm_notice(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gm_2eproto);
    return ::descriptor_table_gm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMNoticeFieldNumber = 2,
    kMIdFieldNumber = 1,
    kMStarttimeFieldNumber = 3,
    kMFinishtimeFieldNumber = 4,
  };
  // string m_notice = 2;
  bool has_m_notice() const;
  private:
  bool _internal_has_m_notice() const;
  public:
  void clear_m_notice();
  const std::string& m_notice() const;
  void set_m_notice(const std::string& value);
  void set_m_notice(std::string&& value);
  void set_m_notice(const char* value);
  void set_m_notice(const char* value, size_t size);
  std::string* mutable_m_notice();
  std::string* release_m_notice();
  void set_allocated_m_notice(std::string* m_notice);
  private:
  const std::string& _internal_m_notice() const;
  void _internal_set_m_notice(const std::string& value);
  std::string* _internal_mutable_m_notice();
  public:

  // int64 m_id = 1;
  bool has_m_id() const;
  private:
  bool _internal_has_m_id() const;
  public:
  void clear_m_id();
  ::PROTOBUF_NAMESPACE_ID::int64 m_id() const;
  void set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_id() const;
  void _internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 m_starttime = 3;
  bool has_m_starttime() const;
  private:
  bool _internal_has_m_starttime() const;
  public:
  void clear_m_starttime();
  ::PROTOBUF_NAMESPACE_ID::int32 m_starttime() const;
  void set_m_starttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_starttime() const;
  void _internal_set_m_starttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_finishtime = 4;
  bool has_m_finishtime() const;
  private:
  bool _internal_has_m_finishtime() const;
  public:
  void clear_m_finishtime();
  ::PROTOBUF_NAMESPACE_ID::int32 m_finishtime() const;
  void set_m_finishtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_finishtime() const;
  void _internal_set_m_finishtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GM.gm_notice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_notice_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_starttime_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_finishtime_;
  friend struct ::TableStruct_gm_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_GM_GET_NOTICE_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GM.PROBUFF_GM_GET_NOTICE_RESPONSE) */ {
 public:
  inline PROBUFF_GM_GET_NOTICE_RESPONSE() : PROBUFF_GM_GET_NOTICE_RESPONSE(nullptr) {}
  virtual ~PROBUFF_GM_GET_NOTICE_RESPONSE();

  PROBUFF_GM_GET_NOTICE_RESPONSE(const PROBUFF_GM_GET_NOTICE_RESPONSE& from);
  PROBUFF_GM_GET_NOTICE_RESPONSE(PROBUFF_GM_GET_NOTICE_RESPONSE&& from) noexcept
    : PROBUFF_GM_GET_NOTICE_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_GM_GET_NOTICE_RESPONSE& operator=(const PROBUFF_GM_GET_NOTICE_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_GM_GET_NOTICE_RESPONSE& operator=(PROBUFF_GM_GET_NOTICE_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_GM_GET_NOTICE_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_GM_GET_NOTICE_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_GM_GET_NOTICE_RESPONSE*>(
               &_PROBUFF_GM_GET_NOTICE_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PROBUFF_GM_GET_NOTICE_RESPONSE& a, PROBUFF_GM_GET_NOTICE_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_GM_GET_NOTICE_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_GM_GET_NOTICE_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_GM_GET_NOTICE_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_GM_GET_NOTICE_RESPONSE>(nullptr);
  }

  PROBUFF_GM_GET_NOTICE_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_GM_GET_NOTICE_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_GM_GET_NOTICE_RESPONSE& from);
  void MergeFrom(const PROBUFF_GM_GET_NOTICE_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_GM_GET_NOTICE_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GM.PROBUFF_GM_GET_NOTICE_RESPONSE";
  }
  protected:
  explicit PROBUFF_GM_GET_NOTICE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gm_2eproto);
    return ::descriptor_table_gm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMNoticeFieldNumber = 3,
  };
  // repeated .GM.gm_notice m_notice = 3;
  int m_notice_size() const;
  private:
  int _internal_m_notice_size() const;
  public:
  void clear_m_notice();
  ::GM::gm_notice* mutable_m_notice(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GM::gm_notice >*
      mutable_m_notice();
  private:
  const ::GM::gm_notice& _internal_m_notice(int index) const;
  ::GM::gm_notice* _internal_add_m_notice();
  public:
  const ::GM::gm_notice& m_notice(int index) const;
  ::GM::gm_notice* add_m_notice();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GM::gm_notice >&
      m_notice() const;

  // @@protoc_insertion_point(class_scope:GM.PROBUFF_GM_GET_NOTICE_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GM::gm_notice > m_notice_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gm_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_GM_ADD_NOTICE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GM.PROBUFF_GM_ADD_NOTICE) */ {
 public:
  inline PROBUFF_GM_ADD_NOTICE() : PROBUFF_GM_ADD_NOTICE(nullptr) {}
  virtual ~PROBUFF_GM_ADD_NOTICE();

  PROBUFF_GM_ADD_NOTICE(const PROBUFF_GM_ADD_NOTICE& from);
  PROBUFF_GM_ADD_NOTICE(PROBUFF_GM_ADD_NOTICE&& from) noexcept
    : PROBUFF_GM_ADD_NOTICE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_GM_ADD_NOTICE& operator=(const PROBUFF_GM_ADD_NOTICE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_GM_ADD_NOTICE& operator=(PROBUFF_GM_ADD_NOTICE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_GM_ADD_NOTICE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_GM_ADD_NOTICE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_GM_ADD_NOTICE*>(
               &_PROBUFF_GM_ADD_NOTICE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PROBUFF_GM_ADD_NOTICE& a, PROBUFF_GM_ADD_NOTICE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_GM_ADD_NOTICE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_GM_ADD_NOTICE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_GM_ADD_NOTICE* New() const final {
    return CreateMaybeMessage<PROBUFF_GM_ADD_NOTICE>(nullptr);
  }

  PROBUFF_GM_ADD_NOTICE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_GM_ADD_NOTICE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_GM_ADD_NOTICE& from);
  void MergeFrom(const PROBUFF_GM_ADD_NOTICE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_GM_ADD_NOTICE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GM.PROBUFF_GM_ADD_NOTICE";
  }
  protected:
  explicit PROBUFF_GM_ADD_NOTICE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gm_2eproto);
    return ::descriptor_table_gm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMNoticeFieldNumber = 3,
  };
  // .GM.gm_notice m_notice = 3;
  bool has_m_notice() const;
  private:
  bool _internal_has_m_notice() const;
  public:
  void clear_m_notice();
  const ::GM::gm_notice& m_notice() const;
  ::GM::gm_notice* release_m_notice();
  ::GM::gm_notice* mutable_m_notice();
  void set_allocated_m_notice(::GM::gm_notice* m_notice);
  private:
  const ::GM::gm_notice& _internal_m_notice() const;
  ::GM::gm_notice* _internal_mutable_m_notice();
  public:
  void unsafe_arena_set_allocated_m_notice(
      ::GM::gm_notice* m_notice);
  ::GM::gm_notice* unsafe_arena_release_m_notice();

  // @@protoc_insertion_point(class_scope:GM.PROBUFF_GM_ADD_NOTICE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::GM::gm_notice* m_notice_;
  friend struct ::TableStruct_gm_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_GM_ADD_NOTICE_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GM.PROBUFF_GM_ADD_NOTICE_RESPONSE) */ {
 public:
  inline PROBUFF_GM_ADD_NOTICE_RESPONSE() : PROBUFF_GM_ADD_NOTICE_RESPONSE(nullptr) {}
  virtual ~PROBUFF_GM_ADD_NOTICE_RESPONSE();

  PROBUFF_GM_ADD_NOTICE_RESPONSE(const PROBUFF_GM_ADD_NOTICE_RESPONSE& from);
  PROBUFF_GM_ADD_NOTICE_RESPONSE(PROBUFF_GM_ADD_NOTICE_RESPONSE&& from) noexcept
    : PROBUFF_GM_ADD_NOTICE_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_GM_ADD_NOTICE_RESPONSE& operator=(const PROBUFF_GM_ADD_NOTICE_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_GM_ADD_NOTICE_RESPONSE& operator=(PROBUFF_GM_ADD_NOTICE_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_GM_ADD_NOTICE_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_GM_ADD_NOTICE_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_GM_ADD_NOTICE_RESPONSE*>(
               &_PROBUFF_GM_ADD_NOTICE_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PROBUFF_GM_ADD_NOTICE_RESPONSE& a, PROBUFF_GM_ADD_NOTICE_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_GM_ADD_NOTICE_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_GM_ADD_NOTICE_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_GM_ADD_NOTICE_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_GM_ADD_NOTICE_RESPONSE>(nullptr);
  }

  PROBUFF_GM_ADD_NOTICE_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_GM_ADD_NOTICE_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_GM_ADD_NOTICE_RESPONSE& from);
  void MergeFrom(const PROBUFF_GM_ADD_NOTICE_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_GM_ADD_NOTICE_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GM.PROBUFF_GM_ADD_NOTICE_RESPONSE";
  }
  protected:
  explicit PROBUFF_GM_ADD_NOTICE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gm_2eproto);
    return ::descriptor_table_gm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMStatFieldNumber = 3,
  };
  // bool m_stat = 3;
  bool has_m_stat() const;
  private:
  bool _internal_has_m_stat() const;
  public:
  void clear_m_stat();
  bool m_stat() const;
  void set_m_stat(bool value);
  private:
  bool _internal_m_stat() const;
  void _internal_set_m_stat(bool value);
  public:

  // @@protoc_insertion_point(class_scope:GM.PROBUFF_GM_ADD_NOTICE_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool m_stat_;
  friend struct ::TableStruct_gm_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_GM_DEL_NOTICE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GM.PROBUFF_GM_DEL_NOTICE) */ {
 public:
  inline PROBUFF_GM_DEL_NOTICE() : PROBUFF_GM_DEL_NOTICE(nullptr) {}
  virtual ~PROBUFF_GM_DEL_NOTICE();

  PROBUFF_GM_DEL_NOTICE(const PROBUFF_GM_DEL_NOTICE& from);
  PROBUFF_GM_DEL_NOTICE(PROBUFF_GM_DEL_NOTICE&& from) noexcept
    : PROBUFF_GM_DEL_NOTICE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_GM_DEL_NOTICE& operator=(const PROBUFF_GM_DEL_NOTICE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_GM_DEL_NOTICE& operator=(PROBUFF_GM_DEL_NOTICE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_GM_DEL_NOTICE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_GM_DEL_NOTICE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_GM_DEL_NOTICE*>(
               &_PROBUFF_GM_DEL_NOTICE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PROBUFF_GM_DEL_NOTICE& a, PROBUFF_GM_DEL_NOTICE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_GM_DEL_NOTICE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_GM_DEL_NOTICE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_GM_DEL_NOTICE* New() const final {
    return CreateMaybeMessage<PROBUFF_GM_DEL_NOTICE>(nullptr);
  }

  PROBUFF_GM_DEL_NOTICE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_GM_DEL_NOTICE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_GM_DEL_NOTICE& from);
  void MergeFrom(const PROBUFF_GM_DEL_NOTICE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_GM_DEL_NOTICE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GM.PROBUFF_GM_DEL_NOTICE";
  }
  protected:
  explicit PROBUFF_GM_DEL_NOTICE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gm_2eproto);
    return ::descriptor_table_gm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMIdFieldNumber = 3,
  };
  // int64 m_id = 3;
  bool has_m_id() const;
  private:
  bool _internal_has_m_id() const;
  public:
  void clear_m_id();
  ::PROTOBUF_NAMESPACE_ID::int64 m_id() const;
  void set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_id() const;
  void _internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:GM.PROBUFF_GM_DEL_NOTICE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_id_;
  friend struct ::TableStruct_gm_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_GM_DEL_NOTICE_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GM.PROBUFF_GM_DEL_NOTICE_RESPONSE) */ {
 public:
  inline PROBUFF_GM_DEL_NOTICE_RESPONSE() : PROBUFF_GM_DEL_NOTICE_RESPONSE(nullptr) {}
  virtual ~PROBUFF_GM_DEL_NOTICE_RESPONSE();

  PROBUFF_GM_DEL_NOTICE_RESPONSE(const PROBUFF_GM_DEL_NOTICE_RESPONSE& from);
  PROBUFF_GM_DEL_NOTICE_RESPONSE(PROBUFF_GM_DEL_NOTICE_RESPONSE&& from) noexcept
    : PROBUFF_GM_DEL_NOTICE_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_GM_DEL_NOTICE_RESPONSE& operator=(const PROBUFF_GM_DEL_NOTICE_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_GM_DEL_NOTICE_RESPONSE& operator=(PROBUFF_GM_DEL_NOTICE_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_GM_DEL_NOTICE_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_GM_DEL_NOTICE_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_GM_DEL_NOTICE_RESPONSE*>(
               &_PROBUFF_GM_DEL_NOTICE_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PROBUFF_GM_DEL_NOTICE_RESPONSE& a, PROBUFF_GM_DEL_NOTICE_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_GM_DEL_NOTICE_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_GM_DEL_NOTICE_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_GM_DEL_NOTICE_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_GM_DEL_NOTICE_RESPONSE>(nullptr);
  }

  PROBUFF_GM_DEL_NOTICE_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_GM_DEL_NOTICE_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_GM_DEL_NOTICE_RESPONSE& from);
  void MergeFrom(const PROBUFF_GM_DEL_NOTICE_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_GM_DEL_NOTICE_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GM.PROBUFF_GM_DEL_NOTICE_RESPONSE";
  }
  protected:
  explicit PROBUFF_GM_DEL_NOTICE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gm_2eproto);
    return ::descriptor_table_gm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMStatFieldNumber = 3,
  };
  // bool m_stat = 3;
  bool has_m_stat() const;
  private:
  bool _internal_has_m_stat() const;
  public:
  void clear_m_stat();
  bool m_stat() const;
  void set_m_stat(bool value);
  private:
  bool _internal_m_stat() const;
  void _internal_set_m_stat(bool value);
  public:

  // @@protoc_insertion_point(class_scope:GM.PROBUFF_GM_DEL_NOTICE_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool m_stat_;
  friend struct ::TableStruct_gm_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_GM_RECHARGE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GM.PROBUFF_GM_RECHARGE) */ {
 public:
  inline PROBUFF_GM_RECHARGE() : PROBUFF_GM_RECHARGE(nullptr) {}
  virtual ~PROBUFF_GM_RECHARGE();

  PROBUFF_GM_RECHARGE(const PROBUFF_GM_RECHARGE& from);
  PROBUFF_GM_RECHARGE(PROBUFF_GM_RECHARGE&& from) noexcept
    : PROBUFF_GM_RECHARGE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_GM_RECHARGE& operator=(const PROBUFF_GM_RECHARGE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_GM_RECHARGE& operator=(PROBUFF_GM_RECHARGE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_GM_RECHARGE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_GM_RECHARGE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_GM_RECHARGE*>(
               &_PROBUFF_GM_RECHARGE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PROBUFF_GM_RECHARGE& a, PROBUFF_GM_RECHARGE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_GM_RECHARGE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_GM_RECHARGE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_GM_RECHARGE* New() const final {
    return CreateMaybeMessage<PROBUFF_GM_RECHARGE>(nullptr);
  }

  PROBUFF_GM_RECHARGE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_GM_RECHARGE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_GM_RECHARGE& from);
  void MergeFrom(const PROBUFF_GM_RECHARGE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_GM_RECHARGE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GM.PROBUFF_GM_RECHARGE";
  }
  protected:
  explicit PROBUFF_GM_RECHARGE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gm_2eproto);
    return ::descriptor_table_gm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMOrderidFieldNumber = 3,
    kMRechargeidFieldNumber = 1,
    kMRoleidFieldNumber = 2,
  };
  // string m_orderid = 3;
  bool has_m_orderid() const;
  private:
  bool _internal_has_m_orderid() const;
  public:
  void clear_m_orderid();
  const std::string& m_orderid() const;
  void set_m_orderid(const std::string& value);
  void set_m_orderid(std::string&& value);
  void set_m_orderid(const char* value);
  void set_m_orderid(const char* value, size_t size);
  std::string* mutable_m_orderid();
  std::string* release_m_orderid();
  void set_allocated_m_orderid(std::string* m_orderid);
  private:
  const std::string& _internal_m_orderid() const;
  void _internal_set_m_orderid(const std::string& value);
  std::string* _internal_mutable_m_orderid();
  public:

  // int64 m_rechargeid = 1;
  bool has_m_rechargeid() const;
  private:
  bool _internal_has_m_rechargeid() const;
  public:
  void clear_m_rechargeid();
  ::PROTOBUF_NAMESPACE_ID::int64 m_rechargeid() const;
  void set_m_rechargeid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_rechargeid() const;
  void _internal_set_m_rechargeid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 m_roleid = 2;
  bool has_m_roleid() const;
  private:
  bool _internal_has_m_roleid() const;
  public:
  void clear_m_roleid();
  ::PROTOBUF_NAMESPACE_ID::int64 m_roleid() const;
  void set_m_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_roleid() const;
  void _internal_set_m_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:GM.PROBUFF_GM_RECHARGE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_orderid_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_rechargeid_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_roleid_;
  friend struct ::TableStruct_gm_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_GM_RECHARGE_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GM.PROBUFF_GM_RECHARGE_RESPONSE) */ {
 public:
  inline PROBUFF_GM_RECHARGE_RESPONSE() : PROBUFF_GM_RECHARGE_RESPONSE(nullptr) {}
  virtual ~PROBUFF_GM_RECHARGE_RESPONSE();

  PROBUFF_GM_RECHARGE_RESPONSE(const PROBUFF_GM_RECHARGE_RESPONSE& from);
  PROBUFF_GM_RECHARGE_RESPONSE(PROBUFF_GM_RECHARGE_RESPONSE&& from) noexcept
    : PROBUFF_GM_RECHARGE_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_GM_RECHARGE_RESPONSE& operator=(const PROBUFF_GM_RECHARGE_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_GM_RECHARGE_RESPONSE& operator=(PROBUFF_GM_RECHARGE_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_GM_RECHARGE_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_GM_RECHARGE_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_GM_RECHARGE_RESPONSE*>(
               &_PROBUFF_GM_RECHARGE_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PROBUFF_GM_RECHARGE_RESPONSE& a, PROBUFF_GM_RECHARGE_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_GM_RECHARGE_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_GM_RECHARGE_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_GM_RECHARGE_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_GM_RECHARGE_RESPONSE>(nullptr);
  }

  PROBUFF_GM_RECHARGE_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_GM_RECHARGE_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_GM_RECHARGE_RESPONSE& from);
  void MergeFrom(const PROBUFF_GM_RECHARGE_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_GM_RECHARGE_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GM.PROBUFF_GM_RECHARGE_RESPONSE";
  }
  protected:
  explicit PROBUFF_GM_RECHARGE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gm_2eproto);
    return ::descriptor_table_gm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMOrderidFieldNumber = 3,
    kMRoleidFieldNumber = 2,
    kMRechargeidFieldNumber = 1,
    kMStatFieldNumber = 4,
  };
  // string m_orderid = 3;
  bool has_m_orderid() const;
  private:
  bool _internal_has_m_orderid() const;
  public:
  void clear_m_orderid();
  const std::string& m_orderid() const;
  void set_m_orderid(const std::string& value);
  void set_m_orderid(std::string&& value);
  void set_m_orderid(const char* value);
  void set_m_orderid(const char* value, size_t size);
  std::string* mutable_m_orderid();
  std::string* release_m_orderid();
  void set_allocated_m_orderid(std::string* m_orderid);
  private:
  const std::string& _internal_m_orderid() const;
  void _internal_set_m_orderid(const std::string& value);
  std::string* _internal_mutable_m_orderid();
  public:

  // int64 m_roleid = 2;
  bool has_m_roleid() const;
  private:
  bool _internal_has_m_roleid() const;
  public:
  void clear_m_roleid();
  ::PROTOBUF_NAMESPACE_ID::int64 m_roleid() const;
  void set_m_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_roleid() const;
  void _internal_set_m_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool m_rechargeid = 1;
  bool has_m_rechargeid() const;
  private:
  bool _internal_has_m_rechargeid() const;
  public:
  void clear_m_rechargeid();
  bool m_rechargeid() const;
  void set_m_rechargeid(bool value);
  private:
  bool _internal_m_rechargeid() const;
  void _internal_set_m_rechargeid(bool value);
  public:

  // int32 m_stat = 4;
  bool has_m_stat() const;
  private:
  bool _internal_has_m_stat() const;
  public:
  void clear_m_stat();
  ::PROTOBUF_NAMESPACE_ID::int32 m_stat() const;
  void set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_stat() const;
  void _internal_set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GM.PROBUFF_GM_RECHARGE_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_orderid_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_roleid_;
  bool m_rechargeid_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_stat_;
  friend struct ::TableStruct_gm_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PROBUFF_GM_GET_NOTICE

// -------------------------------------------------------------------

// gm_notice

// int64 m_id = 1;
inline bool gm_notice::_internal_has_m_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool gm_notice::has_m_id() const {
  return _internal_has_m_id();
}
inline void gm_notice::clear_m_id() {
  m_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 gm_notice::_internal_m_id() const {
  return m_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 gm_notice::m_id() const {
  // @@protoc_insertion_point(field_get:GM.gm_notice.m_id)
  return _internal_m_id();
}
inline void gm_notice::_internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  m_id_ = value;
}
inline void gm_notice::set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_id(value);
  // @@protoc_insertion_point(field_set:GM.gm_notice.m_id)
}

// string m_notice = 2;
inline bool gm_notice::_internal_has_m_notice() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool gm_notice::has_m_notice() const {
  return _internal_has_m_notice();
}
inline void gm_notice::clear_m_notice() {
  m_notice_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& gm_notice::m_notice() const {
  // @@protoc_insertion_point(field_get:GM.gm_notice.m_notice)
  return _internal_m_notice();
}
inline void gm_notice::set_m_notice(const std::string& value) {
  _internal_set_m_notice(value);
  // @@protoc_insertion_point(field_set:GM.gm_notice.m_notice)
}
inline std::string* gm_notice::mutable_m_notice() {
  // @@protoc_insertion_point(field_mutable:GM.gm_notice.m_notice)
  return _internal_mutable_m_notice();
}
inline const std::string& gm_notice::_internal_m_notice() const {
  return m_notice_.Get();
}
inline void gm_notice::_internal_set_m_notice(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  m_notice_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void gm_notice::set_m_notice(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  m_notice_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GM.gm_notice.m_notice)
}
inline void gm_notice::set_m_notice(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  m_notice_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GM.gm_notice.m_notice)
}
inline void gm_notice::set_m_notice(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  m_notice_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GM.gm_notice.m_notice)
}
inline std::string* gm_notice::_internal_mutable_m_notice() {
  _has_bits_[0] |= 0x00000001u;
  return m_notice_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* gm_notice::release_m_notice() {
  // @@protoc_insertion_point(field_release:GM.gm_notice.m_notice)
  if (!_internal_has_m_notice()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return m_notice_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void gm_notice::set_allocated_m_notice(std::string* m_notice) {
  if (m_notice != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m_notice_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m_notice,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GM.gm_notice.m_notice)
}

// int32 m_starttime = 3;
inline bool gm_notice::_internal_has_m_starttime() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool gm_notice::has_m_starttime() const {
  return _internal_has_m_starttime();
}
inline void gm_notice::clear_m_starttime() {
  m_starttime_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 gm_notice::_internal_m_starttime() const {
  return m_starttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 gm_notice::m_starttime() const {
  // @@protoc_insertion_point(field_get:GM.gm_notice.m_starttime)
  return _internal_m_starttime();
}
inline void gm_notice::_internal_set_m_starttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  m_starttime_ = value;
}
inline void gm_notice::set_m_starttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_starttime(value);
  // @@protoc_insertion_point(field_set:GM.gm_notice.m_starttime)
}

// int32 m_finishtime = 4;
inline bool gm_notice::_internal_has_m_finishtime() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool gm_notice::has_m_finishtime() const {
  return _internal_has_m_finishtime();
}
inline void gm_notice::clear_m_finishtime() {
  m_finishtime_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 gm_notice::_internal_m_finishtime() const {
  return m_finishtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 gm_notice::m_finishtime() const {
  // @@protoc_insertion_point(field_get:GM.gm_notice.m_finishtime)
  return _internal_m_finishtime();
}
inline void gm_notice::_internal_set_m_finishtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  m_finishtime_ = value;
}
inline void gm_notice::set_m_finishtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_finishtime(value);
  // @@protoc_insertion_point(field_set:GM.gm_notice.m_finishtime)
}

// -------------------------------------------------------------------

// PROBUFF_GM_GET_NOTICE_RESPONSE

// repeated .GM.gm_notice m_notice = 3;
inline int PROBUFF_GM_GET_NOTICE_RESPONSE::_internal_m_notice_size() const {
  return m_notice_.size();
}
inline int PROBUFF_GM_GET_NOTICE_RESPONSE::m_notice_size() const {
  return _internal_m_notice_size();
}
inline void PROBUFF_GM_GET_NOTICE_RESPONSE::clear_m_notice() {
  m_notice_.Clear();
}
inline ::GM::gm_notice* PROBUFF_GM_GET_NOTICE_RESPONSE::mutable_m_notice(int index) {
  // @@protoc_insertion_point(field_mutable:GM.PROBUFF_GM_GET_NOTICE_RESPONSE.m_notice)
  return m_notice_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GM::gm_notice >*
PROBUFF_GM_GET_NOTICE_RESPONSE::mutable_m_notice() {
  // @@protoc_insertion_point(field_mutable_list:GM.PROBUFF_GM_GET_NOTICE_RESPONSE.m_notice)
  return &m_notice_;
}
inline const ::GM::gm_notice& PROBUFF_GM_GET_NOTICE_RESPONSE::_internal_m_notice(int index) const {
  return m_notice_.Get(index);
}
inline const ::GM::gm_notice& PROBUFF_GM_GET_NOTICE_RESPONSE::m_notice(int index) const {
  // @@protoc_insertion_point(field_get:GM.PROBUFF_GM_GET_NOTICE_RESPONSE.m_notice)
  return _internal_m_notice(index);
}
inline ::GM::gm_notice* PROBUFF_GM_GET_NOTICE_RESPONSE::_internal_add_m_notice() {
  return m_notice_.Add();
}
inline ::GM::gm_notice* PROBUFF_GM_GET_NOTICE_RESPONSE::add_m_notice() {
  // @@protoc_insertion_point(field_add:GM.PROBUFF_GM_GET_NOTICE_RESPONSE.m_notice)
  return _internal_add_m_notice();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GM::gm_notice >&
PROBUFF_GM_GET_NOTICE_RESPONSE::m_notice() const {
  // @@protoc_insertion_point(field_list:GM.PROBUFF_GM_GET_NOTICE_RESPONSE.m_notice)
  return m_notice_;
}

// -------------------------------------------------------------------

// PROBUFF_GM_ADD_NOTICE

// .GM.gm_notice m_notice = 3;
inline bool PROBUFF_GM_ADD_NOTICE::_internal_has_m_notice() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || m_notice_ != nullptr);
  return value;
}
inline bool PROBUFF_GM_ADD_NOTICE::has_m_notice() const {
  return _internal_has_m_notice();
}
inline void PROBUFF_GM_ADD_NOTICE::clear_m_notice() {
  if (GetArena() == nullptr && m_notice_ != nullptr) {
    delete m_notice_;
  }
  m_notice_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::GM::gm_notice& PROBUFF_GM_ADD_NOTICE::_internal_m_notice() const {
  const ::GM::gm_notice* p = m_notice_;
  return p != nullptr ? *p : *reinterpret_cast<const ::GM::gm_notice*>(
      &::GM::_gm_notice_default_instance_);
}
inline const ::GM::gm_notice& PROBUFF_GM_ADD_NOTICE::m_notice() const {
  // @@protoc_insertion_point(field_get:GM.PROBUFF_GM_ADD_NOTICE.m_notice)
  return _internal_m_notice();
}
inline void PROBUFF_GM_ADD_NOTICE::unsafe_arena_set_allocated_m_notice(
    ::GM::gm_notice* m_notice) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(m_notice_);
  }
  m_notice_ = m_notice;
  if (m_notice) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GM.PROBUFF_GM_ADD_NOTICE.m_notice)
}
inline ::GM::gm_notice* PROBUFF_GM_ADD_NOTICE::release_m_notice() {
  _has_bits_[0] &= ~0x00000001u;
  ::GM::gm_notice* temp = m_notice_;
  m_notice_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::GM::gm_notice* PROBUFF_GM_ADD_NOTICE::unsafe_arena_release_m_notice() {
  // @@protoc_insertion_point(field_release:GM.PROBUFF_GM_ADD_NOTICE.m_notice)
  _has_bits_[0] &= ~0x00000001u;
  ::GM::gm_notice* temp = m_notice_;
  m_notice_ = nullptr;
  return temp;
}
inline ::GM::gm_notice* PROBUFF_GM_ADD_NOTICE::_internal_mutable_m_notice() {
  _has_bits_[0] |= 0x00000001u;
  if (m_notice_ == nullptr) {
    auto* p = CreateMaybeMessage<::GM::gm_notice>(GetArena());
    m_notice_ = p;
  }
  return m_notice_;
}
inline ::GM::gm_notice* PROBUFF_GM_ADD_NOTICE::mutable_m_notice() {
  // @@protoc_insertion_point(field_mutable:GM.PROBUFF_GM_ADD_NOTICE.m_notice)
  return _internal_mutable_m_notice();
}
inline void PROBUFF_GM_ADD_NOTICE::set_allocated_m_notice(::GM::gm_notice* m_notice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete m_notice_;
  }
  if (m_notice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(m_notice);
    if (message_arena != submessage_arena) {
      m_notice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_notice, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m_notice_ = m_notice;
  // @@protoc_insertion_point(field_set_allocated:GM.PROBUFF_GM_ADD_NOTICE.m_notice)
}

// -------------------------------------------------------------------

// PROBUFF_GM_ADD_NOTICE_RESPONSE

// bool m_stat = 3;
inline bool PROBUFF_GM_ADD_NOTICE_RESPONSE::_internal_has_m_stat() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_GM_ADD_NOTICE_RESPONSE::has_m_stat() const {
  return _internal_has_m_stat();
}
inline void PROBUFF_GM_ADD_NOTICE_RESPONSE::clear_m_stat() {
  m_stat_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool PROBUFF_GM_ADD_NOTICE_RESPONSE::_internal_m_stat() const {
  return m_stat_;
}
inline bool PROBUFF_GM_ADD_NOTICE_RESPONSE::m_stat() const {
  // @@protoc_insertion_point(field_get:GM.PROBUFF_GM_ADD_NOTICE_RESPONSE.m_stat)
  return _internal_m_stat();
}
inline void PROBUFF_GM_ADD_NOTICE_RESPONSE::_internal_set_m_stat(bool value) {
  _has_bits_[0] |= 0x00000001u;
  m_stat_ = value;
}
inline void PROBUFF_GM_ADD_NOTICE_RESPONSE::set_m_stat(bool value) {
  _internal_set_m_stat(value);
  // @@protoc_insertion_point(field_set:GM.PROBUFF_GM_ADD_NOTICE_RESPONSE.m_stat)
}

// -------------------------------------------------------------------

// PROBUFF_GM_DEL_NOTICE

// int64 m_id = 3;
inline bool PROBUFF_GM_DEL_NOTICE::_internal_has_m_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_GM_DEL_NOTICE::has_m_id() const {
  return _internal_has_m_id();
}
inline void PROBUFF_GM_DEL_NOTICE::clear_m_id() {
  m_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_GM_DEL_NOTICE::_internal_m_id() const {
  return m_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_GM_DEL_NOTICE::m_id() const {
  // @@protoc_insertion_point(field_get:GM.PROBUFF_GM_DEL_NOTICE.m_id)
  return _internal_m_id();
}
inline void PROBUFF_GM_DEL_NOTICE::_internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  m_id_ = value;
}
inline void PROBUFF_GM_DEL_NOTICE::set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_id(value);
  // @@protoc_insertion_point(field_set:GM.PROBUFF_GM_DEL_NOTICE.m_id)
}

// -------------------------------------------------------------------

// PROBUFF_GM_DEL_NOTICE_RESPONSE

// bool m_stat = 3;
inline bool PROBUFF_GM_DEL_NOTICE_RESPONSE::_internal_has_m_stat() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_GM_DEL_NOTICE_RESPONSE::has_m_stat() const {
  return _internal_has_m_stat();
}
inline void PROBUFF_GM_DEL_NOTICE_RESPONSE::clear_m_stat() {
  m_stat_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool PROBUFF_GM_DEL_NOTICE_RESPONSE::_internal_m_stat() const {
  return m_stat_;
}
inline bool PROBUFF_GM_DEL_NOTICE_RESPONSE::m_stat() const {
  // @@protoc_insertion_point(field_get:GM.PROBUFF_GM_DEL_NOTICE_RESPONSE.m_stat)
  return _internal_m_stat();
}
inline void PROBUFF_GM_DEL_NOTICE_RESPONSE::_internal_set_m_stat(bool value) {
  _has_bits_[0] |= 0x00000001u;
  m_stat_ = value;
}
inline void PROBUFF_GM_DEL_NOTICE_RESPONSE::set_m_stat(bool value) {
  _internal_set_m_stat(value);
  // @@protoc_insertion_point(field_set:GM.PROBUFF_GM_DEL_NOTICE_RESPONSE.m_stat)
}

// -------------------------------------------------------------------

// PROBUFF_GM_RECHARGE

// int64 m_rechargeid = 1;
inline bool PROBUFF_GM_RECHARGE::_internal_has_m_rechargeid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_GM_RECHARGE::has_m_rechargeid() const {
  return _internal_has_m_rechargeid();
}
inline void PROBUFF_GM_RECHARGE::clear_m_rechargeid() {
  m_rechargeid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_GM_RECHARGE::_internal_m_rechargeid() const {
  return m_rechargeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_GM_RECHARGE::m_rechargeid() const {
  // @@protoc_insertion_point(field_get:GM.PROBUFF_GM_RECHARGE.m_rechargeid)
  return _internal_m_rechargeid();
}
inline void PROBUFF_GM_RECHARGE::_internal_set_m_rechargeid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  m_rechargeid_ = value;
}
inline void PROBUFF_GM_RECHARGE::set_m_rechargeid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_rechargeid(value);
  // @@protoc_insertion_point(field_set:GM.PROBUFF_GM_RECHARGE.m_rechargeid)
}

// int64 m_roleid = 2;
inline bool PROBUFF_GM_RECHARGE::_internal_has_m_roleid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PROBUFF_GM_RECHARGE::has_m_roleid() const {
  return _internal_has_m_roleid();
}
inline void PROBUFF_GM_RECHARGE::clear_m_roleid() {
  m_roleid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_GM_RECHARGE::_internal_m_roleid() const {
  return m_roleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_GM_RECHARGE::m_roleid() const {
  // @@protoc_insertion_point(field_get:GM.PROBUFF_GM_RECHARGE.m_roleid)
  return _internal_m_roleid();
}
inline void PROBUFF_GM_RECHARGE::_internal_set_m_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  m_roleid_ = value;
}
inline void PROBUFF_GM_RECHARGE::set_m_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_roleid(value);
  // @@protoc_insertion_point(field_set:GM.PROBUFF_GM_RECHARGE.m_roleid)
}

// string m_orderid = 3;
inline bool PROBUFF_GM_RECHARGE::_internal_has_m_orderid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_GM_RECHARGE::has_m_orderid() const {
  return _internal_has_m_orderid();
}
inline void PROBUFF_GM_RECHARGE::clear_m_orderid() {
  m_orderid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PROBUFF_GM_RECHARGE::m_orderid() const {
  // @@protoc_insertion_point(field_get:GM.PROBUFF_GM_RECHARGE.m_orderid)
  return _internal_m_orderid();
}
inline void PROBUFF_GM_RECHARGE::set_m_orderid(const std::string& value) {
  _internal_set_m_orderid(value);
  // @@protoc_insertion_point(field_set:GM.PROBUFF_GM_RECHARGE.m_orderid)
}
inline std::string* PROBUFF_GM_RECHARGE::mutable_m_orderid() {
  // @@protoc_insertion_point(field_mutable:GM.PROBUFF_GM_RECHARGE.m_orderid)
  return _internal_mutable_m_orderid();
}
inline const std::string& PROBUFF_GM_RECHARGE::_internal_m_orderid() const {
  return m_orderid_.Get();
}
inline void PROBUFF_GM_RECHARGE::_internal_set_m_orderid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  m_orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PROBUFF_GM_RECHARGE::set_m_orderid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  m_orderid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GM.PROBUFF_GM_RECHARGE.m_orderid)
}
inline void PROBUFF_GM_RECHARGE::set_m_orderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  m_orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GM.PROBUFF_GM_RECHARGE.m_orderid)
}
inline void PROBUFF_GM_RECHARGE::set_m_orderid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  m_orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GM.PROBUFF_GM_RECHARGE.m_orderid)
}
inline std::string* PROBUFF_GM_RECHARGE::_internal_mutable_m_orderid() {
  _has_bits_[0] |= 0x00000001u;
  return m_orderid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PROBUFF_GM_RECHARGE::release_m_orderid() {
  // @@protoc_insertion_point(field_release:GM.PROBUFF_GM_RECHARGE.m_orderid)
  if (!_internal_has_m_orderid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return m_orderid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PROBUFF_GM_RECHARGE::set_allocated_m_orderid(std::string* m_orderid) {
  if (m_orderid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m_orderid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m_orderid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GM.PROBUFF_GM_RECHARGE.m_orderid)
}

// -------------------------------------------------------------------

// PROBUFF_GM_RECHARGE_RESPONSE

// bool m_rechargeid = 1;
inline bool PROBUFF_GM_RECHARGE_RESPONSE::_internal_has_m_rechargeid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PROBUFF_GM_RECHARGE_RESPONSE::has_m_rechargeid() const {
  return _internal_has_m_rechargeid();
}
inline void PROBUFF_GM_RECHARGE_RESPONSE::clear_m_rechargeid() {
  m_rechargeid_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool PROBUFF_GM_RECHARGE_RESPONSE::_internal_m_rechargeid() const {
  return m_rechargeid_;
}
inline bool PROBUFF_GM_RECHARGE_RESPONSE::m_rechargeid() const {
  // @@protoc_insertion_point(field_get:GM.PROBUFF_GM_RECHARGE_RESPONSE.m_rechargeid)
  return _internal_m_rechargeid();
}
inline void PROBUFF_GM_RECHARGE_RESPONSE::_internal_set_m_rechargeid(bool value) {
  _has_bits_[0] |= 0x00000004u;
  m_rechargeid_ = value;
}
inline void PROBUFF_GM_RECHARGE_RESPONSE::set_m_rechargeid(bool value) {
  _internal_set_m_rechargeid(value);
  // @@protoc_insertion_point(field_set:GM.PROBUFF_GM_RECHARGE_RESPONSE.m_rechargeid)
}

// int64 m_roleid = 2;
inline bool PROBUFF_GM_RECHARGE_RESPONSE::_internal_has_m_roleid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_GM_RECHARGE_RESPONSE::has_m_roleid() const {
  return _internal_has_m_roleid();
}
inline void PROBUFF_GM_RECHARGE_RESPONSE::clear_m_roleid() {
  m_roleid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_GM_RECHARGE_RESPONSE::_internal_m_roleid() const {
  return m_roleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_GM_RECHARGE_RESPONSE::m_roleid() const {
  // @@protoc_insertion_point(field_get:GM.PROBUFF_GM_RECHARGE_RESPONSE.m_roleid)
  return _internal_m_roleid();
}
inline void PROBUFF_GM_RECHARGE_RESPONSE::_internal_set_m_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  m_roleid_ = value;
}
inline void PROBUFF_GM_RECHARGE_RESPONSE::set_m_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_roleid(value);
  // @@protoc_insertion_point(field_set:GM.PROBUFF_GM_RECHARGE_RESPONSE.m_roleid)
}

// string m_orderid = 3;
inline bool PROBUFF_GM_RECHARGE_RESPONSE::_internal_has_m_orderid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_GM_RECHARGE_RESPONSE::has_m_orderid() const {
  return _internal_has_m_orderid();
}
inline void PROBUFF_GM_RECHARGE_RESPONSE::clear_m_orderid() {
  m_orderid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PROBUFF_GM_RECHARGE_RESPONSE::m_orderid() const {
  // @@protoc_insertion_point(field_get:GM.PROBUFF_GM_RECHARGE_RESPONSE.m_orderid)
  return _internal_m_orderid();
}
inline void PROBUFF_GM_RECHARGE_RESPONSE::set_m_orderid(const std::string& value) {
  _internal_set_m_orderid(value);
  // @@protoc_insertion_point(field_set:GM.PROBUFF_GM_RECHARGE_RESPONSE.m_orderid)
}
inline std::string* PROBUFF_GM_RECHARGE_RESPONSE::mutable_m_orderid() {
  // @@protoc_insertion_point(field_mutable:GM.PROBUFF_GM_RECHARGE_RESPONSE.m_orderid)
  return _internal_mutable_m_orderid();
}
inline const std::string& PROBUFF_GM_RECHARGE_RESPONSE::_internal_m_orderid() const {
  return m_orderid_.Get();
}
inline void PROBUFF_GM_RECHARGE_RESPONSE::_internal_set_m_orderid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  m_orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PROBUFF_GM_RECHARGE_RESPONSE::set_m_orderid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  m_orderid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GM.PROBUFF_GM_RECHARGE_RESPONSE.m_orderid)
}
inline void PROBUFF_GM_RECHARGE_RESPONSE::set_m_orderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  m_orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GM.PROBUFF_GM_RECHARGE_RESPONSE.m_orderid)
}
inline void PROBUFF_GM_RECHARGE_RESPONSE::set_m_orderid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  m_orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GM.PROBUFF_GM_RECHARGE_RESPONSE.m_orderid)
}
inline std::string* PROBUFF_GM_RECHARGE_RESPONSE::_internal_mutable_m_orderid() {
  _has_bits_[0] |= 0x00000001u;
  return m_orderid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PROBUFF_GM_RECHARGE_RESPONSE::release_m_orderid() {
  // @@protoc_insertion_point(field_release:GM.PROBUFF_GM_RECHARGE_RESPONSE.m_orderid)
  if (!_internal_has_m_orderid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return m_orderid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PROBUFF_GM_RECHARGE_RESPONSE::set_allocated_m_orderid(std::string* m_orderid) {
  if (m_orderid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m_orderid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m_orderid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GM.PROBUFF_GM_RECHARGE_RESPONSE.m_orderid)
}

// int32 m_stat = 4;
inline bool PROBUFF_GM_RECHARGE_RESPONSE::_internal_has_m_stat() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PROBUFF_GM_RECHARGE_RESPONSE::has_m_stat() const {
  return _internal_has_m_stat();
}
inline void PROBUFF_GM_RECHARGE_RESPONSE::clear_m_stat() {
  m_stat_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_GM_RECHARGE_RESPONSE::_internal_m_stat() const {
  return m_stat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_GM_RECHARGE_RESPONSE::m_stat() const {
  // @@protoc_insertion_point(field_get:GM.PROBUFF_GM_RECHARGE_RESPONSE.m_stat)
  return _internal_m_stat();
}
inline void PROBUFF_GM_RECHARGE_RESPONSE::_internal_set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  m_stat_ = value;
}
inline void PROBUFF_GM_RECHARGE_RESPONSE::set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_stat(value);
  // @@protoc_insertion_point(field_set:GM.PROBUFF_GM_RECHARGE_RESPONSE.m_stat)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace GM

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gm_2eproto
