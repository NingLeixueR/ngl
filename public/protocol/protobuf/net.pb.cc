// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net.proto

#include "net.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace pbnet {
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_HEARTBEAT::PROBUFF_NET_HEARTBEAT(
    ::_pbi::ConstantInitialized) {}
struct PROBUFF_NET_HEARTBEATDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_HEARTBEATDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_HEARTBEATDefaultTypeInternal() {}
  union {
    PROBUFF_NET_HEARTBEAT _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_HEARTBEATDefaultTypeInternal _PROBUFF_NET_HEARTBEAT_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_ERROR::PROBUFF_NET_ERROR(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_errnum_)*/ 0
} {}
struct PROBUFF_NET_ERRORDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_ERRORDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_ERRORDefaultTypeInternal() {}
  union {
    PROBUFF_NET_ERROR _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_ERRORDefaultTypeInternal _PROBUFF_NET_ERROR_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_ERROR_RESPONSE::PROBUFF_NET_ERROR_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_errmessage_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.m_errnum_)*/ 0
} {}
struct PROBUFF_NET_ERROR_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_ERROR_RESPONSEDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_ERROR_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_ERROR_RESPONSE _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_ERROR_RESPONSEDefaultTypeInternal _PROBUFF_NET_ERROR_RESPONSE_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_GET_TIME::PROBUFF_NET_GET_TIME(
    ::_pbi::ConstantInitialized) {}
struct PROBUFF_NET_GET_TIMEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_GET_TIMEDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_GET_TIMEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_GET_TIME _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_GET_TIMEDefaultTypeInternal _PROBUFF_NET_GET_TIME_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_GET_TIME_RESPONSE::PROBUFF_NET_GET_TIME_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_utc_)*/ 0
} {}
struct PROBUFF_NET_GET_TIME_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_GET_TIME_RESPONSEDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_GET_TIME_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_GET_TIME_RESPONSE _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_GET_TIME_RESPONSEDefaultTypeInternal _PROBUFF_NET_GET_TIME_RESPONSE_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_GET_NOTICE::PROBUFF_NET_GET_NOTICE(
    ::_pbi::ConstantInitialized) {}
struct PROBUFF_NET_GET_NOTICEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_GET_NOTICEDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_GET_NOTICEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_GET_NOTICE _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_GET_NOTICEDefaultTypeInternal _PROBUFF_NET_GET_NOTICE_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_GET_NOTICE_RESPONSE::PROBUFF_NET_GET_NOTICE_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.m_notices_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PROBUFF_NET_GET_NOTICE_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_GET_NOTICE_RESPONSEDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_GET_NOTICE_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_GET_NOTICE_RESPONSE _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_GET_NOTICE_RESPONSEDefaultTypeInternal _PROBUFF_NET_GET_NOTICE_RESPONSE_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_ACOUNT_LOGIN::PROBUFF_NET_ACOUNT_LOGIN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_account_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.m_password_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.m_area_)*/ 0
} {}
struct PROBUFF_NET_ACOUNT_LOGINDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_ACOUNT_LOGINDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_ACOUNT_LOGINDefaultTypeInternal() {}
  union {
    PROBUFF_NET_ACOUNT_LOGIN _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_ACOUNT_LOGINDefaultTypeInternal _PROBUFF_NET_ACOUNT_LOGIN_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_session_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.m_account_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.m_roleid_)*/ ::int64_t{0}

  , /*decltype(_impl_.m_area_)*/ 0

  , /*decltype(_impl_.m_gatewayid_)*/ 0
} {}
struct PROBUFF_NET_ACOUNT_LOGIN_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_ACOUNT_LOGIN_RESPONSEDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_ACOUNT_LOGIN_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_ACOUNT_LOGIN_RESPONSE _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_ACOUNT_LOGIN_RESPONSEDefaultTypeInternal _PROBUFF_NET_ACOUNT_LOGIN_RESPONSE_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_ROLE_LOGIN::PROBUFF_NET_ROLE_LOGIN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_session_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.m_roleid_)*/ ::int64_t{0}

  , /*decltype(_impl_.m_iscreate_)*/ false

  , /*decltype(_impl_.m_area_)*/ 0

  , /*decltype(_impl_.m_gatewayid_)*/ 0
} {}
struct PROBUFF_NET_ROLE_LOGINDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_ROLE_LOGINDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_ROLE_LOGINDefaultTypeInternal() {}
  union {
    PROBUFF_NET_ROLE_LOGIN _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_ROLE_LOGINDefaultTypeInternal _PROBUFF_NET_ROLE_LOGIN_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_ROLE_SYNC::PROBUFF_NET_ROLE_SYNC(
    ::_pbi::ConstantInitialized) {}
struct PROBUFF_NET_ROLE_SYNCDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_ROLE_SYNCDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_ROLE_SYNCDefaultTypeInternal() {}
  union {
    PROBUFF_NET_ROLE_SYNC _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_ROLE_SYNCDefaultTypeInternal _PROBUFF_NET_ROLE_SYNC_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_ROLE_SYNC_RESPONSE::PROBUFF_NET_ROLE_SYNC_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_role_)*/nullptr
  , /*decltype(_impl_.m_bag_)*/nullptr
  , /*decltype(_impl_.m_task_)*/nullptr} {}
struct PROBUFF_NET_ROLE_SYNC_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_ROLE_SYNC_RESPONSEDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_ROLE_SYNC_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_ROLE_SYNC_RESPONSE _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_ROLE_SYNC_RESPONSEDefaultTypeInternal _PROBUFF_NET_ROLE_SYNC_RESPONSE_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_BAG_SYNC::PROBUFF_NET_BAG_SYNC(
    ::_pbi::ConstantInitialized) {}
struct PROBUFF_NET_BAG_SYNCDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_BAG_SYNCDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_BAG_SYNCDefaultTypeInternal() {}
  union {
    PROBUFF_NET_BAG_SYNC _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_BAG_SYNCDefaultTypeInternal _PROBUFF_NET_BAG_SYNC_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_BAG_SYNC_RESPONSE::PROBUFF_NET_BAG_SYNC_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_bag_)*/nullptr} {}
struct PROBUFF_NET_BAG_SYNC_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_BAG_SYNC_RESPONSEDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_BAG_SYNC_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_BAG_SYNC_RESPONSE _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_BAG_SYNC_RESPONSEDefaultTypeInternal _PROBUFF_NET_BAG_SYNC_RESPONSE_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_BAG_UPDATE::PROBUFF_NET_BAG_UPDATE(
    ::_pbi::ConstantInitialized) {}
struct PROBUFF_NET_BAG_UPDATEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_BAG_UPDATEDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_BAG_UPDATEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_BAG_UPDATE _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_BAG_UPDATEDefaultTypeInternal _PROBUFF_NET_BAG_UPDATE_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_id_)*/ 0

  , /*decltype(_impl_.m_count_)*/ 0
} {}
struct PROBUFF_NET_BAG_UPDATE_RESPONSE_delitemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_BAG_UPDATE_RESPONSE_delitemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_BAG_UPDATE_RESPONSE_delitemDefaultTypeInternal() {}
  union {
    PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_BAG_UPDATE_RESPONSE_delitemDefaultTypeInternal _PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_id_)*/ 0

  , /*decltype(_impl_.m_count_)*/ 0
} {}
struct PROBUFF_NET_BAG_UPDATE_RESPONSE_additemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_BAG_UPDATE_RESPONSE_additemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_BAG_UPDATE_RESPONSE_additemDefaultTypeInternal() {}
  union {
    PROBUFF_NET_BAG_UPDATE_RESPONSE_additem _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_BAG_UPDATE_RESPONSE_additemDefaultTypeInternal _PROBUFF_NET_BAG_UPDATE_RESPONSE_additem_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_BAG_UPDATE_RESPONSE::PROBUFF_NET_BAG_UPDATE_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.m_delitems_)*/{}
  , /*decltype(_impl_.m_delnostackitems_)*/ {}
  ,/* _impl_._m_delnostackitems_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.m_additems_)*/{}
  , /*decltype(_impl_.m_addnostackitems_)*/ {}
  ,/* _impl_._m_addnostackitems_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PROBUFF_NET_BAG_UPDATE_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_BAG_UPDATE_RESPONSEDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_BAG_UPDATE_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_BAG_UPDATE_RESPONSE _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_BAG_UPDATE_RESPONSEDefaultTypeInternal _PROBUFF_NET_BAG_UPDATE_RESPONSE_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_CMD::PROBUFF_NET_CMD(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_cmd_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct PROBUFF_NET_CMDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_CMDDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_CMDDefaultTypeInternal() {}
  union {
    PROBUFF_NET_CMD _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_CMDDefaultTypeInternal _PROBUFF_NET_CMD_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_CHAT::PROBUFF_NET_CHAT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_content_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.m_type_)*/ 0

  , /*decltype(_impl_.m_channelid_)*/ 0
} {}
struct PROBUFF_NET_CHATDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_CHATDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_CHATDefaultTypeInternal() {}
  union {
    PROBUFF_NET_CHAT _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_CHATDefaultTypeInternal _PROBUFF_NET_CHAT_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR chatitem::chatitem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_rolename_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.m_content_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.m_roleid_)*/ ::int64_t{0}

  , /*decltype(_impl_.m_utc_)*/ 0
} {}
struct chatitemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR chatitemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~chatitemDefaultTypeInternal() {}
  union {
    chatitem _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 chatitemDefaultTypeInternal _chatitem_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_CHAT_RESPONSE::PROBUFF_NET_CHAT_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_chatlist_)*/{}
  , /*decltype(_impl_.m_type_)*/ 0

  , /*decltype(_impl_.m_channelid_)*/ 0

  , /*decltype(_impl_.m_stat_)*/ false
} {}
struct PROBUFF_NET_CHAT_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_CHAT_RESPONSEDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_CHAT_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_CHAT_RESPONSE _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_CHAT_RESPONSEDefaultTypeInternal _PROBUFF_NET_CHAT_RESPONSE_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_SWITCH_LINE::PROBUFF_NET_SWITCH_LINE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_line_)*/ 0
} {}
struct PROBUFF_NET_SWITCH_LINEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_SWITCH_LINEDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_SWITCH_LINEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_SWITCH_LINE _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_SWITCH_LINEDefaultTypeInternal _PROBUFF_NET_SWITCH_LINE_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_SWITCH_LINE_RESPONSE::PROBUFF_NET_SWITCH_LINE_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_line_)*/ 0

  , /*decltype(_impl_.m_stat_)*/ false
} {}
struct PROBUFF_NET_SWITCH_LINE_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_SWITCH_LINE_RESPONSEDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_SWITCH_LINE_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_SWITCH_LINE_RESPONSE _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_SWITCH_LINE_RESPONSEDefaultTypeInternal _PROBUFF_NET_SWITCH_LINE_RESPONSE_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_LIST::PROBUFF_NET_MAIL_LIST(
    ::_pbi::ConstantInitialized) {}
struct PROBUFF_NET_MAIL_LISTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_LISTDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MAIL_LISTDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MAIL_LIST _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MAIL_LISTDefaultTypeInternal _PROBUFF_NET_MAIL_LIST_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse::PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUseDefaultTypeInternal _PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_LIST_RESPONSE::PROBUFF_NET_MAIL_LIST_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.m_mail_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PROBUFF_NET_MAIL_LIST_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_LIST_RESPONSEDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MAIL_LIST_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MAIL_LIST_RESPONSE _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MAIL_LIST_RESPONSEDefaultTypeInternal _PROBUFF_NET_MAIL_LIST_RESPONSE_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_READ::PROBUFF_NET_MAIL_READ(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_mailid_)*/ ::int64_t{0}
} {}
struct PROBUFF_NET_MAIL_READDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_READDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MAIL_READDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MAIL_READ _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MAIL_READDefaultTypeInternal _PROBUFF_NET_MAIL_READ_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_READ_RESPONSE::PROBUFF_NET_MAIL_READ_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_mailid_)*/ ::int64_t{0}

  , /*decltype(_impl_.m_stat_)*/ false
} {}
struct PROBUFF_NET_MAIL_READ_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_READ_RESPONSEDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MAIL_READ_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MAIL_READ_RESPONSE _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MAIL_READ_RESPONSEDefaultTypeInternal _PROBUFF_NET_MAIL_READ_RESPONSE_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_DRAW::PROBUFF_NET_MAIL_DRAW(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_mailid_)*/ ::int64_t{0}
} {}
struct PROBUFF_NET_MAIL_DRAWDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_DRAWDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MAIL_DRAWDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MAIL_DRAW _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MAIL_DRAWDefaultTypeInternal _PROBUFF_NET_MAIL_DRAW_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_DRAW_RESPONSE::PROBUFF_NET_MAIL_DRAW_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_mailid_)*/ ::int64_t{0}

  , /*decltype(_impl_.m_stat_)*/ false
} {}
struct PROBUFF_NET_MAIL_DRAW_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_DRAW_RESPONSEDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MAIL_DRAW_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MAIL_DRAW_RESPONSE _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MAIL_DRAW_RESPONSEDefaultTypeInternal _PROBUFF_NET_MAIL_DRAW_RESPONSE_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_DEL::PROBUFF_NET_MAIL_DEL(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_mailid_)*/ ::int64_t{0}
} {}
struct PROBUFF_NET_MAIL_DELDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_DELDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MAIL_DELDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MAIL_DEL _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MAIL_DELDefaultTypeInternal _PROBUFF_NET_MAIL_DEL_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_DEL_RESPONSE::PROBUFF_NET_MAIL_DEL_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_mailid_)*/ ::int64_t{0}

  , /*decltype(_impl_.m_stat_)*/ false
} {}
struct PROBUFF_NET_MAIL_DEL_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_DEL_RESPONSEDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MAIL_DEL_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MAIL_DEL_RESPONSE _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MAIL_DEL_RESPONSEDefaultTypeInternal _PROBUFF_NET_MAIL_DEL_RESPONSE_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR VECTOR2::VECTOR2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_x_)*/ 0

  , /*decltype(_impl_.m_y_)*/ 0
} {}
struct VECTOR2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR VECTOR2DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VECTOR2DefaultTypeInternal() {}
  union {
    VECTOR2 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VECTOR2DefaultTypeInternal _VECTOR2_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR VECTOR3::VECTOR3(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_x_)*/ 0

  , /*decltype(_impl_.m_y_)*/ 0

  , /*decltype(_impl_.m_z_)*/ 0
} {}
struct VECTOR3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR VECTOR3DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VECTOR3DefaultTypeInternal() {}
  union {
    VECTOR3 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VECTOR3DefaultTypeInternal _VECTOR3_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR UNIT_POSITION::UNIT_POSITION(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_position_)*/nullptr
  , /*decltype(_impl_.m_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.m_angle_)*/ 0
} {}
struct UNIT_POSITIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UNIT_POSITIONDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UNIT_POSITIONDefaultTypeInternal() {}
  union {
    UNIT_POSITION _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UNIT_POSITIONDefaultTypeInternal _UNIT_POSITION_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR UNIT::UNIT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_position_)*/nullptr
  , /*decltype(_impl_.m_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.m_type_)*/ 0
} {}
struct UNITDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UNITDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UNITDefaultTypeInternal() {}
  union {
    UNIT _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UNITDefaultTypeInternal _UNIT_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_SYNC_UNIT::PROBUFF_NET_SYNC_UNIT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.m_units_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PROBUFF_NET_SYNC_UNITDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_SYNC_UNITDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_SYNC_UNITDefaultTypeInternal() {}
  union {
    PROBUFF_NET_SYNC_UNIT _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_SYNC_UNITDefaultTypeInternal _PROBUFF_NET_SYNC_UNIT_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_ENTER_LEAVE_VIEW::PROBUFF_NET_ENTER_LEAVE_VIEW(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_units_)*/ {}
  ,/* _impl_._m_units_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.m_isenter_)*/ false
} {}
struct PROBUFF_NET_ENTER_LEAVE_VIEWDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_ENTER_LEAVE_VIEWDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_ENTER_LEAVE_VIEWDefaultTypeInternal() {}
  union {
    PROBUFF_NET_ENTER_LEAVE_VIEW _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_ENTER_LEAVE_VIEWDefaultTypeInternal _PROBUFF_NET_ENTER_LEAVE_VIEW_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse::PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUseDefaultTypeInternal _PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_SYNC_POSITION::PROBUFF_NET_SYNC_POSITION(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.m_position_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PROBUFF_NET_SYNC_POSITIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_SYNC_POSITIONDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_SYNC_POSITIONDefaultTypeInternal() {}
  union {
    PROBUFF_NET_SYNC_POSITION _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_SYNC_POSITIONDefaultTypeInternal _PROBUFF_NET_SYNC_POSITION_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING::PROBUFF_NET_MATCHING(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_type_)*/ 0

  , /*decltype(_impl_.m_tid_)*/ 0
} {}
struct PROBUFF_NET_MATCHINGDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHINGDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MATCHINGDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MATCHING _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MATCHINGDefaultTypeInternal _PROBUFF_NET_MATCHING_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MATCHING_MEMBER::MATCHING_MEMBER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.m_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.m_lv_)*/ 0

  , /*decltype(_impl_.m_begmatch_)*/ 0

  , /*decltype(_impl_.m_isconfirm_)*/ false
} {}
struct MATCHING_MEMBERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MATCHING_MEMBERDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MATCHING_MEMBERDefaultTypeInternal() {}
  union {
    MATCHING_MEMBER _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MATCHING_MEMBERDefaultTypeInternal _MATCHING_MEMBER_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_RESPONSE::PROBUFF_NET_MATCHING_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_id_)*/ ::int64_t{0}
} {}
struct PROBUFF_NET_MATCHING_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_RESPONSEDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MATCHING_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MATCHING_RESPONSE _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MATCHING_RESPONSEDefaultTypeInternal _PROBUFF_NET_MATCHING_RESPONSE_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_CANCEL::PROBUFF_NET_MATCHING_CANCEL(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_roomid_)*/ ::int64_t{0}

  , /*decltype(_impl_.m_type_)*/ 0
} {}
struct PROBUFF_NET_MATCHING_CANCELDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_CANCELDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MATCHING_CANCELDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MATCHING_CANCEL _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MATCHING_CANCELDefaultTypeInternal _PROBUFF_NET_MATCHING_CANCEL_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_CANCEL_RESPONSE::PROBUFF_NET_MATCHING_CANCEL_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_type_)*/ 0

  , /*decltype(_impl_.m_stat_)*/ 0
} {}
struct PROBUFF_NET_MATCHING_CANCEL_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_CANCEL_RESPONSEDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MATCHING_CANCEL_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MATCHING_CANCEL_RESPONSE _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MATCHING_CANCEL_RESPONSEDefaultTypeInternal _PROBUFF_NET_MATCHING_CANCEL_RESPONSE_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_MEMBER_MATCHING_CANCEL::PROBUFF_NET_MEMBER_MATCHING_CANCEL(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_cancelmember_)*/ {}
  ,/* _impl_._m_cancelmember_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.m_type_)*/ 0

  , /*decltype(_impl_.m_canceltype_)*/ 0
} {}
struct PROBUFF_NET_MEMBER_MATCHING_CANCELDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MEMBER_MATCHING_CANCELDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MEMBER_MATCHING_CANCELDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MEMBER_MATCHING_CANCEL _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MEMBER_MATCHING_CANCELDefaultTypeInternal _PROBUFF_NET_MEMBER_MATCHING_CANCEL_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_WAITCONFIRM::PROBUFF_NET_MATCHING_WAITCONFIRM(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_roomid_)*/ ::int64_t{0}

  , /*decltype(_impl_.m_type_)*/ 0
} {}
struct PROBUFF_NET_MATCHING_WAITCONFIRMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_WAITCONFIRMDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MATCHING_WAITCONFIRMDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MATCHING_WAITCONFIRM _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MATCHING_WAITCONFIRMDefaultTypeInternal _PROBUFF_NET_MATCHING_WAITCONFIRM_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_CONFIRM::PROBUFF_NET_MATCHING_CONFIRM(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_roomid_)*/ ::int64_t{0}

  , /*decltype(_impl_.m_type_)*/ 0
} {}
struct PROBUFF_NET_MATCHING_CONFIRMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_CONFIRMDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MATCHING_CONFIRMDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MATCHING_CONFIRM _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MATCHING_CONFIRMDefaultTypeInternal _PROBUFF_NET_MATCHING_CONFIRM_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_roomid_)*/ ::int64_t{0}

  , /*decltype(_impl_.m_type_)*/ 0

  , /*decltype(_impl_.m_stat_)*/ 0
} {}
struct PROBUFF_NET_MATCHING_CONFIRM_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_CONFIRM_RESPONSEDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MATCHING_CONFIRM_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MATCHING_CONFIRM_RESPONSE _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MATCHING_CONFIRM_RESPONSEDefaultTypeInternal _PROBUFF_NET_MATCHING_CONFIRM_RESPONSE_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_SYNC_MATCHING_CONFIRM::PROBUFF_NET_SYNC_MATCHING_CONFIRM(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_roleid_)*/ {}
  ,/* _impl_._m_roleid_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.m_roomid_)*/ ::int64_t{0}

  , /*decltype(_impl_.m_type_)*/ 0
} {}
struct PROBUFF_NET_SYNC_MATCHING_CONFIRMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_SYNC_MATCHING_CONFIRMDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_SYNC_MATCHING_CONFIRMDefaultTypeInternal() {}
  union {
    PROBUFF_NET_SYNC_MATCHING_CONFIRM _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_SYNC_MATCHING_CONFIRMDefaultTypeInternal _PROBUFF_NET_SYNC_MATCHING_CONFIRM_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_SYNC::PROBUFF_NET_MATCHING_SYNC(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_member_)*/{}
  , /*decltype(_impl_.m_roomid_)*/ ::int64_t{0}

  , /*decltype(_impl_.m_type_)*/ 0
} {}
struct PROBUFF_NET_MATCHING_SYNCDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_SYNCDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MATCHING_SYNCDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MATCHING_SYNC _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MATCHING_SYNCDefaultTypeInternal _PROBUFF_NET_MATCHING_SYNC_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::PROBUFF_NET_MATCHING_SUCCESS_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_roomid_)*/ ::int64_t{0}

  , /*decltype(_impl_.m_type_)*/ 0
} {}
struct PROBUFF_NET_MATCHING_SUCCESS_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_SUCCESS_RESPONSEDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MATCHING_SUCCESS_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MATCHING_SUCCESS_RESPONSE _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MATCHING_SUCCESS_RESPONSEDefaultTypeInternal _PROBUFF_NET_MATCHING_SUCCESS_RESPONSE_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_SUCCESS::PROBUFF_NET_MATCHING_SUCCESS(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_member_)*/{}
  , /*decltype(_impl_.m_roomid_)*/ ::int64_t{0}

  , /*decltype(_impl_.m_type_)*/ 0

  , /*decltype(_impl_.m_dataid_)*/ 0
} {}
struct PROBUFF_NET_MATCHING_SUCCESSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_SUCCESSDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MATCHING_SUCCESSDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MATCHING_SUCCESS _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MATCHING_SUCCESSDefaultTypeInternal _PROBUFF_NET_MATCHING_SUCCESS_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PROBUFF_NET_ENTER_PLAYS::PROBUFF_NET_ENTER_PLAYS(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_roomid_)*/ ::int64_t{0}

  , /*decltype(_impl_.m_type_)*/ 0
} {}
struct PROBUFF_NET_ENTER_PLAYSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_ENTER_PLAYSDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_ENTER_PLAYSDefaultTypeInternal() {}
  union {
    PROBUFF_NET_ENTER_PLAYS _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_ENTER_PLAYSDefaultTypeInternal _PROBUFF_NET_ENTER_PLAYS_default_instance_;
}  // namespace pbnet
static ::_pb::Metadata file_level_metadata_net_2eproto[55];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_net_2eproto[6];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_net_2eproto = nullptr;
const ::uint32_t TableStruct_net_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_HEARTBEAT, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ERROR, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ERROR, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ERROR, _impl_.m_errnum_),
    0,
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ERROR_RESPONSE, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ERROR_RESPONSE, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ERROR_RESPONSE, _impl_.m_errnum_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ERROR_RESPONSE, _impl_.m_errmessage_),
    1,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_GET_TIME, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_GET_TIME_RESPONSE, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_GET_TIME_RESPONSE, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_GET_TIME_RESPONSE, _impl_.m_utc_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_GET_NOTICE, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_GET_NOTICE_RESPONSE, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_GET_NOTICE_RESPONSE, _impl_.m_notices_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN, _impl_.m_area_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN, _impl_.m_account_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN, _impl_.m_password_),
    2,
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, _impl_.m_area_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, _impl_.m_roleid_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, _impl_.m_session_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, _impl_.m_account_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, _impl_.m_gatewayid_),
    3,
    2,
    0,
    1,
    4,
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_LOGIN, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_LOGIN, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_LOGIN, _impl_.m_roleid_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_LOGIN, _impl_.m_session_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_LOGIN, _impl_.m_iscreate_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_LOGIN, _impl_.m_area_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_LOGIN, _impl_.m_gatewayid_),
    1,
    0,
    2,
    3,
    4,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_SYNC, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE, _impl_.m_role_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE, _impl_.m_bag_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE, _impl_.m_task_),
    0,
    1,
    2,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_SYNC, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE, _impl_.m_bag_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem, _impl_.m_id_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem, _impl_.m_count_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem, _impl_.m_id_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem, _impl_.m_count_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE, _impl_.m_delitems_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE, _impl_.m_delnostackitems_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE, _impl_.m_additems_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE, _impl_.m_addnostackitems_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CMD, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CMD, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CMD, _impl_.m_cmd_),
    0,
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT, _impl_.m_type_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT, _impl_.m_channelid_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT, _impl_.m_content_),
    1,
    2,
    0,
    PROTOBUF_FIELD_OFFSET(::pbnet::chatitem, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::chatitem, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::chatitem, _impl_.m_roleid_),
    PROTOBUF_FIELD_OFFSET(::pbnet::chatitem, _impl_.m_rolename_),
    PROTOBUF_FIELD_OFFSET(::pbnet::chatitem, _impl_.m_content_),
    PROTOBUF_FIELD_OFFSET(::pbnet::chatitem, _impl_.m_utc_),
    2,
    0,
    1,
    3,
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT_RESPONSE, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT_RESPONSE, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT_RESPONSE, _impl_.m_type_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT_RESPONSE, _impl_.m_channelid_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT_RESPONSE, _impl_.m_chatlist_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT_RESPONSE, _impl_.m_stat_),
    0,
    1,
    ~0u,
    2,
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SWITCH_LINE, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SWITCH_LINE, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SWITCH_LINE, _impl_.m_line_),
    0,
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE, _impl_.m_line_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE, _impl_.m_stat_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_LIST, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse, value_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE, _impl_.m_mail_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_READ, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_READ, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_READ, _impl_.m_mailid_),
    0,
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE, _impl_.m_mailid_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE, _impl_.m_stat_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DRAW, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DRAW, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DRAW, _impl_.m_mailid_),
    0,
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE, _impl_.m_mailid_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE, _impl_.m_stat_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DEL, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DEL, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DEL, _impl_.m_mailid_),
    0,
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE, _impl_.m_mailid_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE, _impl_.m_stat_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR2, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR2, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR2, _impl_.m_x_),
    PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR2, _impl_.m_y_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR3, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR3, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR3, _impl_.m_x_),
    PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR3, _impl_.m_y_),
    PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR3, _impl_.m_z_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::pbnet::UNIT_POSITION, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::UNIT_POSITION, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::UNIT_POSITION, _impl_.m_id_),
    PROTOBUF_FIELD_OFFSET(::pbnet::UNIT_POSITION, _impl_.m_position_),
    PROTOBUF_FIELD_OFFSET(::pbnet::UNIT_POSITION, _impl_.m_angle_),
    1,
    0,
    2,
    PROTOBUF_FIELD_OFFSET(::pbnet::UNIT, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::UNIT, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::UNIT, _impl_.m_type_),
    PROTOBUF_FIELD_OFFSET(::pbnet::UNIT, _impl_.m_id_),
    PROTOBUF_FIELD_OFFSET(::pbnet::UNIT, _impl_.m_position_),
    2,
    1,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_UNIT, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_UNIT, _impl_.m_units_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW, _impl_.m_isenter_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW, _impl_.m_units_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse, value_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_POSITION, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_POSITION, _impl_.m_position_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING, _impl_.m_type_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING, _impl_.m_tid_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::pbnet::MATCHING_MEMBER, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::MATCHING_MEMBER, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::MATCHING_MEMBER, _impl_.m_id_),
    PROTOBUF_FIELD_OFFSET(::pbnet::MATCHING_MEMBER, _impl_.m_name_),
    PROTOBUF_FIELD_OFFSET(::pbnet::MATCHING_MEMBER, _impl_.m_lv_),
    PROTOBUF_FIELD_OFFSET(::pbnet::MATCHING_MEMBER, _impl_.m_begmatch_),
    PROTOBUF_FIELD_OFFSET(::pbnet::MATCHING_MEMBER, _impl_.m_isconfirm_),
    1,
    0,
    2,
    3,
    4,
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_RESPONSE, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_RESPONSE, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_RESPONSE, _impl_.m_id_),
    0,
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CANCEL, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CANCEL, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CANCEL, _impl_.m_type_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CANCEL, _impl_.m_roomid_),
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CANCEL_RESPONSE, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CANCEL_RESPONSE, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CANCEL_RESPONSE, _impl_.m_type_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CANCEL_RESPONSE, _impl_.m_stat_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MEMBER_MATCHING_CANCEL, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MEMBER_MATCHING_CANCEL, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MEMBER_MATCHING_CANCEL, _impl_.m_type_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MEMBER_MATCHING_CANCEL, _impl_.m_canceltype_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MEMBER_MATCHING_CANCEL, _impl_.m_cancelmember_),
    0,
    1,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_WAITCONFIRM, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_WAITCONFIRM, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_WAITCONFIRM, _impl_.m_type_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_WAITCONFIRM, _impl_.m_roomid_),
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CONFIRM, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CONFIRM, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CONFIRM, _impl_.m_type_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CONFIRM, _impl_.m_roomid_),
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE, _impl_.m_type_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE, _impl_.m_roomid_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE, _impl_.m_stat_),
    1,
    0,
    2,
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_MATCHING_CONFIRM, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_MATCHING_CONFIRM, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_MATCHING_CONFIRM, _impl_.m_type_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_MATCHING_CONFIRM, _impl_.m_roomid_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_MATCHING_CONFIRM, _impl_.m_roleid_),
    1,
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SYNC, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SYNC, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SYNC, _impl_.m_type_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SYNC, _impl_.m_roomid_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SYNC, _impl_.m_member_),
    1,
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SUCCESS_RESPONSE, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SUCCESS_RESPONSE, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SUCCESS_RESPONSE, _impl_.m_type_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SUCCESS_RESPONSE, _impl_.m_roomid_),
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SUCCESS, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SUCCESS, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SUCCESS, _impl_.m_type_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SUCCESS, _impl_.m_roomid_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SUCCESS, _impl_.m_member_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SUCCESS, _impl_.m_dataid_),
    1,
    0,
    ~0u,
    2,
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ENTER_PLAYS, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ENTER_PLAYS, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ENTER_PLAYS, _impl_.m_type_),
    PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ENTER_PLAYS, _impl_.m_roomid_),
    1,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::pbnet::PROBUFF_NET_HEARTBEAT)},
        { 8, 17, -1, sizeof(::pbnet::PROBUFF_NET_ERROR)},
        { 18, 28, -1, sizeof(::pbnet::PROBUFF_NET_ERROR_RESPONSE)},
        { 30, -1, -1, sizeof(::pbnet::PROBUFF_NET_GET_TIME)},
        { 38, 47, -1, sizeof(::pbnet::PROBUFF_NET_GET_TIME_RESPONSE)},
        { 48, -1, -1, sizeof(::pbnet::PROBUFF_NET_GET_NOTICE)},
        { 56, -1, -1, sizeof(::pbnet::PROBUFF_NET_GET_NOTICE_RESPONSE)},
        { 65, 76, -1, sizeof(::pbnet::PROBUFF_NET_ACOUNT_LOGIN)},
        { 79, 92, -1, sizeof(::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)},
        { 97, 110, -1, sizeof(::pbnet::PROBUFF_NET_ROLE_LOGIN)},
        { 115, -1, -1, sizeof(::pbnet::PROBUFF_NET_ROLE_SYNC)},
        { 123, 134, -1, sizeof(::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE)},
        { 137, -1, -1, sizeof(::pbnet::PROBUFF_NET_BAG_SYNC)},
        { 145, 154, -1, sizeof(::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE)},
        { 155, -1, -1, sizeof(::pbnet::PROBUFF_NET_BAG_UPDATE)},
        { 163, 173, -1, sizeof(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem)},
        { 175, 185, -1, sizeof(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem)},
        { 187, -1, -1, sizeof(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE)},
        { 199, 208, -1, sizeof(::pbnet::PROBUFF_NET_CMD)},
        { 209, 220, -1, sizeof(::pbnet::PROBUFF_NET_CHAT)},
        { 223, 235, -1, sizeof(::pbnet::chatitem)},
        { 239, 251, -1, sizeof(::pbnet::PROBUFF_NET_CHAT_RESPONSE)},
        { 255, 264, -1, sizeof(::pbnet::PROBUFF_NET_SWITCH_LINE)},
        { 265, 275, -1, sizeof(::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE)},
        { 277, -1, -1, sizeof(::pbnet::PROBUFF_NET_MAIL_LIST)},
        { 285, 295, -1, sizeof(::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse)},
        { 297, -1, -1, sizeof(::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE)},
        { 306, 315, -1, sizeof(::pbnet::PROBUFF_NET_MAIL_READ)},
        { 316, 326, -1, sizeof(::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE)},
        { 328, 337, -1, sizeof(::pbnet::PROBUFF_NET_MAIL_DRAW)},
        { 338, 348, -1, sizeof(::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE)},
        { 350, 359, -1, sizeof(::pbnet::PROBUFF_NET_MAIL_DEL)},
        { 360, 370, -1, sizeof(::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE)},
        { 372, 382, -1, sizeof(::pbnet::VECTOR2)},
        { 384, 395, -1, sizeof(::pbnet::VECTOR3)},
        { 398, 409, -1, sizeof(::pbnet::UNIT_POSITION)},
        { 412, 423, -1, sizeof(::pbnet::UNIT)},
        { 426, -1, -1, sizeof(::pbnet::PROBUFF_NET_SYNC_UNIT)},
        { 435, 445, -1, sizeof(::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW)},
        { 447, 457, -1, sizeof(::pbnet::PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse)},
        { 459, -1, -1, sizeof(::pbnet::PROBUFF_NET_SYNC_POSITION)},
        { 468, 478, -1, sizeof(::pbnet::PROBUFF_NET_MATCHING)},
        { 480, 493, -1, sizeof(::pbnet::MATCHING_MEMBER)},
        { 498, 507, -1, sizeof(::pbnet::PROBUFF_NET_MATCHING_RESPONSE)},
        { 508, 518, -1, sizeof(::pbnet::PROBUFF_NET_MATCHING_CANCEL)},
        { 520, 530, -1, sizeof(::pbnet::PROBUFF_NET_MATCHING_CANCEL_RESPONSE)},
        { 532, 543, -1, sizeof(::pbnet::PROBUFF_NET_MEMBER_MATCHING_CANCEL)},
        { 546, 556, -1, sizeof(::pbnet::PROBUFF_NET_MATCHING_WAITCONFIRM)},
        { 558, 568, -1, sizeof(::pbnet::PROBUFF_NET_MATCHING_CONFIRM)},
        { 570, 581, -1, sizeof(::pbnet::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE)},
        { 584, 595, -1, sizeof(::pbnet::PROBUFF_NET_SYNC_MATCHING_CONFIRM)},
        { 598, 609, -1, sizeof(::pbnet::PROBUFF_NET_MATCHING_SYNC)},
        { 612, 622, -1, sizeof(::pbnet::PROBUFF_NET_MATCHING_SUCCESS_RESPONSE)},
        { 624, 636, -1, sizeof(::pbnet::PROBUFF_NET_MATCHING_SUCCESS)},
        { 640, 650, -1, sizeof(::pbnet::PROBUFF_NET_ENTER_PLAYS)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::pbnet::_PROBUFF_NET_HEARTBEAT_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_ERROR_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_ERROR_RESPONSE_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_GET_TIME_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_GET_TIME_RESPONSE_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_GET_NOTICE_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_GET_NOTICE_RESPONSE_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_ACOUNT_LOGIN_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_ACOUNT_LOGIN_RESPONSE_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_ROLE_LOGIN_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_ROLE_SYNC_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_ROLE_SYNC_RESPONSE_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_BAG_SYNC_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_BAG_SYNC_RESPONSE_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_BAG_UPDATE_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_BAG_UPDATE_RESPONSE_additem_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_BAG_UPDATE_RESPONSE_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_CMD_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_CHAT_default_instance_._instance,
    &::pbnet::_chatitem_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_CHAT_RESPONSE_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_SWITCH_LINE_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_SWITCH_LINE_RESPONSE_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_MAIL_LIST_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_MAIL_LIST_RESPONSE_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_MAIL_READ_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_MAIL_READ_RESPONSE_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_MAIL_DRAW_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_MAIL_DRAW_RESPONSE_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_MAIL_DEL_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_MAIL_DEL_RESPONSE_default_instance_._instance,
    &::pbnet::_VECTOR2_default_instance_._instance,
    &::pbnet::_VECTOR3_default_instance_._instance,
    &::pbnet::_UNIT_POSITION_default_instance_._instance,
    &::pbnet::_UNIT_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_SYNC_UNIT_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_ENTER_LEAVE_VIEW_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_SYNC_POSITION_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_MATCHING_default_instance_._instance,
    &::pbnet::_MATCHING_MEMBER_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_MATCHING_RESPONSE_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_MATCHING_CANCEL_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_MATCHING_CANCEL_RESPONSE_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_MEMBER_MATCHING_CANCEL_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_MATCHING_WAITCONFIRM_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_MATCHING_CONFIRM_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_MATCHING_CONFIRM_RESPONSE_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_SYNC_MATCHING_CONFIRM_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_MATCHING_SYNC_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_MATCHING_SUCCESS_RESPONSE_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_MATCHING_SUCCESS_default_instance_._instance,
    &::pbnet::_PROBUFF_NET_ENTER_PLAYS_default_instance_._instance,
};
const char descriptor_table_protodef_net_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\tnet.proto\022\005pbnet\032\010db.proto\"\027\n\025PROBUFF_"
    "NET_HEARTBEAT\"7\n\021PROBUFF_NET_ERROR\022\025\n\010m_"
    "errnum\030\001 \001(\005H\000\210\001\001B\013\n\t_m_errnum\"l\n\032PROBUF"
    "F_NET_ERROR_RESPONSE\022\025\n\010m_errnum\030\001 \001(\005H\000"
    "\210\001\001\022\031\n\014m_errmessage\030\002 \001(\tH\001\210\001\001B\013\n\t_m_err"
    "numB\017\n\r_m_errmessage\"\026\n\024PROBUFF_NET_GET_"
    "TIME\"=\n\035PROBUFF_NET_GET_TIME_RESPONSE\022\022\n"
    "\005m_utc\030\001 \001(\005H\000\210\001\001B\010\n\006_m_utc\"\030\n\026PROBUFF_N"
    "ET_GET_NOTICE\"E\n\037PROBUFF_NET_GET_NOTICE_"
    "RESPONSE\022\"\n\tm_notices\030\001 \003(\0132\017.pbdb.db_no"
    "tice\"\210\001\n\030PROBUFF_NET_ACOUNT_LOGIN\022\023\n\006m_a"
    "rea\030\001 \001(\005H\000\210\001\001\022\026\n\tm_account\030\002 \001(\tH\001\210\001\001\022\027"
    "\n\nm_password\030\003 \001(\tH\002\210\001\001B\t\n\007_m_areaB\014\n\n_m"
    "_accountB\r\n\013_m_password\"\335\001\n!PROBUFF_NET_"
    "ACOUNT_LOGIN_RESPONSE\022\023\n\006m_area\030\001 \001(\005H\000\210"
    "\001\001\022\025\n\010m_roleid\030\002 \001(\003H\001\210\001\001\022\026\n\tm_session\030\003"
    " \001(\tH\002\210\001\001\022\026\n\tm_account\030\004 \001(\tH\003\210\001\001\022\030\n\013m_g"
    "atewayid\030\005 \001(\005H\004\210\001\001B\t\n\007_m_areaB\013\n\t_m_rol"
    "eidB\014\n\n_m_sessionB\014\n\n_m_accountB\016\n\014_m_ga"
    "tewayid\"\324\001\n\026PROBUFF_NET_ROLE_LOGIN\022\025\n\010m_"
    "roleid\030\001 \001(\003H\000\210\001\001\022\026\n\tm_session\030\002 \001(\tH\001\210\001"
    "\001\022\027\n\nm_iscreate\030\003 \001(\010H\002\210\001\001\022\023\n\006m_area\030\004 \001"
    "(\005H\003\210\001\001\022\030\n\013m_gatewayid\030\005 \001(\005H\004\210\001\001B\013\n\t_m_"
    "roleidB\014\n\n_m_sessionB\r\n\013_m_iscreateB\t\n\007_"
    "m_areaB\016\n\014_m_gatewayid\"\027\n\025PROBUFF_NET_RO"
    "LE_SYNC\"\252\001\n\036PROBUFF_NET_ROLE_SYNC_RESPON"
    "SE\022\"\n\006m_role\030\001 \001(\0132\r.pbdb.db_roleH\000\210\001\001\022 "
    "\n\005m_bag\030\002 \001(\0132\014.pbdb.db_bagH\001\210\001\001\022\"\n\006m_ta"
    "sk\030\003 \001(\0132\r.pbdb.db_taskH\002\210\001\001B\t\n\007_m_roleB"
    "\010\n\006_m_bagB\t\n\007_m_task\"\026\n\024PROBUFF_NET_BAG_"
    "SYNC\"K\n\035PROBUFF_NET_BAG_SYNC_RESPONSE\022 \n"
    "\005m_bag\030\001 \001(\0132\014.pbdb.db_bagH\000\210\001\001B\010\n\006_m_ba"
    "g\"\030\n\026PROBUFF_NET_BAG_UPDATE\"\361\002\n\037PROBUFF_"
    "NET_BAG_UPDATE_RESPONSE\022B\n\nm_delitems\030\001 "
    "\003(\0132..pbnet.PROBUFF_NET_BAG_UPDATE_RESPO"
    "NSE.delitem\022\031\n\021m_delnostackitems\030\002 \003(\005\022B"
    "\n\nm_additems\030\003 \003(\0132..pbnet.PROBUFF_NET_B"
    "AG_UPDATE_RESPONSE.additem\022\031\n\021m_addnosta"
    "ckitems\030\004 \003(\005\032G\n\007delitem\022\021\n\004m_id\030\001 \001(\005H\000"
    "\210\001\001\022\024\n\007m_count\030\002 \001(\005H\001\210\001\001B\007\n\005_m_idB\n\n\010_m"
    "_count\032G\n\007additem\022\021\n\004m_id\030\001 \001(\005H\000\210\001\001\022\024\n\007"
    "m_count\030\002 \001(\005H\001\210\001\001B\007\n\005_m_idB\n\n\010_m_count\""
    "/\n\017PROBUFF_NET_CMD\022\022\n\005m_cmd\030\001 \001(\tH\000\210\001\001B\010"
    "\n\006_m_cmd\"\202\001\n\020PROBUFF_NET_CHAT\022\023\n\006m_type\030"
    "\001 \001(\005H\000\210\001\001\022\030\n\013m_channelid\030\002 \001(\005H\001\210\001\001\022\026\n\t"
    "m_content\030\003 \001(\tH\002\210\001\001B\t\n\007_m_typeB\016\n\014_m_ch"
    "annelidB\014\n\n_m_content\"\232\001\n\010chatitem\022\025\n\010m_"
    "roleid\030\001 \001(\003H\000\210\001\001\022\027\n\nm_rolename\030\002 \001(\tH\001\210"
    "\001\001\022\026\n\tm_content\030\003 \001(\tH\002\210\001\001\022\022\n\005m_utc\030\004 \001("
    "\005H\003\210\001\001B\013\n\t_m_roleidB\r\n\013_m_rolenameB\014\n\n_m"
    "_contentB\010\n\006_m_utc\"\252\001\n\031PROBUFF_NET_CHAT_"
    "RESPONSE\022\023\n\006m_type\030\001 \001(\005H\000\210\001\001\022\030\n\013m_chann"
    "elid\030\002 \001(\005H\001\210\001\001\022#\n\nm_chatlist\030\003 \003(\0132\017.pb"
    "net.chatitem\022\023\n\006m_stat\030\004 \001(\010H\002\210\001\001B\t\n\007_m_"
    "typeB\016\n\014_m_channelidB\t\n\007_m_stat\"9\n\027PROBU"
    "FF_NET_SWITCH_LINE\022\023\n\006m_line\030\001 \001(\005H\000\210\001\001B"
    "\t\n\007_m_line\"b\n PROBUFF_NET_SWITCH_LINE_RE"
    "SPONSE\022\023\n\006m_line\030\001 \001(\005H\000\210\001\001\022\023\n\006m_stat\030\002 "
    "\001(\010H\001\210\001\001B\t\n\007_m_lineB\t\n\007_m_stat\"\027\n\025PROBUF"
    "F_NET_MAIL_LIST\"\234\001\n\036PROBUFF_NET_MAIL_LIS"
    "T_RESPONSE\022@\n\006m_mail\030\001 \003(\01320.pbnet.PROBU"
    "FF_NET_MAIL_LIST_RESPONSE.MMailEntry\0328\n\n"
    "MMailEntry\022\013\n\003key\030\001 \001(\005\022\031\n\005value\030\002 \001(\0132\n"
    ".pbdb.mail:\0028\001\";\n\025PROBUFF_NET_MAIL_READ\022"
    "\025\n\010m_mailid\030\001 \001(\003H\000\210\001\001B\013\n\t_m_mailid\"d\n\036P"
    "ROBUFF_NET_MAIL_READ_RESPONSE\022\025\n\010m_maili"
    "d\030\001 \001(\003H\000\210\001\001\022\023\n\006m_stat\030\002 \001(\010H\001\210\001\001B\013\n\t_m_"
    "mailidB\t\n\007_m_stat\";\n\025PROBUFF_NET_MAIL_DR"
    "AW\022\025\n\010m_mailid\030\001 \001(\003H\000\210\001\001B\013\n\t_m_mailid\"d"
    "\n\036PROBUFF_NET_MAIL_DRAW_RESPONSE\022\025\n\010m_ma"
    "ilid\030\001 \001(\003H\000\210\001\001\022\023\n\006m_stat\030\002 \001(\010H\001\210\001\001B\013\n\t"
    "_m_mailidB\t\n\007_m_stat\":\n\024PROBUFF_NET_MAIL"
    "_DEL\022\025\n\010m_mailid\030\001 \001(\003H\000\210\001\001B\013\n\t_m_mailid"
    "\"c\n\035PROBUFF_NET_MAIL_DEL_RESPONSE\022\025\n\010m_m"
    "ailid\030\001 \001(\003H\000\210\001\001\022\023\n\006m_stat\030\002 \001(\010H\001\210\001\001B\013\n"
    "\t_m_mailidB\t\n\007_m_stat\"=\n\007VECTOR2\022\020\n\003m_x\030"
    "\001 \001(\005H\000\210\001\001\022\020\n\003m_y\030\002 \001(\005H\001\210\001\001B\006\n\004_m_xB\006\n\004"
    "_m_y\"W\n\007VECTOR3\022\020\n\003m_x\030\001 \001(\005H\000\210\001\001\022\020\n\003m_y"
    "\030\002 \001(\005H\001\210\001\001\022\020\n\003m_z\030\003 \001(\005H\002\210\001\001B\006\n\004_m_xB\006\n"
    "\004_m_yB\006\n\004_m_z\"\205\001\n\rUNIT_POSITION\022\021\n\004m_id\030"
    "\002 \001(\003H\000\210\001\001\022\'\n\nm_position\030\003 \001(\0132\016.pbnet.V"
    "ECTOR2H\001\210\001\001\022\024\n\007m_angle\030\004 \001(\005H\002\210\001\001B\007\n\005_m_"
    "idB\r\n\013_m_positionB\n\n\010_m_angle\"\216\001\n\004UNIT\022!"
    "\n\006m_type\030\001 \001(\0162\014.pbnet.eunitH\000\210\001\001\022\021\n\004m_i"
    "d\030\002 \001(\003H\001\210\001\001\022-\n\nm_position\030\003 \001(\0132\024.pbnet"
    ".UNIT_POSITIONH\002\210\001\001B\t\n\007_m_typeB\007\n\005_m_idB"
    "\r\n\013_m_position\"5\n\025PROBUFF_NET_SYNC_UNIT\022"
    "\034\n\007m_units\030\001 \003(\0132\013.pbnet.UNIT\"U\n\034PROBUFF"
    "_NET_ENTER_LEAVE_VIEW\022\026\n\tm_isenter\030\001 \001(\010"
    "H\000\210\001\001\022\017\n\007m_units\030\002 \003(\003B\014\n\n_m_isenter\"\250\001\n"
    "\031PROBUFF_NET_SYNC_POSITION\022C\n\nm_position"
    "\030\001 \003(\0132/.pbnet.PROBUFF_NET_SYNC_POSITION"
    ".MPositionEntry\032F\n\016MPositionEntry\022\013\n\003key"
    "\030\001 \001(\003\022#\n\005value\030\002 \001(\0132\024.pbnet.UNIT_POSIT"
    "ION:\0028\001\"c\n\024PROBUFF_NET_MATCHING\022\"\n\006m_typ"
    "e\030\001 \001(\0162\r.pbnet.eplaysH\000\210\001\001\022\022\n\005m_tid\030\002 \001"
    "(\005H\001\210\001\001B\t\n\007_m_typeB\010\n\006_m_tid\"\273\001\n\017MATCHIN"
    "G_MEMBER\022\021\n\004m_id\030\001 \001(\003H\000\210\001\001\022\023\n\006m_name\030\002 "
    "\001(\tH\001\210\001\001\022\021\n\004m_lv\030\003 \001(\005H\002\210\001\001\022\027\n\nm_begmatc"
    "h\030\004 \001(\005H\003\210\001\001\022\030\n\013m_isconfirm\030\005 \001(\010H\004\210\001\001B\007"
    "\n\005_m_idB\t\n\007_m_nameB\007\n\005_m_lvB\r\n\013_m_begmat"
    "chB\016\n\014_m_isconfirm\";\n\035PROBUFF_NET_MATCHI"
    "NG_RESPONSE\022\021\n\004m_id\030\001 \001(\003H\000\210\001\001B\007\n\005_m_id\""
    "p\n\033PROBUFF_NET_MATCHING_CANCEL\022\"\n\006m_type"
    "\030\001 \001(\0162\r.pbnet.eplaysH\000\210\001\001\022\025\n\010m_roomid\030\002"
    " \001(\003H\001\210\001\001B\t\n\007_m_typeB\013\n\t_m_roomid\"\223\001\n$PR"
    "OBUFF_NET_MATCHING_CANCEL_RESPONSE\022\"\n\006m_"
    "type\030\001 \001(\0162\r.pbnet.eplaysH\000\210\001\001\0221\n\006m_stat"
    "\030\002 \001(\0162\034.pbnet.ematching_cancel_statH\001\210\001"
    "\001B\t\n\007_m_typeB\t\n\007_m_stat\"\265\001\n\"PROBUFF_NET_"
    "MEMBER_MATCHING_CANCEL\022\"\n\006m_type\030\001 \001(\0162\r"
    ".pbnet.eplaysH\000\210\001\001\0227\n\014m_canceltype\030\002 \001(\016"
    "2\034.pbnet.etype_matching_cancelH\001\210\001\001\022\026\n\016m"
    "_cancelmember\030\003 \003(\003B\t\n\007_m_typeB\017\n\r_m_can"
    "celtype\"u\n PROBUFF_NET_MATCHING_WAITCONF"
    "IRM\022\"\n\006m_type\030\001 \001(\0162\r.pbnet.eplaysH\000\210\001\001\022"
    "\025\n\010m_roomid\030\002 \001(\003H\001\210\001\001B\t\n\007_m_typeB\013\n\t_m_"
    "roomid\"q\n\034PROBUFF_NET_MATCHING_CONFIRM\022\""
    "\n\006m_type\030\001 \001(\0162\r.pbnet.eplaysH\000\210\001\001\022\025\n\010m_"
    "roomid\030\002 \001(\003H\001\210\001\001B\t\n\007_m_typeB\013\n\t_m_roomi"
    "d\"\271\001\n%PROBUFF_NET_MATCHING_CONFIRM_RESPO"
    "NSE\022\"\n\006m_type\030\001 \001(\0162\r.pbnet.eplaysH\000\210\001\001\022"
    "\025\n\010m_roomid\030\002 \001(\003H\001\210\001\001\0222\n\006m_stat\030\003 \001(\0162\035"
    ".pbnet.ematching_confirm_statH\002\210\001\001B\t\n\007_m"
    "_typeB\013\n\t_m_roomidB\t\n\007_m_stat\"\210\001\n!PROBUF"
    "F_NET_SYNC_MATCHING_CONFIRM\022\"\n\006m_type\030\001 "
    "\001(\0162\r.pbnet.eplaysH\000\210\001\001\022\025\n\010m_roomid\030\002 \001("
    "\003H\001\210\001\001\022\020\n\010m_roleid\030\003 \003(\003B\t\n\007_m_typeB\013\n\t_"
    "m_roomid\"\230\001\n\031PROBUFF_NET_MATCHING_SYNC\022\""
    "\n\006m_type\030\001 \001(\0162\r.pbnet.eplaysH\000\210\001\001\022\025\n\010m_"
    "roomid\030\002 \001(\003H\001\210\001\001\022(\n\010m_member\030\003 \003(\0132\026.pb"
    "net.MATCHING_MEMBERB\t\n\007_m_typeB\013\n\t_m_roo"
    "mid\"z\n%PROBUFF_NET_MATCHING_SUCCESS_RESP"
    "ONSE\022\"\n\006m_type\030\001 \001(\0162\r.pbnet.eplaysH\000\210\001\001"
    "\022\025\n\010m_roomid\030\002 \001(\003H\001\210\001\001B\t\n\007_m_typeB\013\n\t_m"
    "_roomid\"\277\001\n\034PROBUFF_NET_MATCHING_SUCCESS"
    "\022\"\n\006m_type\030\001 \001(\0162\r.pbnet.eplaysH\000\210\001\001\022\025\n\010"
    "m_roomid\030\002 \001(\003H\001\210\001\001\022(\n\010m_member\030\003 \003(\0132\026."
    "pbnet.MATCHING_MEMBER\022\025\n\010m_dataid\030\004 \001(\005H"
    "\002\210\001\001B\t\n\007_m_typeB\013\n\t_m_roomidB\013\n\t_m_datai"
    "d\"l\n\027PROBUFF_NET_ENTER_PLAYS\022\"\n\006m_type\030\001"
    " \001(\0162\r.pbnet.eplaysH\000\210\001\001\022\025\n\010m_roomid\030\002 \001"
    "(\003H\001\210\001\001B\t\n\007_m_typeB\013\n\t_m_roomid*F\n\017enum_"
    "logic_chat\022\021\n\rget_chat_list\020\000\022\016\n\nchat_sp"
    "eak\020\001\022\020\n\014updata_speck\020\002*<\n\005eunit\022\016\n\neuni"
    "t_role\020\000\022\021\n\reunit_monster\020\001\022\020\n\014eunit_reg"
    "ion\020\002*;\n\006eplays\022\037\n\033eplays_go_underground"
    "palace\020\000\022\020\n\014eplays_count\020\001*\233\001\n\025ematching"
    "_cancel_stat\022\034\n\030ematching_cancel_success"
    "\020\000\022\032\n\026ematching_cancel_stage\020\001\022 \n\034ematch"
    "ing_cancel_roomnotfind\020\002\022&\n\"ematching_ca"
    "ncel_roommembernotfind\020\003*\253\001\n\025etype_match"
    "ing_cancel\022 \n\034etype_matching_cancel_acti"
    "ve\020\000\022!\n\035etype_matching_cancel_timeout\020\001\022"
    "&\n\"etype_matching_waitconfirm_timeout\020\002\022"
    "%\n!etype_matching_waitcreate_timeout\020\003*\240"
    "\001\n\026ematching_confirm_stat\022\035\n\031ematching_c"
    "onfirm_success\020\000\022\033\n\027ematching_confirm_st"
    "age\020\001\022!\n\035ematching_confirm_roomnotfind\020\002"
    "\022\'\n#ematching_confirm_roommembernotfind\020"
    "\003B\002H\001b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_net_2eproto_deps[1] =
    {
        &::descriptor_table_db_2eproto,
};
static ::absl::once_flag descriptor_table_net_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_net_2eproto = {
    false,
    false,
    6413,
    descriptor_table_protodef_net_2eproto,
    "net.proto",
    &descriptor_table_net_2eproto_once,
    descriptor_table_net_2eproto_deps,
    1,
    55,
    schemas,
    file_default_instances,
    TableStruct_net_2eproto::offsets,
    file_level_metadata_net_2eproto,
    file_level_enum_descriptors_net_2eproto,
    file_level_service_descriptors_net_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_net_2eproto_getter() {
  return &descriptor_table_net_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_net_2eproto(&descriptor_table_net_2eproto);
namespace pbnet {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* enum_logic_chat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[0];
}
bool enum_logic_chat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eunit_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[1];
}
bool eunit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eplays_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[2];
}
bool eplays_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ematching_cancel_stat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[3];
}
bool ematching_cancel_stat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* etype_matching_cancel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[4];
}
bool etype_matching_cancel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ematching_confirm_stat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[5];
}
bool ematching_confirm_stat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class PROBUFF_NET_HEARTBEAT::_Internal {
 public:
};

PROBUFF_NET_HEARTBEAT::PROBUFF_NET_HEARTBEAT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_HEARTBEAT)
}
PROBUFF_NET_HEARTBEAT::PROBUFF_NET_HEARTBEAT(const PROBUFF_NET_HEARTBEAT& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PROBUFF_NET_HEARTBEAT* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_HEARTBEAT)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_HEARTBEAT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_HEARTBEAT::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_HEARTBEAT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[0]);
}
// ===================================================================

class PROBUFF_NET_ERROR::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ERROR>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ERROR, _impl_._has_bits_);
  static void set_has_m_errnum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_ERROR::PROBUFF_NET_ERROR(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ERROR)
}
PROBUFF_NET_ERROR::PROBUFF_NET_ERROR(const PROBUFF_NET_ERROR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ERROR)
}

inline void PROBUFF_NET_ERROR::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_errnum_) { 0 }

  };
}

PROBUFF_NET_ERROR::~PROBUFF_NET_ERROR() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ERROR)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_ERROR::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_ERROR::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_ERROR::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ERROR)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_errnum_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ERROR::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_errnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_m_errnum(&has_bits);
          _impl_.m_errnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PROBUFF_NET_ERROR::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ERROR)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 m_errnum = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_m_errnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ERROR)
  return target;
}

::size_t PROBUFF_NET_ERROR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ERROR)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 m_errnum = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_m_errnum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_ERROR::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_ERROR::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_ERROR::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_ERROR::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_ERROR*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_ERROR&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ERROR)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_m_errnum(from._internal_m_errnum());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_ERROR::CopyFrom(const PROBUFF_NET_ERROR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ERROR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ERROR::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ERROR::InternalSwap(PROBUFF_NET_ERROR* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.m_errnum_, other->_impl_.m_errnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ERROR::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[1]);
}
// ===================================================================

class PROBUFF_NET_ERROR_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ERROR_RESPONSE>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ERROR_RESPONSE, _impl_._has_bits_);
  static void set_has_m_errnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_errmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_ERROR_RESPONSE::PROBUFF_NET_ERROR_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ERROR_RESPONSE)
}
PROBUFF_NET_ERROR_RESPONSE::PROBUFF_NET_ERROR_RESPONSE(const PROBUFF_NET_ERROR_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_ERROR_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_errmessage_) {}

    , decltype(_impl_.m_errnum_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.m_errmessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.m_errmessage_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.m_errmessage_.Set(from._internal_m_errmessage(), _this->GetArenaForAllocation());
  }
  _this->_impl_.m_errnum_ = from._impl_.m_errnum_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ERROR_RESPONSE)
}

inline void PROBUFF_NET_ERROR_RESPONSE::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_errmessage_) {}

    , decltype(_impl_.m_errnum_) { 0 }

  };
  _impl_.m_errmessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.m_errmessage_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PROBUFF_NET_ERROR_RESPONSE::~PROBUFF_NET_ERROR_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ERROR_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_ERROR_RESPONSE::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_errmessage_.Destroy();
}

void PROBUFF_NET_ERROR_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_ERROR_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ERROR_RESPONSE)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.m_errmessage_.ClearNonDefaultToEmpty();
  }
  _impl_.m_errnum_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ERROR_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_errnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_m_errnum(&has_bits);
          _impl_.m_errnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string m_errmessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_m_errmessage();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.PROBUFF_NET_ERROR_RESPONSE.m_errmessage"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PROBUFF_NET_ERROR_RESPONSE::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ERROR_RESPONSE)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 m_errnum = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_m_errnum(), target);
  }

  // optional string m_errmessage = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_m_errmessage();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "pbnet.PROBUFF_NET_ERROR_RESPONSE.m_errmessage");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ERROR_RESPONSE)
  return target;
}

::size_t PROBUFF_NET_ERROR_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ERROR_RESPONSE)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string m_errmessage = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_m_errmessage());
    }

    // optional int32 m_errnum = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_m_errnum());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_ERROR_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_ERROR_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_ERROR_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_ERROR_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_ERROR_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_ERROR_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ERROR_RESPONSE)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_m_errmessage(from._internal_m_errmessage());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_errnum_ = from._impl_.m_errnum_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_ERROR_RESPONSE::CopyFrom(const PROBUFF_NET_ERROR_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ERROR_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ERROR_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ERROR_RESPONSE::InternalSwap(PROBUFF_NET_ERROR_RESPONSE* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.m_errmessage_, lhs_arena,
                                       &other->_impl_.m_errmessage_, rhs_arena);

  swap(_impl_.m_errnum_, other->_impl_.m_errnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ERROR_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[2]);
}
// ===================================================================

class PROBUFF_NET_GET_TIME::_Internal {
 public:
};

PROBUFF_NET_GET_TIME::PROBUFF_NET_GET_TIME(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_GET_TIME)
}
PROBUFF_NET_GET_TIME::PROBUFF_NET_GET_TIME(const PROBUFF_NET_GET_TIME& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PROBUFF_NET_GET_TIME* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_GET_TIME)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_GET_TIME::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_GET_TIME::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_GET_TIME::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[3]);
}
// ===================================================================

class PROBUFF_NET_GET_TIME_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_GET_TIME_RESPONSE>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PROBUFF_NET_GET_TIME_RESPONSE, _impl_._has_bits_);
  static void set_has_m_utc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_GET_TIME_RESPONSE::PROBUFF_NET_GET_TIME_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
}
PROBUFF_NET_GET_TIME_RESPONSE::PROBUFF_NET_GET_TIME_RESPONSE(const PROBUFF_NET_GET_TIME_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
}

inline void PROBUFF_NET_GET_TIME_RESPONSE::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_utc_) { 0 }

  };
}

PROBUFF_NET_GET_TIME_RESPONSE::~PROBUFF_NET_GET_TIME_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_GET_TIME_RESPONSE::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_GET_TIME_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_GET_TIME_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_utc_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_GET_TIME_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_utc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_m_utc(&has_bits);
          _impl_.m_utc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PROBUFF_NET_GET_TIME_RESPONSE::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 m_utc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_m_utc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
  return target;
}

::size_t PROBUFF_NET_GET_TIME_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 m_utc = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_m_utc());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_GET_TIME_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_GET_TIME_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_GET_TIME_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_GET_TIME_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_GET_TIME_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_GET_TIME_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_m_utc(from._internal_m_utc());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_GET_TIME_RESPONSE::CopyFrom(const PROBUFF_NET_GET_TIME_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_GET_TIME_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_GET_TIME_RESPONSE::InternalSwap(PROBUFF_NET_GET_TIME_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.m_utc_, other->_impl_.m_utc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_GET_TIME_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[4]);
}
// ===================================================================

class PROBUFF_NET_GET_NOTICE::_Internal {
 public:
};

PROBUFF_NET_GET_NOTICE::PROBUFF_NET_GET_NOTICE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_GET_NOTICE)
}
PROBUFF_NET_GET_NOTICE::PROBUFF_NET_GET_NOTICE(const PROBUFF_NET_GET_NOTICE& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PROBUFF_NET_GET_NOTICE* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_GET_NOTICE)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_GET_NOTICE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_GET_NOTICE::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_GET_NOTICE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[5]);
}
// ===================================================================

class PROBUFF_NET_GET_NOTICE_RESPONSE::_Internal {
 public:
};

void PROBUFF_NET_GET_NOTICE_RESPONSE::clear_m_notices() {
  _internal_mutable_m_notices()->Clear();
}
PROBUFF_NET_GET_NOTICE_RESPONSE::PROBUFF_NET_GET_NOTICE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_GET_NOTICE_RESPONSE)
}
PROBUFF_NET_GET_NOTICE_RESPONSE::PROBUFF_NET_GET_NOTICE_RESPONSE(const PROBUFF_NET_GET_NOTICE_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_GET_NOTICE_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.m_notices_){from._impl_.m_notices_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_GET_NOTICE_RESPONSE)
}

inline void PROBUFF_NET_GET_NOTICE_RESPONSE::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.m_notices_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PROBUFF_NET_GET_NOTICE_RESPONSE::~PROBUFF_NET_GET_NOTICE_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_GET_NOTICE_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_GET_NOTICE_RESPONSE::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_m_notices()->~RepeatedPtrField();
}

void PROBUFF_NET_GET_NOTICE_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_GET_NOTICE_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_GET_NOTICE_RESPONSE)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_m_notices()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_GET_NOTICE_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .pbdb.db_notice m_notices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_notices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PROBUFF_NET_GET_NOTICE_RESPONSE::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_GET_NOTICE_RESPONSE)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbdb.db_notice m_notices = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_m_notices_size()); i < n; i++) {
    const auto& repfield = this->_internal_m_notices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_GET_NOTICE_RESPONSE)
  return target;
}

::size_t PROBUFF_NET_GET_NOTICE_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_GET_NOTICE_RESPONSE)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbdb.db_notice m_notices = 1;
  total_size += 1UL * this->_internal_m_notices_size();
  for (const auto& msg : this->_internal_m_notices()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_GET_NOTICE_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_GET_NOTICE_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_GET_NOTICE_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_GET_NOTICE_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_GET_NOTICE_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_GET_NOTICE_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_GET_NOTICE_RESPONSE)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_m_notices()->MergeFrom(from._internal_m_notices());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_GET_NOTICE_RESPONSE::CopyFrom(const PROBUFF_NET_GET_NOTICE_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_GET_NOTICE_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_GET_NOTICE_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_GET_NOTICE_RESPONSE::InternalSwap(PROBUFF_NET_GET_NOTICE_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_m_notices()->InternalSwap(other->_internal_mutable_m_notices());
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_GET_NOTICE_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[6]);
}
// ===================================================================

class PROBUFF_NET_ACOUNT_LOGIN::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ACOUNT_LOGIN>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ACOUNT_LOGIN, _impl_._has_bits_);
  static void set_has_m_area(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m_account(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_password(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_ACOUNT_LOGIN::PROBUFF_NET_ACOUNT_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
}
PROBUFF_NET_ACOUNT_LOGIN::PROBUFF_NET_ACOUNT_LOGIN(const PROBUFF_NET_ACOUNT_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_ACOUNT_LOGIN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_account_) {}

    , decltype(_impl_.m_password_) {}

    , decltype(_impl_.m_area_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.m_account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.m_account_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.m_account_.Set(from._internal_m_account(), _this->GetArenaForAllocation());
  }
  _impl_.m_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.m_password_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.m_password_.Set(from._internal_m_password(), _this->GetArenaForAllocation());
  }
  _this->_impl_.m_area_ = from._impl_.m_area_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
}

inline void PROBUFF_NET_ACOUNT_LOGIN::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_account_) {}

    , decltype(_impl_.m_password_) {}

    , decltype(_impl_.m_area_) { 0 }

  };
  _impl_.m_account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.m_account_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.m_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.m_password_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PROBUFF_NET_ACOUNT_LOGIN::~PROBUFF_NET_ACOUNT_LOGIN() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_ACOUNT_LOGIN::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_account_.Destroy();
  _impl_.m_password_.Destroy();
}

void PROBUFF_NET_ACOUNT_LOGIN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_ACOUNT_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.m_account_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.m_password_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.m_area_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ACOUNT_LOGIN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_area = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_m_area(&has_bits);
          _impl_.m_area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string m_account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_m_account();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_account"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string m_password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_m_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_password"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PROBUFF_NET_ACOUNT_LOGIN::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 m_area = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_m_area(), target);
  }

  // optional string m_account = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_m_account();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_account");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string m_password = 3;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_m_password();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_password");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
  return target;
}

::size_t PROBUFF_NET_ACOUNT_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string m_account = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_m_account());
    }

    // optional string m_password = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_m_password());
    }

    // optional int32 m_area = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_m_area());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_ACOUNT_LOGIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_ACOUNT_LOGIN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_ACOUNT_LOGIN::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_ACOUNT_LOGIN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_ACOUNT_LOGIN*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_ACOUNT_LOGIN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_m_account(from._internal_m_account());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_m_password(from._internal_m_password());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.m_area_ = from._impl_.m_area_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_ACOUNT_LOGIN::CopyFrom(const PROBUFF_NET_ACOUNT_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ACOUNT_LOGIN::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ACOUNT_LOGIN::InternalSwap(PROBUFF_NET_ACOUNT_LOGIN* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.m_account_, lhs_arena,
                                       &other->_impl_.m_account_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.m_password_, lhs_arena,
                                       &other->_impl_.m_password_, rhs_arena);

  swap(_impl_.m_area_, other->_impl_.m_area_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ACOUNT_LOGIN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[7]);
}
// ===================================================================

class PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ACOUNT_LOGIN_RESPONSE>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, _impl_._has_bits_);
  static void set_has_m_area(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_m_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m_session(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_account(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_gatewayid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
}
PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE(const PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_ACOUNT_LOGIN_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_session_) {}

    , decltype(_impl_.m_account_) {}

    , decltype(_impl_.m_roleid_) {}

    , decltype(_impl_.m_area_) {}

    , decltype(_impl_.m_gatewayid_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.m_session_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.m_session_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.m_session_.Set(from._internal_m_session(), _this->GetArenaForAllocation());
  }
  _impl_.m_account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.m_account_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.m_account_.Set(from._internal_m_account(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.m_roleid_, &from._impl_.m_roleid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.m_gatewayid_) -
    reinterpret_cast<char*>(&_impl_.m_roleid_)) + sizeof(_impl_.m_gatewayid_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
}

inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_session_) {}

    , decltype(_impl_.m_account_) {}

    , decltype(_impl_.m_roleid_) { ::int64_t{0} }

    , decltype(_impl_.m_area_) { 0 }

    , decltype(_impl_.m_gatewayid_) { 0 }

  };
  _impl_.m_session_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.m_session_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.m_account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.m_account_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::~PROBUFF_NET_ACOUNT_LOGIN_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_session_.Destroy();
  _impl_.m_account_.Destroy();
}

void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.m_session_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.m_account_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.m_roleid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.m_gatewayid_) -
        reinterpret_cast<char*>(&_impl_.m_roleid_)) + sizeof(_impl_.m_gatewayid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_area = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_m_area(&has_bits);
          _impl_.m_area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 m_roleid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_m_roleid(&has_bits);
          _impl_.m_roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string m_session = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_m_session();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_session"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string m_account = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_m_account();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_account"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 m_gatewayid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_m_gatewayid(&has_bits);
          _impl_.m_gatewayid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 m_area = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_m_area(), target);
  }

  // optional int64 m_roleid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_m_roleid(), target);
  }

  // optional string m_session = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_m_session();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_session");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional string m_account = 4;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_m_account();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_account");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional int32 m_gatewayid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_m_gatewayid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
  return target;
}

::size_t PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string m_session = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_m_session());
    }

    // optional string m_account = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_m_account());
    }

    // optional int64 m_roleid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_m_roleid());
    }

    // optional int32 m_area = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_m_area());
    }

    // optional int32 m_gatewayid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_m_gatewayid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_ACOUNT_LOGIN_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_ACOUNT_LOGIN_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_m_session(from._internal_m_session());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_m_account(from._internal_m_account());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.m_roleid_ = from._impl_.m_roleid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.m_area_ = from._impl_.m_area_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.m_gatewayid_ = from._impl_.m_gatewayid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::CopyFrom(const PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::InternalSwap(PROBUFF_NET_ACOUNT_LOGIN_RESPONSE* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.m_session_, lhs_arena,
                                       &other->_impl_.m_session_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.m_account_, lhs_arena,
                                       &other->_impl_.m_account_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, _impl_.m_gatewayid_)
      + sizeof(PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_impl_.m_gatewayid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, _impl_.m_roleid_)>(
          reinterpret_cast<char*>(&_impl_.m_roleid_),
          reinterpret_cast<char*>(&other->_impl_.m_roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[8]);
}
// ===================================================================

class PROBUFF_NET_ROLE_LOGIN::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ROLE_LOGIN>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ROLE_LOGIN, _impl_._has_bits_);
  static void set_has_m_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_session(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_iscreate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m_area(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_m_gatewayid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

PROBUFF_NET_ROLE_LOGIN::PROBUFF_NET_ROLE_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ROLE_LOGIN)
}
PROBUFF_NET_ROLE_LOGIN::PROBUFF_NET_ROLE_LOGIN(const PROBUFF_NET_ROLE_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_ROLE_LOGIN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_session_) {}

    , decltype(_impl_.m_roleid_) {}

    , decltype(_impl_.m_iscreate_) {}

    , decltype(_impl_.m_area_) {}

    , decltype(_impl_.m_gatewayid_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.m_session_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.m_session_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.m_session_.Set(from._internal_m_session(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.m_roleid_, &from._impl_.m_roleid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.m_gatewayid_) -
    reinterpret_cast<char*>(&_impl_.m_roleid_)) + sizeof(_impl_.m_gatewayid_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ROLE_LOGIN)
}

inline void PROBUFF_NET_ROLE_LOGIN::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_session_) {}

    , decltype(_impl_.m_roleid_) { ::int64_t{0} }

    , decltype(_impl_.m_iscreate_) { false }

    , decltype(_impl_.m_area_) { 0 }

    , decltype(_impl_.m_gatewayid_) { 0 }

  };
  _impl_.m_session_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.m_session_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PROBUFF_NET_ROLE_LOGIN::~PROBUFF_NET_ROLE_LOGIN() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ROLE_LOGIN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_ROLE_LOGIN::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_session_.Destroy();
}

void PROBUFF_NET_ROLE_LOGIN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_ROLE_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ROLE_LOGIN)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.m_session_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.m_roleid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.m_gatewayid_) -
        reinterpret_cast<char*>(&_impl_.m_roleid_)) + sizeof(_impl_.m_gatewayid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ROLE_LOGIN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 m_roleid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_m_roleid(&has_bits);
          _impl_.m_roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string m_session = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_m_session();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.PROBUFF_NET_ROLE_LOGIN.m_session"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool m_iscreate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_m_iscreate(&has_bits);
          _impl_.m_iscreate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 m_area = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_m_area(&has_bits);
          _impl_.m_area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 m_gatewayid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_m_gatewayid(&has_bits);
          _impl_.m_gatewayid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PROBUFF_NET_ROLE_LOGIN::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ROLE_LOGIN)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 m_roleid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_m_roleid(), target);
  }

  // optional string m_session = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_m_session();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "pbnet.PROBUFF_NET_ROLE_LOGIN.m_session");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional bool m_iscreate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_m_iscreate(), target);
  }

  // optional int32 m_area = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_m_area(), target);
  }

  // optional int32 m_gatewayid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_m_gatewayid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ROLE_LOGIN)
  return target;
}

::size_t PROBUFF_NET_ROLE_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ROLE_LOGIN)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string m_session = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_m_session());
    }

    // optional int64 m_roleid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_m_roleid());
    }

    // optional bool m_iscreate = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2;
    }

    // optional int32 m_area = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_m_area());
    }

    // optional int32 m_gatewayid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_m_gatewayid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_ROLE_LOGIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_ROLE_LOGIN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_ROLE_LOGIN::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_ROLE_LOGIN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_ROLE_LOGIN*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_ROLE_LOGIN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ROLE_LOGIN)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_m_session(from._internal_m_session());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_roleid_ = from._impl_.m_roleid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.m_iscreate_ = from._impl_.m_iscreate_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.m_area_ = from._impl_.m_area_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.m_gatewayid_ = from._impl_.m_gatewayid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_ROLE_LOGIN::CopyFrom(const PROBUFF_NET_ROLE_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ROLE_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ROLE_LOGIN::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ROLE_LOGIN::InternalSwap(PROBUFF_NET_ROLE_LOGIN* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.m_session_, lhs_arena,
                                       &other->_impl_.m_session_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ROLE_LOGIN, _impl_.m_gatewayid_)
      + sizeof(PROBUFF_NET_ROLE_LOGIN::_impl_.m_gatewayid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ROLE_LOGIN, _impl_.m_roleid_)>(
          reinterpret_cast<char*>(&_impl_.m_roleid_),
          reinterpret_cast<char*>(&other->_impl_.m_roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ROLE_LOGIN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[9]);
}
// ===================================================================

class PROBUFF_NET_ROLE_SYNC::_Internal {
 public:
};

PROBUFF_NET_ROLE_SYNC::PROBUFF_NET_ROLE_SYNC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ROLE_SYNC)
}
PROBUFF_NET_ROLE_SYNC::PROBUFF_NET_ROLE_SYNC(const PROBUFF_NET_ROLE_SYNC& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PROBUFF_NET_ROLE_SYNC* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ROLE_SYNC)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_ROLE_SYNC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_ROLE_SYNC::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ROLE_SYNC::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[10]);
}
// ===================================================================

class PROBUFF_NET_ROLE_SYNC_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ROLE_SYNC_RESPONSE>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ROLE_SYNC_RESPONSE, _impl_._has_bits_);
  static const ::pbdb::db_role& m_role(const PROBUFF_NET_ROLE_SYNC_RESPONSE* msg);
  static void set_has_m_role(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::pbdb::db_bag& m_bag(const PROBUFF_NET_ROLE_SYNC_RESPONSE* msg);
  static void set_has_m_bag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::pbdb::db_task& m_task(const PROBUFF_NET_ROLE_SYNC_RESPONSE* msg);
  static void set_has_m_task(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::pbdb::db_role&
PROBUFF_NET_ROLE_SYNC_RESPONSE::_Internal::m_role(const PROBUFF_NET_ROLE_SYNC_RESPONSE* msg) {
  return *msg->_impl_.m_role_;
}
const ::pbdb::db_bag&
PROBUFF_NET_ROLE_SYNC_RESPONSE::_Internal::m_bag(const PROBUFF_NET_ROLE_SYNC_RESPONSE* msg) {
  return *msg->_impl_.m_bag_;
}
const ::pbdb::db_task&
PROBUFF_NET_ROLE_SYNC_RESPONSE::_Internal::m_task(const PROBUFF_NET_ROLE_SYNC_RESPONSE* msg) {
  return *msg->_impl_.m_task_;
}
void PROBUFF_NET_ROLE_SYNC_RESPONSE::clear_m_role() {
  if (_impl_.m_role_ != nullptr) _impl_.m_role_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void PROBUFF_NET_ROLE_SYNC_RESPONSE::clear_m_bag() {
  if (_impl_.m_bag_ != nullptr) _impl_.m_bag_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void PROBUFF_NET_ROLE_SYNC_RESPONSE::clear_m_task() {
  if (_impl_.m_task_ != nullptr) _impl_.m_task_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
PROBUFF_NET_ROLE_SYNC_RESPONSE::PROBUFF_NET_ROLE_SYNC_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
}
PROBUFF_NET_ROLE_SYNC_RESPONSE::PROBUFF_NET_ROLE_SYNC_RESPONSE(const PROBUFF_NET_ROLE_SYNC_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_ROLE_SYNC_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_role_){nullptr}
    , decltype(_impl_.m_bag_){nullptr}
    , decltype(_impl_.m_task_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.m_role_ = new ::pbdb::db_role(*from._impl_.m_role_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.m_bag_ = new ::pbdb::db_bag(*from._impl_.m_bag_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.m_task_ = new ::pbdb::db_task(*from._impl_.m_task_);
  }
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
}

inline void PROBUFF_NET_ROLE_SYNC_RESPONSE::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_role_){nullptr}
    , decltype(_impl_.m_bag_){nullptr}
    , decltype(_impl_.m_task_){nullptr}
  };
}

PROBUFF_NET_ROLE_SYNC_RESPONSE::~PROBUFF_NET_ROLE_SYNC_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_ROLE_SYNC_RESPONSE::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.m_role_;
  if (this != internal_default_instance()) delete _impl_.m_bag_;
  if (this != internal_default_instance()) delete _impl_.m_task_;
}

void PROBUFF_NET_ROLE_SYNC_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_ROLE_SYNC_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.m_role_ != nullptr);
      _impl_.m_role_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.m_bag_ != nullptr);
      _impl_.m_bag_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.m_task_ != nullptr);
      _impl_.m_task_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ROLE_SYNC_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbdb.db_role m_role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_role(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .pbdb.db_bag m_bag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_bag(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .pbdb.db_task m_task = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_task(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PROBUFF_NET_ROLE_SYNC_RESPONSE::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .pbdb.db_role m_role = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::m_role(this),
        _Internal::m_role(this).GetCachedSize(), target, stream);
  }

  // optional .pbdb.db_bag m_bag = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::m_bag(this),
        _Internal::m_bag(this).GetCachedSize(), target, stream);
  }

  // optional .pbdb.db_task m_task = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::m_task(this),
        _Internal::m_task(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
  return target;
}

::size_t PROBUFF_NET_ROLE_SYNC_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .pbdb.db_role m_role = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.m_role_);
    }

    // optional .pbdb.db_bag m_bag = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.m_bag_);
    }

    // optional .pbdb.db_task m_task = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.m_task_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_ROLE_SYNC_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_ROLE_SYNC_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_ROLE_SYNC_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_ROLE_SYNC_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_ROLE_SYNC_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_ROLE_SYNC_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_m_role()->::pbdb::db_role::MergeFrom(
          from._internal_m_role());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_m_bag()->::pbdb::db_bag::MergeFrom(
          from._internal_m_bag());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_m_task()->::pbdb::db_task::MergeFrom(
          from._internal_m_task());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_ROLE_SYNC_RESPONSE::CopyFrom(const PROBUFF_NET_ROLE_SYNC_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ROLE_SYNC_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ROLE_SYNC_RESPONSE::InternalSwap(PROBUFF_NET_ROLE_SYNC_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ROLE_SYNC_RESPONSE, _impl_.m_task_)
      + sizeof(PROBUFF_NET_ROLE_SYNC_RESPONSE::_impl_.m_task_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ROLE_SYNC_RESPONSE, _impl_.m_role_)>(
          reinterpret_cast<char*>(&_impl_.m_role_),
          reinterpret_cast<char*>(&other->_impl_.m_role_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ROLE_SYNC_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[11]);
}
// ===================================================================

class PROBUFF_NET_BAG_SYNC::_Internal {
 public:
};

PROBUFF_NET_BAG_SYNC::PROBUFF_NET_BAG_SYNC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_BAG_SYNC)
}
PROBUFF_NET_BAG_SYNC::PROBUFF_NET_BAG_SYNC(const PROBUFF_NET_BAG_SYNC& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PROBUFF_NET_BAG_SYNC* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_BAG_SYNC)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_BAG_SYNC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_BAG_SYNC::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_BAG_SYNC::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[12]);
}
// ===================================================================

class PROBUFF_NET_BAG_SYNC_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_BAG_SYNC_RESPONSE>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PROBUFF_NET_BAG_SYNC_RESPONSE, _impl_._has_bits_);
  static const ::pbdb::db_bag& m_bag(const PROBUFF_NET_BAG_SYNC_RESPONSE* msg);
  static void set_has_m_bag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::pbdb::db_bag&
PROBUFF_NET_BAG_SYNC_RESPONSE::_Internal::m_bag(const PROBUFF_NET_BAG_SYNC_RESPONSE* msg) {
  return *msg->_impl_.m_bag_;
}
void PROBUFF_NET_BAG_SYNC_RESPONSE::clear_m_bag() {
  if (_impl_.m_bag_ != nullptr) _impl_.m_bag_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PROBUFF_NET_BAG_SYNC_RESPONSE::PROBUFF_NET_BAG_SYNC_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
}
PROBUFF_NET_BAG_SYNC_RESPONSE::PROBUFF_NET_BAG_SYNC_RESPONSE(const PROBUFF_NET_BAG_SYNC_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_BAG_SYNC_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_bag_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.m_bag_ = new ::pbdb::db_bag(*from._impl_.m_bag_);
  }
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
}

inline void PROBUFF_NET_BAG_SYNC_RESPONSE::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_bag_){nullptr}
  };
}

PROBUFF_NET_BAG_SYNC_RESPONSE::~PROBUFF_NET_BAG_SYNC_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_BAG_SYNC_RESPONSE::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.m_bag_;
}

void PROBUFF_NET_BAG_SYNC_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_BAG_SYNC_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.m_bag_ != nullptr);
    _impl_.m_bag_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_BAG_SYNC_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbdb.db_bag m_bag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_bag(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PROBUFF_NET_BAG_SYNC_RESPONSE::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .pbdb.db_bag m_bag = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::m_bag(this),
        _Internal::m_bag(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
  return target;
}

::size_t PROBUFF_NET_BAG_SYNC_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .pbdb.db_bag m_bag = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.m_bag_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_BAG_SYNC_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_BAG_SYNC_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_BAG_SYNC_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_BAG_SYNC_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_BAG_SYNC_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_BAG_SYNC_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_m_bag()->::pbdb::db_bag::MergeFrom(
        from._internal_m_bag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_BAG_SYNC_RESPONSE::CopyFrom(const PROBUFF_NET_BAG_SYNC_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_BAG_SYNC_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_BAG_SYNC_RESPONSE::InternalSwap(PROBUFF_NET_BAG_SYNC_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.m_bag_, other->_impl_.m_bag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_BAG_SYNC_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[13]);
}
// ===================================================================

class PROBUFF_NET_BAG_UPDATE::_Internal {
 public:
};

PROBUFF_NET_BAG_UPDATE::PROBUFF_NET_BAG_UPDATE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_BAG_UPDATE)
}
PROBUFF_NET_BAG_UPDATE::PROBUFF_NET_BAG_UPDATE(const PROBUFF_NET_BAG_UPDATE& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PROBUFF_NET_BAG_UPDATE* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_BAG_UPDATE)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_BAG_UPDATE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_BAG_UPDATE::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_BAG_UPDATE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[14]);
}
// ===================================================================

class PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem, _impl_._has_bits_);
  static void set_has_m_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem)
}
PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem(const PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem)
}

inline void PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_id_) { 0 }

    , decltype(_impl_.m_count_) { 0 }

  };
}

PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::~PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.m_count_) -
        reinterpret_cast<char*>(&_impl_.m_id_)) + sizeof(_impl_.m_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_m_id(&has_bits);
          _impl_.m_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 m_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_m_count(&has_bits);
          _impl_.m_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 m_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_m_id(), target);
  }

  // optional int32 m_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_m_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem)
  return target;
}

::size_t PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 m_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_m_id());
    }

    // optional int32 m_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_m_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_id_ = from._impl_.m_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_count_ = from._impl_.m_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::CopyFrom(const PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::IsInitialized() const {
  return true;
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::InternalSwap(PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem, _impl_.m_count_)
      + sizeof(PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::_impl_.m_count_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem, _impl_.m_id_)>(
          reinterpret_cast<char*>(&_impl_.m_id_),
          reinterpret_cast<char*>(&other->_impl_.m_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[15]);
}
// ===================================================================

class PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_BAG_UPDATE_RESPONSE_additem>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PROBUFF_NET_BAG_UPDATE_RESPONSE_additem, _impl_._has_bits_);
  static void set_has_m_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem)
}
PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem(const PROBUFF_NET_BAG_UPDATE_RESPONSE_additem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem)
}

inline void PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_id_) { 0 }

    , decltype(_impl_.m_count_) { 0 }

  };
}

PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::~PROBUFF_NET_BAG_UPDATE_RESPONSE_additem() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.m_count_) -
        reinterpret_cast<char*>(&_impl_.m_id_)) + sizeof(_impl_.m_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_m_id(&has_bits);
          _impl_.m_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 m_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_m_count(&has_bits);
          _impl_.m_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 m_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_m_id(), target);
  }

  // optional int32 m_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_m_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem)
  return target;
}

::size_t PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 m_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_m_id());
    }

    // optional int32 m_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_m_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_BAG_UPDATE_RESPONSE_additem*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_BAG_UPDATE_RESPONSE_additem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_id_ = from._impl_.m_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_count_ = from._impl_.m_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::CopyFrom(const PROBUFF_NET_BAG_UPDATE_RESPONSE_additem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::IsInitialized() const {
  return true;
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::InternalSwap(PROBUFF_NET_BAG_UPDATE_RESPONSE_additem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_BAG_UPDATE_RESPONSE_additem, _impl_.m_count_)
      + sizeof(PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::_impl_.m_count_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_BAG_UPDATE_RESPONSE_additem, _impl_.m_id_)>(
          reinterpret_cast<char*>(&_impl_.m_id_),
          reinterpret_cast<char*>(&other->_impl_.m_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[16]);
}
// ===================================================================

class PROBUFF_NET_BAG_UPDATE_RESPONSE::_Internal {
 public:
};

PROBUFF_NET_BAG_UPDATE_RESPONSE::PROBUFF_NET_BAG_UPDATE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE)
}
PROBUFF_NET_BAG_UPDATE_RESPONSE::PROBUFF_NET_BAG_UPDATE_RESPONSE(const PROBUFF_NET_BAG_UPDATE_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_BAG_UPDATE_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.m_delitems_){from._impl_.m_delitems_}
    , decltype(_impl_.m_delnostackitems_) { from._impl_.m_delnostackitems_ }
    ,/* _impl_._m_delnostackitems_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.m_additems_){from._impl_.m_additems_}
    , decltype(_impl_.m_addnostackitems_) { from._impl_.m_addnostackitems_ }
    ,/* _impl_._m_addnostackitems_cached_byte_size_ = */ { 0 }

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE)
}

inline void PROBUFF_NET_BAG_UPDATE_RESPONSE::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.m_delitems_){arena}
    , decltype(_impl_.m_delnostackitems_) { arena }
    ,/* _impl_._m_delnostackitems_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.m_additems_){arena}
    , decltype(_impl_.m_addnostackitems_) { arena }
    ,/* _impl_._m_addnostackitems_cached_byte_size_ = */ { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PROBUFF_NET_BAG_UPDATE_RESPONSE::~PROBUFF_NET_BAG_UPDATE_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_BAG_UPDATE_RESPONSE::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_m_delitems()->~RepeatedPtrField();
  _impl_.m_delnostackitems_.~RepeatedField();
  _internal_mutable_m_additems()->~RepeatedPtrField();
  _impl_.m_addnostackitems_.~RepeatedField();
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_m_delitems()->Clear();
  _internal_mutable_m_delnostackitems()->Clear();
  _internal_mutable_m_additems()->Clear();
  _internal_mutable_m_addnostackitems()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_BAG_UPDATE_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem m_delitems = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_delitems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int32 m_delnostackitems = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_m_delnostackitems(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 16) {
          _internal_add_m_delnostackitems(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem m_additems = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_additems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int32 m_addnostackitems = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_m_addnostackitems(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 32) {
          _internal_add_m_addnostackitems(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PROBUFF_NET_BAG_UPDATE_RESPONSE::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem m_delitems = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_m_delitems_size()); i < n; i++) {
    const auto& repfield = this->_internal_m_delitems(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int32 m_delnostackitems = 2;
  {
    int byte_size = _impl_._m_delnostackitems_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(2, _internal_m_delnostackitems(),
                                                 byte_size, target);
    }
  }

  // repeated .pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem m_additems = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_m_additems_size()); i < n; i++) {
    const auto& repfield = this->_internal_m_additems(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int32 m_addnostackitems = 4;
  {
    int byte_size = _impl_._m_addnostackitems_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(4, _internal_m_addnostackitems(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE)
  return target;
}

::size_t PROBUFF_NET_BAG_UPDATE_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem m_delitems = 1;
  total_size += 1UL * this->_internal_m_delitems_size();
  for (const auto& msg : this->_internal_m_delitems()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 m_delnostackitems = 2;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_m_delnostackitems())
    ;
    _impl_._m_delnostackitems_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated .pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem m_additems = 3;
  total_size += 1UL * this->_internal_m_additems_size();
  for (const auto& msg : this->_internal_m_additems()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 m_addnostackitems = 4;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_m_addnostackitems())
    ;
    _impl_._m_addnostackitems_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_BAG_UPDATE_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_BAG_UPDATE_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_BAG_UPDATE_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_BAG_UPDATE_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_BAG_UPDATE_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_BAG_UPDATE_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_m_delitems()->MergeFrom(from._internal_m_delitems());
  _this->_impl_.m_delnostackitems_.MergeFrom(from._impl_.m_delnostackitems_);
  _this->_internal_mutable_m_additems()->MergeFrom(from._internal_m_additems());
  _this->_impl_.m_addnostackitems_.MergeFrom(from._impl_.m_addnostackitems_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE::CopyFrom(const PROBUFF_NET_BAG_UPDATE_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_BAG_UPDATE_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE::InternalSwap(PROBUFF_NET_BAG_UPDATE_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_m_delitems()->InternalSwap(other->_internal_mutable_m_delitems());
  _impl_.m_delnostackitems_.InternalSwap(&other->_impl_.m_delnostackitems_);
  _internal_mutable_m_additems()->InternalSwap(other->_internal_mutable_m_additems());
  _impl_.m_addnostackitems_.InternalSwap(&other->_impl_.m_addnostackitems_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_BAG_UPDATE_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[17]);
}
// ===================================================================

class PROBUFF_NET_CMD::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_CMD>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PROBUFF_NET_CMD, _impl_._has_bits_);
  static void set_has_m_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_CMD::PROBUFF_NET_CMD(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_CMD)
}
PROBUFF_NET_CMD::PROBUFF_NET_CMD(const PROBUFF_NET_CMD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_CMD* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_cmd_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.m_cmd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.m_cmd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.m_cmd_.Set(from._internal_m_cmd(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_CMD)
}

inline void PROBUFF_NET_CMD::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_cmd_) {}

  };
  _impl_.m_cmd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.m_cmd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PROBUFF_NET_CMD::~PROBUFF_NET_CMD() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_CMD)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_CMD::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_cmd_.Destroy();
}

void PROBUFF_NET_CMD::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_CMD::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_CMD)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.m_cmd_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_CMD::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string m_cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_m_cmd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.PROBUFF_NET_CMD.m_cmd"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PROBUFF_NET_CMD::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_CMD)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string m_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_m_cmd();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "pbnet.PROBUFF_NET_CMD.m_cmd");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_CMD)
  return target;
}

::size_t PROBUFF_NET_CMD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_CMD)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string m_cmd = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_m_cmd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_CMD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_CMD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_CMD::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_CMD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_CMD*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_CMD&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_CMD)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_m_cmd(from._internal_m_cmd());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_CMD::CopyFrom(const PROBUFF_NET_CMD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_CMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_CMD::IsInitialized() const {
  return true;
}

void PROBUFF_NET_CMD::InternalSwap(PROBUFF_NET_CMD* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.m_cmd_, lhs_arena,
                                       &other->_impl_.m_cmd_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_CMD::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[18]);
}
// ===================================================================

class PROBUFF_NET_CHAT::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_CHAT>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PROBUFF_NET_CHAT, _impl_._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_channelid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m_content(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_CHAT::PROBUFF_NET_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_CHAT)
}
PROBUFF_NET_CHAT::PROBUFF_NET_CHAT(const PROBUFF_NET_CHAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_CHAT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_content_) {}

    , decltype(_impl_.m_type_) {}

    , decltype(_impl_.m_channelid_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.m_content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.m_content_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.m_content_.Set(from._internal_m_content(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.m_type_, &from._impl_.m_type_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.m_channelid_) -
    reinterpret_cast<char*>(&_impl_.m_type_)) + sizeof(_impl_.m_channelid_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_CHAT)
}

inline void PROBUFF_NET_CHAT::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_content_) {}

    , decltype(_impl_.m_type_) { 0 }

    , decltype(_impl_.m_channelid_) { 0 }

  };
  _impl_.m_content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.m_content_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PROBUFF_NET_CHAT::~PROBUFF_NET_CHAT() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_CHAT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_CHAT::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_content_.Destroy();
}

void PROBUFF_NET_CHAT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_CHAT::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_CHAT)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.m_content_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.m_type_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.m_channelid_) -
        reinterpret_cast<char*>(&_impl_.m_type_)) + sizeof(_impl_.m_channelid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_CHAT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_m_type(&has_bits);
          _impl_.m_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 m_channelid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_m_channelid(&has_bits);
          _impl_.m_channelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string m_content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_m_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.PROBUFF_NET_CHAT.m_content"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PROBUFF_NET_CHAT::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_CHAT)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 m_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_m_type(), target);
  }

  // optional int32 m_channelid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_m_channelid(), target);
  }

  // optional string m_content = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_m_content();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "pbnet.PROBUFF_NET_CHAT.m_content");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_CHAT)
  return target;
}

::size_t PROBUFF_NET_CHAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_CHAT)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string m_content = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_m_content());
    }

    // optional int32 m_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_m_type());
    }

    // optional int32 m_channelid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_m_channelid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_CHAT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_CHAT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_CHAT::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_CHAT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_CHAT*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_CHAT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_CHAT)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_m_content(from._internal_m_content());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_type_ = from._impl_.m_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.m_channelid_ = from._impl_.m_channelid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_CHAT::CopyFrom(const PROBUFF_NET_CHAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_CHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_CHAT::IsInitialized() const {
  return true;
}

void PROBUFF_NET_CHAT::InternalSwap(PROBUFF_NET_CHAT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.m_content_, lhs_arena,
                                       &other->_impl_.m_content_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_CHAT, _impl_.m_channelid_)
      + sizeof(PROBUFF_NET_CHAT::_impl_.m_channelid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_CHAT, _impl_.m_type_)>(
          reinterpret_cast<char*>(&_impl_.m_type_),
          reinterpret_cast<char*>(&other->_impl_.m_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_CHAT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[19]);
}
// ===================================================================

class chatitem::_Internal {
 public:
  using HasBits = decltype(std::declval<chatitem>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(chatitem, _impl_._has_bits_);
  static void set_has_m_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m_rolename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_content(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_utc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

chatitem::chatitem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.chatitem)
}
chatitem::chatitem(const chatitem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  chatitem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_rolename_) {}

    , decltype(_impl_.m_content_) {}

    , decltype(_impl_.m_roleid_) {}

    , decltype(_impl_.m_utc_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.m_rolename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.m_rolename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.m_rolename_.Set(from._internal_m_rolename(), _this->GetArenaForAllocation());
  }
  _impl_.m_content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.m_content_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.m_content_.Set(from._internal_m_content(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.m_roleid_, &from._impl_.m_roleid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.m_utc_) -
    reinterpret_cast<char*>(&_impl_.m_roleid_)) + sizeof(_impl_.m_utc_));
  // @@protoc_insertion_point(copy_constructor:pbnet.chatitem)
}

inline void chatitem::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_rolename_) {}

    , decltype(_impl_.m_content_) {}

    , decltype(_impl_.m_roleid_) { ::int64_t{0} }

    , decltype(_impl_.m_utc_) { 0 }

  };
  _impl_.m_rolename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.m_rolename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.m_content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.m_content_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

chatitem::~chatitem() {
  // @@protoc_insertion_point(destructor:pbnet.chatitem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void chatitem::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_rolename_.Destroy();
  _impl_.m_content_.Destroy();
}

void chatitem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void chatitem::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.chatitem)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.m_rolename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.m_content_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.m_roleid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.m_utc_) -
        reinterpret_cast<char*>(&_impl_.m_roleid_)) + sizeof(_impl_.m_utc_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* chatitem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 m_roleid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_m_roleid(&has_bits);
          _impl_.m_roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string m_rolename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_m_rolename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.chatitem.m_rolename"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string m_content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_m_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.chatitem.m_content"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 m_utc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_m_utc(&has_bits);
          _impl_.m_utc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* chatitem::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.chatitem)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 m_roleid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_m_roleid(), target);
  }

  // optional string m_rolename = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_m_rolename();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "pbnet.chatitem.m_rolename");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string m_content = 3;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_m_content();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "pbnet.chatitem.m_content");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional int32 m_utc = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_m_utc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.chatitem)
  return target;
}

::size_t chatitem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.chatitem)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string m_rolename = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_m_rolename());
    }

    // optional string m_content = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_m_content());
    }

    // optional int64 m_roleid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_m_roleid());
    }

    // optional int32 m_utc = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_m_utc());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData chatitem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    chatitem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*chatitem::GetClassData() const { return &_class_data_; }


void chatitem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<chatitem*>(&to_msg);
  auto& from = static_cast<const chatitem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.chatitem)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_m_rolename(from._internal_m_rolename());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_m_content(from._internal_m_content());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.m_roleid_ = from._impl_.m_roleid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.m_utc_ = from._impl_.m_utc_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void chatitem::CopyFrom(const chatitem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.chatitem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chatitem::IsInitialized() const {
  return true;
}

void chatitem::InternalSwap(chatitem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.m_rolename_, lhs_arena,
                                       &other->_impl_.m_rolename_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.m_content_, lhs_arena,
                                       &other->_impl_.m_content_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(chatitem, _impl_.m_utc_)
      + sizeof(chatitem::_impl_.m_utc_)
      - PROTOBUF_FIELD_OFFSET(chatitem, _impl_.m_roleid_)>(
          reinterpret_cast<char*>(&_impl_.m_roleid_),
          reinterpret_cast<char*>(&other->_impl_.m_roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata chatitem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[20]);
}
// ===================================================================

class PROBUFF_NET_CHAT_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_CHAT_RESPONSE>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PROBUFF_NET_CHAT_RESPONSE, _impl_._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_channelid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PROBUFF_NET_CHAT_RESPONSE::PROBUFF_NET_CHAT_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_CHAT_RESPONSE)
}
PROBUFF_NET_CHAT_RESPONSE::PROBUFF_NET_CHAT_RESPONSE(const PROBUFF_NET_CHAT_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_CHAT_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_chatlist_){from._impl_.m_chatlist_}
    , decltype(_impl_.m_type_) {}

    , decltype(_impl_.m_channelid_) {}

    , decltype(_impl_.m_stat_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_type_, &from._impl_.m_type_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.m_stat_) -
    reinterpret_cast<char*>(&_impl_.m_type_)) + sizeof(_impl_.m_stat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_CHAT_RESPONSE)
}

inline void PROBUFF_NET_CHAT_RESPONSE::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_chatlist_){arena}
    , decltype(_impl_.m_type_) { 0 }

    , decltype(_impl_.m_channelid_) { 0 }

    , decltype(_impl_.m_stat_) { false }

  };
}

PROBUFF_NET_CHAT_RESPONSE::~PROBUFF_NET_CHAT_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_CHAT_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_CHAT_RESPONSE::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_m_chatlist()->~RepeatedPtrField();
}

void PROBUFF_NET_CHAT_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_CHAT_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_CHAT_RESPONSE)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_m_chatlist()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.m_type_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.m_stat_) -
        reinterpret_cast<char*>(&_impl_.m_type_)) + sizeof(_impl_.m_stat_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_CHAT_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_m_type(&has_bits);
          _impl_.m_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 m_channelid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_m_channelid(&has_bits);
          _impl_.m_channelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .pbnet.chatitem m_chatlist = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_chatlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool m_stat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_m_stat(&has_bits);
          _impl_.m_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PROBUFF_NET_CHAT_RESPONSE::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_CHAT_RESPONSE)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 m_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_m_type(), target);
  }

  // optional int32 m_channelid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_m_channelid(), target);
  }

  // repeated .pbnet.chatitem m_chatlist = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_m_chatlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_m_chatlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool m_stat = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_CHAT_RESPONSE)
  return target;
}

::size_t PROBUFF_NET_CHAT_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_CHAT_RESPONSE)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbnet.chatitem m_chatlist = 3;
  total_size += 1UL * this->_internal_m_chatlist_size();
  for (const auto& msg : this->_internal_m_chatlist()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 m_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_m_type());
    }

    // optional int32 m_channelid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_m_channelid());
    }

    // optional bool m_stat = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_CHAT_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_CHAT_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_CHAT_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_CHAT_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_CHAT_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_CHAT_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_CHAT_RESPONSE)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_m_chatlist()->MergeFrom(from._internal_m_chatlist());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_type_ = from._impl_.m_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_channelid_ = from._impl_.m_channelid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.m_stat_ = from._impl_.m_stat_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_CHAT_RESPONSE::CopyFrom(const PROBUFF_NET_CHAT_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_CHAT_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_CHAT_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_CHAT_RESPONSE::InternalSwap(PROBUFF_NET_CHAT_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_m_chatlist()->InternalSwap(other->_internal_mutable_m_chatlist());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_CHAT_RESPONSE, _impl_.m_stat_)
      + sizeof(PROBUFF_NET_CHAT_RESPONSE::_impl_.m_stat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_CHAT_RESPONSE, _impl_.m_type_)>(
          reinterpret_cast<char*>(&_impl_.m_type_),
          reinterpret_cast<char*>(&other->_impl_.m_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_CHAT_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[21]);
}
// ===================================================================

class PROBUFF_NET_SWITCH_LINE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_SWITCH_LINE>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PROBUFF_NET_SWITCH_LINE, _impl_._has_bits_);
  static void set_has_m_line(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_SWITCH_LINE::PROBUFF_NET_SWITCH_LINE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_SWITCH_LINE)
}
PROBUFF_NET_SWITCH_LINE::PROBUFF_NET_SWITCH_LINE(const PROBUFF_NET_SWITCH_LINE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_SWITCH_LINE)
}

inline void PROBUFF_NET_SWITCH_LINE::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_line_) { 0 }

  };
}

PROBUFF_NET_SWITCH_LINE::~PROBUFF_NET_SWITCH_LINE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_SWITCH_LINE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_SWITCH_LINE::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_SWITCH_LINE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_SWITCH_LINE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_SWITCH_LINE)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_line_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_SWITCH_LINE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_line = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_m_line(&has_bits);
          _impl_.m_line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PROBUFF_NET_SWITCH_LINE::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_SWITCH_LINE)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 m_line = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_m_line(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_SWITCH_LINE)
  return target;
}

::size_t PROBUFF_NET_SWITCH_LINE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_SWITCH_LINE)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 m_line = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_m_line());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_SWITCH_LINE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_SWITCH_LINE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_SWITCH_LINE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_SWITCH_LINE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_SWITCH_LINE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_SWITCH_LINE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_SWITCH_LINE)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_m_line(from._internal_m_line());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_SWITCH_LINE::CopyFrom(const PROBUFF_NET_SWITCH_LINE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_SWITCH_LINE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_SWITCH_LINE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_SWITCH_LINE::InternalSwap(PROBUFF_NET_SWITCH_LINE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.m_line_, other->_impl_.m_line_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_SWITCH_LINE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[22]);
}
// ===================================================================

class PROBUFF_NET_SWITCH_LINE_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_SWITCH_LINE_RESPONSE>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PROBUFF_NET_SWITCH_LINE_RESPONSE, _impl_._has_bits_);
  static void set_has_m_line(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_SWITCH_LINE_RESPONSE::PROBUFF_NET_SWITCH_LINE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
}
PROBUFF_NET_SWITCH_LINE_RESPONSE::PROBUFF_NET_SWITCH_LINE_RESPONSE(const PROBUFF_NET_SWITCH_LINE_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
}

inline void PROBUFF_NET_SWITCH_LINE_RESPONSE::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_line_) { 0 }

    , decltype(_impl_.m_stat_) { false }

  };
}

PROBUFF_NET_SWITCH_LINE_RESPONSE::~PROBUFF_NET_SWITCH_LINE_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_SWITCH_LINE_RESPONSE::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_SWITCH_LINE_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_SWITCH_LINE_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_line_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.m_stat_) -
        reinterpret_cast<char*>(&_impl_.m_line_)) + sizeof(_impl_.m_stat_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_SWITCH_LINE_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_line = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_m_line(&has_bits);
          _impl_.m_line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool m_stat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_m_stat(&has_bits);
          _impl_.m_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PROBUFF_NET_SWITCH_LINE_RESPONSE::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 m_line = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_m_line(), target);
  }

  // optional bool m_stat = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
  return target;
}

::size_t PROBUFF_NET_SWITCH_LINE_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 m_line = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_m_line());
    }

    // optional bool m_stat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_SWITCH_LINE_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_SWITCH_LINE_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_SWITCH_LINE_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_SWITCH_LINE_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_SWITCH_LINE_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_SWITCH_LINE_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_line_ = from._impl_.m_line_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_stat_ = from._impl_.m_stat_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_SWITCH_LINE_RESPONSE::CopyFrom(const PROBUFF_NET_SWITCH_LINE_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_SWITCH_LINE_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_SWITCH_LINE_RESPONSE::InternalSwap(PROBUFF_NET_SWITCH_LINE_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_SWITCH_LINE_RESPONSE, _impl_.m_stat_)
      + sizeof(PROBUFF_NET_SWITCH_LINE_RESPONSE::_impl_.m_stat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_SWITCH_LINE_RESPONSE, _impl_.m_line_)>(
          reinterpret_cast<char*>(&_impl_.m_line_),
          reinterpret_cast<char*>(&other->_impl_.m_line_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_SWITCH_LINE_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[23]);
}
// ===================================================================

class PROBUFF_NET_MAIL_LIST::_Internal {
 public:
};

PROBUFF_NET_MAIL_LIST::PROBUFF_NET_MAIL_LIST(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MAIL_LIST)
}
PROBUFF_NET_MAIL_LIST::PROBUFF_NET_MAIL_LIST(const PROBUFF_NET_MAIL_LIST& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PROBUFF_NET_MAIL_LIST* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MAIL_LIST)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MAIL_LIST::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MAIL_LIST::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_LIST::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[24]);
}
// ===================================================================

PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse::PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse() {}
PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse::PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse::MergeFrom(const PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[25]);
}
// ===================================================================

class PROBUFF_NET_MAIL_LIST_RESPONSE::_Internal {
 public:
};

void PROBUFF_NET_MAIL_LIST_RESPONSE::clear_m_mail() {
  _impl_.m_mail_.Clear();
}
PROBUFF_NET_MAIL_LIST_RESPONSE::PROBUFF_NET_MAIL_LIST_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
}
PROBUFF_NET_MAIL_LIST_RESPONSE::PROBUFF_NET_MAIL_LIST_RESPONSE(const PROBUFF_NET_MAIL_LIST_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_MAIL_LIST_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.m_mail_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.m_mail_.MergeFrom(from._impl_.m_mail_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
}

inline void PROBUFF_NET_MAIL_LIST_RESPONSE::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      /*decltype(_impl_.m_mail_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PROBUFF_NET_MAIL_LIST_RESPONSE::~PROBUFF_NET_MAIL_LIST_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MAIL_LIST_RESPONSE::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_mail_.~MapField();
}

void PROBUFF_NET_MAIL_LIST_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MAIL_LIST_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_mail_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MAIL_LIST_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<int32, .pbdb.mail> m_mail = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.m_mail_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PROBUFF_NET_MAIL_LIST_RESPONSE::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .pbdb.mail> m_mail = 1;
  if (!this->_internal_m_mail().empty()) {
    using MapType = ::_pb::Map<::int32_t, ::pbdb::mail>;
    using WireHelper = PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_m_mail();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
  return target;
}

::size_t PROBUFF_NET_MAIL_LIST_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .pbdb.mail> m_mail = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_m_mail_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::int32_t, ::pbdb::mail >::const_iterator
      it = this->_internal_m_mail().begin();
      it != this->_internal_m_mail().end(); ++it) {
    total_size += PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MAIL_LIST_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MAIL_LIST_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MAIL_LIST_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MAIL_LIST_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MAIL_LIST_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MAIL_LIST_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.m_mail_.MergeFrom(from._impl_.m_mail_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MAIL_LIST_RESPONSE::CopyFrom(const PROBUFF_NET_MAIL_LIST_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MAIL_LIST_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MAIL_LIST_RESPONSE::InternalSwap(PROBUFF_NET_MAIL_LIST_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.m_mail_.InternalSwap(&other->_impl_.m_mail_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_LIST_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[26]);
}
// ===================================================================

class PROBUFF_NET_MAIL_READ::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MAIL_READ>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MAIL_READ, _impl_._has_bits_);
  static void set_has_m_mailid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_MAIL_READ::PROBUFF_NET_MAIL_READ(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MAIL_READ)
}
PROBUFF_NET_MAIL_READ::PROBUFF_NET_MAIL_READ(const PROBUFF_NET_MAIL_READ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MAIL_READ)
}

inline void PROBUFF_NET_MAIL_READ::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_mailid_) { ::int64_t{0} }

  };
}

PROBUFF_NET_MAIL_READ::~PROBUFF_NET_MAIL_READ() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MAIL_READ)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MAIL_READ::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_MAIL_READ::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MAIL_READ::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MAIL_READ)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_mailid_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MAIL_READ::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 m_mailid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_m_mailid(&has_bits);
          _impl_.m_mailid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PROBUFF_NET_MAIL_READ::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MAIL_READ)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 m_mailid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_m_mailid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MAIL_READ)
  return target;
}

::size_t PROBUFF_NET_MAIL_READ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MAIL_READ)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 m_mailid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_m_mailid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MAIL_READ::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MAIL_READ::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MAIL_READ::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MAIL_READ::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MAIL_READ*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MAIL_READ&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MAIL_READ)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_m_mailid(from._internal_m_mailid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MAIL_READ::CopyFrom(const PROBUFF_NET_MAIL_READ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MAIL_READ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MAIL_READ::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MAIL_READ::InternalSwap(PROBUFF_NET_MAIL_READ* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.m_mailid_, other->_impl_.m_mailid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_READ::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[27]);
}
// ===================================================================

class PROBUFF_NET_MAIL_READ_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MAIL_READ_RESPONSE>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MAIL_READ_RESPONSE, _impl_._has_bits_);
  static void set_has_m_mailid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_MAIL_READ_RESPONSE::PROBUFF_NET_MAIL_READ_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
}
PROBUFF_NET_MAIL_READ_RESPONSE::PROBUFF_NET_MAIL_READ_RESPONSE(const PROBUFF_NET_MAIL_READ_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
}

inline void PROBUFF_NET_MAIL_READ_RESPONSE::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_mailid_) { ::int64_t{0} }

    , decltype(_impl_.m_stat_) { false }

  };
}

PROBUFF_NET_MAIL_READ_RESPONSE::~PROBUFF_NET_MAIL_READ_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MAIL_READ_RESPONSE::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_MAIL_READ_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MAIL_READ_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_mailid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.m_stat_) -
        reinterpret_cast<char*>(&_impl_.m_mailid_)) + sizeof(_impl_.m_stat_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MAIL_READ_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 m_mailid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_m_mailid(&has_bits);
          _impl_.m_mailid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool m_stat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_m_stat(&has_bits);
          _impl_.m_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PROBUFF_NET_MAIL_READ_RESPONSE::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 m_mailid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_m_mailid(), target);
  }

  // optional bool m_stat = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
  return target;
}

::size_t PROBUFF_NET_MAIL_READ_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 m_mailid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_m_mailid());
    }

    // optional bool m_stat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MAIL_READ_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MAIL_READ_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MAIL_READ_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MAIL_READ_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MAIL_READ_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MAIL_READ_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_mailid_ = from._impl_.m_mailid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_stat_ = from._impl_.m_stat_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MAIL_READ_RESPONSE::CopyFrom(const PROBUFF_NET_MAIL_READ_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MAIL_READ_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MAIL_READ_RESPONSE::InternalSwap(PROBUFF_NET_MAIL_READ_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MAIL_READ_RESPONSE, _impl_.m_stat_)
      + sizeof(PROBUFF_NET_MAIL_READ_RESPONSE::_impl_.m_stat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MAIL_READ_RESPONSE, _impl_.m_mailid_)>(
          reinterpret_cast<char*>(&_impl_.m_mailid_),
          reinterpret_cast<char*>(&other->_impl_.m_mailid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_READ_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[28]);
}
// ===================================================================

class PROBUFF_NET_MAIL_DRAW::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MAIL_DRAW>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MAIL_DRAW, _impl_._has_bits_);
  static void set_has_m_mailid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_MAIL_DRAW::PROBUFF_NET_MAIL_DRAW(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MAIL_DRAW)
}
PROBUFF_NET_MAIL_DRAW::PROBUFF_NET_MAIL_DRAW(const PROBUFF_NET_MAIL_DRAW& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MAIL_DRAW)
}

inline void PROBUFF_NET_MAIL_DRAW::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_mailid_) { ::int64_t{0} }

  };
}

PROBUFF_NET_MAIL_DRAW::~PROBUFF_NET_MAIL_DRAW() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MAIL_DRAW)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MAIL_DRAW::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_MAIL_DRAW::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MAIL_DRAW::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MAIL_DRAW)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_mailid_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MAIL_DRAW::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 m_mailid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_m_mailid(&has_bits);
          _impl_.m_mailid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PROBUFF_NET_MAIL_DRAW::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MAIL_DRAW)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 m_mailid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_m_mailid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MAIL_DRAW)
  return target;
}

::size_t PROBUFF_NET_MAIL_DRAW::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MAIL_DRAW)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 m_mailid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_m_mailid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MAIL_DRAW::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MAIL_DRAW::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MAIL_DRAW::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MAIL_DRAW::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MAIL_DRAW*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MAIL_DRAW&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MAIL_DRAW)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_m_mailid(from._internal_m_mailid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MAIL_DRAW::CopyFrom(const PROBUFF_NET_MAIL_DRAW& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MAIL_DRAW)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MAIL_DRAW::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MAIL_DRAW::InternalSwap(PROBUFF_NET_MAIL_DRAW* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.m_mailid_, other->_impl_.m_mailid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_DRAW::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[29]);
}
// ===================================================================

class PROBUFF_NET_MAIL_DRAW_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MAIL_DRAW_RESPONSE>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MAIL_DRAW_RESPONSE, _impl_._has_bits_);
  static void set_has_m_mailid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_MAIL_DRAW_RESPONSE::PROBUFF_NET_MAIL_DRAW_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
}
PROBUFF_NET_MAIL_DRAW_RESPONSE::PROBUFF_NET_MAIL_DRAW_RESPONSE(const PROBUFF_NET_MAIL_DRAW_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
}

inline void PROBUFF_NET_MAIL_DRAW_RESPONSE::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_mailid_) { ::int64_t{0} }

    , decltype(_impl_.m_stat_) { false }

  };
}

PROBUFF_NET_MAIL_DRAW_RESPONSE::~PROBUFF_NET_MAIL_DRAW_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MAIL_DRAW_RESPONSE::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_MAIL_DRAW_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MAIL_DRAW_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_mailid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.m_stat_) -
        reinterpret_cast<char*>(&_impl_.m_mailid_)) + sizeof(_impl_.m_stat_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MAIL_DRAW_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 m_mailid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_m_mailid(&has_bits);
          _impl_.m_mailid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool m_stat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_m_stat(&has_bits);
          _impl_.m_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PROBUFF_NET_MAIL_DRAW_RESPONSE::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 m_mailid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_m_mailid(), target);
  }

  // optional bool m_stat = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
  return target;
}

::size_t PROBUFF_NET_MAIL_DRAW_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 m_mailid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_m_mailid());
    }

    // optional bool m_stat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MAIL_DRAW_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MAIL_DRAW_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MAIL_DRAW_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MAIL_DRAW_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MAIL_DRAW_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MAIL_DRAW_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_mailid_ = from._impl_.m_mailid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_stat_ = from._impl_.m_stat_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MAIL_DRAW_RESPONSE::CopyFrom(const PROBUFF_NET_MAIL_DRAW_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MAIL_DRAW_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MAIL_DRAW_RESPONSE::InternalSwap(PROBUFF_NET_MAIL_DRAW_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MAIL_DRAW_RESPONSE, _impl_.m_stat_)
      + sizeof(PROBUFF_NET_MAIL_DRAW_RESPONSE::_impl_.m_stat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MAIL_DRAW_RESPONSE, _impl_.m_mailid_)>(
          reinterpret_cast<char*>(&_impl_.m_mailid_),
          reinterpret_cast<char*>(&other->_impl_.m_mailid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_DRAW_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[30]);
}
// ===================================================================

class PROBUFF_NET_MAIL_DEL::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MAIL_DEL>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MAIL_DEL, _impl_._has_bits_);
  static void set_has_m_mailid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_MAIL_DEL::PROBUFF_NET_MAIL_DEL(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MAIL_DEL)
}
PROBUFF_NET_MAIL_DEL::PROBUFF_NET_MAIL_DEL(const PROBUFF_NET_MAIL_DEL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MAIL_DEL)
}

inline void PROBUFF_NET_MAIL_DEL::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_mailid_) { ::int64_t{0} }

  };
}

PROBUFF_NET_MAIL_DEL::~PROBUFF_NET_MAIL_DEL() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MAIL_DEL)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MAIL_DEL::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_MAIL_DEL::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MAIL_DEL::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MAIL_DEL)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_mailid_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MAIL_DEL::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 m_mailid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_m_mailid(&has_bits);
          _impl_.m_mailid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PROBUFF_NET_MAIL_DEL::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MAIL_DEL)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 m_mailid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_m_mailid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MAIL_DEL)
  return target;
}

::size_t PROBUFF_NET_MAIL_DEL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MAIL_DEL)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 m_mailid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_m_mailid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MAIL_DEL::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MAIL_DEL::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MAIL_DEL::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MAIL_DEL::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MAIL_DEL*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MAIL_DEL&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MAIL_DEL)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_m_mailid(from._internal_m_mailid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MAIL_DEL::CopyFrom(const PROBUFF_NET_MAIL_DEL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MAIL_DEL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MAIL_DEL::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MAIL_DEL::InternalSwap(PROBUFF_NET_MAIL_DEL* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.m_mailid_, other->_impl_.m_mailid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_DEL::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[31]);
}
// ===================================================================

class PROBUFF_NET_MAIL_DEL_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MAIL_DEL_RESPONSE>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MAIL_DEL_RESPONSE, _impl_._has_bits_);
  static void set_has_m_mailid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_MAIL_DEL_RESPONSE::PROBUFF_NET_MAIL_DEL_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
}
PROBUFF_NET_MAIL_DEL_RESPONSE::PROBUFF_NET_MAIL_DEL_RESPONSE(const PROBUFF_NET_MAIL_DEL_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
}

inline void PROBUFF_NET_MAIL_DEL_RESPONSE::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_mailid_) { ::int64_t{0} }

    , decltype(_impl_.m_stat_) { false }

  };
}

PROBUFF_NET_MAIL_DEL_RESPONSE::~PROBUFF_NET_MAIL_DEL_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MAIL_DEL_RESPONSE::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_MAIL_DEL_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MAIL_DEL_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_mailid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.m_stat_) -
        reinterpret_cast<char*>(&_impl_.m_mailid_)) + sizeof(_impl_.m_stat_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MAIL_DEL_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 m_mailid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_m_mailid(&has_bits);
          _impl_.m_mailid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool m_stat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_m_stat(&has_bits);
          _impl_.m_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PROBUFF_NET_MAIL_DEL_RESPONSE::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 m_mailid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_m_mailid(), target);
  }

  // optional bool m_stat = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
  return target;
}

::size_t PROBUFF_NET_MAIL_DEL_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 m_mailid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_m_mailid());
    }

    // optional bool m_stat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MAIL_DEL_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MAIL_DEL_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MAIL_DEL_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MAIL_DEL_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MAIL_DEL_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MAIL_DEL_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_mailid_ = from._impl_.m_mailid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_stat_ = from._impl_.m_stat_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MAIL_DEL_RESPONSE::CopyFrom(const PROBUFF_NET_MAIL_DEL_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MAIL_DEL_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MAIL_DEL_RESPONSE::InternalSwap(PROBUFF_NET_MAIL_DEL_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MAIL_DEL_RESPONSE, _impl_.m_stat_)
      + sizeof(PROBUFF_NET_MAIL_DEL_RESPONSE::_impl_.m_stat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MAIL_DEL_RESPONSE, _impl_.m_mailid_)>(
          reinterpret_cast<char*>(&_impl_.m_mailid_),
          reinterpret_cast<char*>(&other->_impl_.m_mailid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_DEL_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[32]);
}
// ===================================================================

class VECTOR2::_Internal {
 public:
  using HasBits = decltype(std::declval<VECTOR2>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(VECTOR2, _impl_._has_bits_);
  static void set_has_m_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

VECTOR2::VECTOR2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.VECTOR2)
}
VECTOR2::VECTOR2(const VECTOR2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.VECTOR2)
}

inline void VECTOR2::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_x_) { 0 }

    , decltype(_impl_.m_y_) { 0 }

  };
}

VECTOR2::~VECTOR2() {
  // @@protoc_insertion_point(destructor:pbnet.VECTOR2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VECTOR2::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void VECTOR2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VECTOR2::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.VECTOR2)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_x_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.m_y_) -
        reinterpret_cast<char*>(&_impl_.m_x_)) + sizeof(_impl_.m_y_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VECTOR2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_m_x(&has_bits);
          _impl_.m_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 m_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_m_y(&has_bits);
          _impl_.m_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* VECTOR2::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.VECTOR2)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 m_x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_m_x(), target);
  }

  // optional int32 m_y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_m_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.VECTOR2)
  return target;
}

::size_t VECTOR2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.VECTOR2)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 m_x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_m_x());
    }

    // optional int32 m_y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_m_y());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VECTOR2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VECTOR2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VECTOR2::GetClassData() const { return &_class_data_; }


void VECTOR2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VECTOR2*>(&to_msg);
  auto& from = static_cast<const VECTOR2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.VECTOR2)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_x_ = from._impl_.m_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_y_ = from._impl_.m_y_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VECTOR2::CopyFrom(const VECTOR2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.VECTOR2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VECTOR2::IsInitialized() const {
  return true;
}

void VECTOR2::InternalSwap(VECTOR2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VECTOR2, _impl_.m_y_)
      + sizeof(VECTOR2::_impl_.m_y_)
      - PROTOBUF_FIELD_OFFSET(VECTOR2, _impl_.m_x_)>(
          reinterpret_cast<char*>(&_impl_.m_x_),
          reinterpret_cast<char*>(&other->_impl_.m_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VECTOR2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[33]);
}
// ===================================================================

class VECTOR3::_Internal {
 public:
  using HasBits = decltype(std::declval<VECTOR3>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(VECTOR3, _impl_._has_bits_);
  static void set_has_m_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

VECTOR3::VECTOR3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.VECTOR3)
}
VECTOR3::VECTOR3(const VECTOR3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.VECTOR3)
}

inline void VECTOR3::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_x_) { 0 }

    , decltype(_impl_.m_y_) { 0 }

    , decltype(_impl_.m_z_) { 0 }

  };
}

VECTOR3::~VECTOR3() {
  // @@protoc_insertion_point(destructor:pbnet.VECTOR3)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VECTOR3::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void VECTOR3::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VECTOR3::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.VECTOR3)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.m_x_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.m_z_) -
        reinterpret_cast<char*>(&_impl_.m_x_)) + sizeof(_impl_.m_z_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VECTOR3::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_m_x(&has_bits);
          _impl_.m_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 m_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_m_y(&has_bits);
          _impl_.m_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 m_z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_m_z(&has_bits);
          _impl_.m_z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* VECTOR3::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.VECTOR3)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 m_x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_m_x(), target);
  }

  // optional int32 m_y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_m_y(), target);
  }

  // optional int32 m_z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_m_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.VECTOR3)
  return target;
}

::size_t VECTOR3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.VECTOR3)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 m_x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_m_x());
    }

    // optional int32 m_y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_m_y());
    }

    // optional int32 m_z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_m_z());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VECTOR3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VECTOR3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VECTOR3::GetClassData() const { return &_class_data_; }


void VECTOR3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VECTOR3*>(&to_msg);
  auto& from = static_cast<const VECTOR3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.VECTOR3)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_x_ = from._impl_.m_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_y_ = from._impl_.m_y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.m_z_ = from._impl_.m_z_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VECTOR3::CopyFrom(const VECTOR3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.VECTOR3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VECTOR3::IsInitialized() const {
  return true;
}

void VECTOR3::InternalSwap(VECTOR3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VECTOR3, _impl_.m_z_)
      + sizeof(VECTOR3::_impl_.m_z_)
      - PROTOBUF_FIELD_OFFSET(VECTOR3, _impl_.m_x_)>(
          reinterpret_cast<char*>(&_impl_.m_x_),
          reinterpret_cast<char*>(&other->_impl_.m_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VECTOR3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[34]);
}
// ===================================================================

class UNIT_POSITION::_Internal {
 public:
  using HasBits = decltype(std::declval<UNIT_POSITION>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(UNIT_POSITION, _impl_._has_bits_);
  static void set_has_m_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::pbnet::VECTOR2& m_position(const UNIT_POSITION* msg);
  static void set_has_m_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::pbnet::VECTOR2&
UNIT_POSITION::_Internal::m_position(const UNIT_POSITION* msg) {
  return *msg->_impl_.m_position_;
}
UNIT_POSITION::UNIT_POSITION(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.UNIT_POSITION)
}
UNIT_POSITION::UNIT_POSITION(const UNIT_POSITION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UNIT_POSITION* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_position_){nullptr}
    , decltype(_impl_.m_id_) {}

    , decltype(_impl_.m_angle_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.m_position_ = new ::pbnet::VECTOR2(*from._impl_.m_position_);
  }
  ::memcpy(&_impl_.m_id_, &from._impl_.m_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.m_angle_) -
    reinterpret_cast<char*>(&_impl_.m_id_)) + sizeof(_impl_.m_angle_));
  // @@protoc_insertion_point(copy_constructor:pbnet.UNIT_POSITION)
}

inline void UNIT_POSITION::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_position_){nullptr}
    , decltype(_impl_.m_id_) { ::int64_t{0} }

    , decltype(_impl_.m_angle_) { 0 }

  };
}

UNIT_POSITION::~UNIT_POSITION() {
  // @@protoc_insertion_point(destructor:pbnet.UNIT_POSITION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UNIT_POSITION::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.m_position_;
}

void UNIT_POSITION::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UNIT_POSITION::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.UNIT_POSITION)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.m_position_ != nullptr);
    _impl_.m_position_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.m_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.m_angle_) -
        reinterpret_cast<char*>(&_impl_.m_id_)) + sizeof(_impl_.m_angle_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UNIT_POSITION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 m_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_m_id(&has_bits);
          _impl_.m_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .pbnet.VECTOR2 m_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_position(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 m_angle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_m_angle(&has_bits);
          _impl_.m_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UNIT_POSITION::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.UNIT_POSITION)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 m_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_m_id(), target);
  }

  // optional .pbnet.VECTOR2 m_position = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::m_position(this),
        _Internal::m_position(this).GetCachedSize(), target, stream);
  }

  // optional int32 m_angle = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_m_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.UNIT_POSITION)
  return target;
}

::size_t UNIT_POSITION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.UNIT_POSITION)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .pbnet.VECTOR2 m_position = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.m_position_);
    }

    // optional int64 m_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_m_id());
    }

    // optional int32 m_angle = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_m_angle());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UNIT_POSITION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UNIT_POSITION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UNIT_POSITION::GetClassData() const { return &_class_data_; }


void UNIT_POSITION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UNIT_POSITION*>(&to_msg);
  auto& from = static_cast<const UNIT_POSITION&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.UNIT_POSITION)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_m_position()->::pbnet::VECTOR2::MergeFrom(
          from._internal_m_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_id_ = from._impl_.m_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.m_angle_ = from._impl_.m_angle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UNIT_POSITION::CopyFrom(const UNIT_POSITION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.UNIT_POSITION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UNIT_POSITION::IsInitialized() const {
  return true;
}

void UNIT_POSITION::InternalSwap(UNIT_POSITION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UNIT_POSITION, _impl_.m_angle_)
      + sizeof(UNIT_POSITION::_impl_.m_angle_)
      - PROTOBUF_FIELD_OFFSET(UNIT_POSITION, _impl_.m_position_)>(
          reinterpret_cast<char*>(&_impl_.m_position_),
          reinterpret_cast<char*>(&other->_impl_.m_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UNIT_POSITION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[35]);
}
// ===================================================================

class UNIT::_Internal {
 public:
  using HasBits = decltype(std::declval<UNIT>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(UNIT, _impl_._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::pbnet::UNIT_POSITION& m_position(const UNIT* msg);
  static void set_has_m_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::pbnet::UNIT_POSITION&
UNIT::_Internal::m_position(const UNIT* msg) {
  return *msg->_impl_.m_position_;
}
UNIT::UNIT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.UNIT)
}
UNIT::UNIT(const UNIT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UNIT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_position_){nullptr}
    , decltype(_impl_.m_id_) {}

    , decltype(_impl_.m_type_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.m_position_ = new ::pbnet::UNIT_POSITION(*from._impl_.m_position_);
  }
  ::memcpy(&_impl_.m_id_, &from._impl_.m_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.m_type_) -
    reinterpret_cast<char*>(&_impl_.m_id_)) + sizeof(_impl_.m_type_));
  // @@protoc_insertion_point(copy_constructor:pbnet.UNIT)
}

inline void UNIT::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_position_){nullptr}
    , decltype(_impl_.m_id_) { ::int64_t{0} }

    , decltype(_impl_.m_type_) { 0 }

  };
}

UNIT::~UNIT() {
  // @@protoc_insertion_point(destructor:pbnet.UNIT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UNIT::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.m_position_;
}

void UNIT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UNIT::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.UNIT)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.m_position_ != nullptr);
    _impl_.m_position_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.m_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.m_type_) -
        reinterpret_cast<char*>(&_impl_.m_id_)) + sizeof(_impl_.m_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UNIT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbnet.eunit m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbnet::eunit>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 m_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_m_id(&has_bits);
          _impl_.m_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .pbnet.UNIT_POSITION m_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_position(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UNIT::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.UNIT)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .pbnet.eunit m_type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_m_type(), target);
  }

  // optional int64 m_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_m_id(), target);
  }

  // optional .pbnet.UNIT_POSITION m_position = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::m_position(this),
        _Internal::m_position(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.UNIT)
  return target;
}

::size_t UNIT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.UNIT)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .pbnet.UNIT_POSITION m_position = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.m_position_);
    }

    // optional int64 m_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_m_id());
    }

    // optional .pbnet.eunit m_type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_m_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UNIT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UNIT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UNIT::GetClassData() const { return &_class_data_; }


void UNIT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UNIT*>(&to_msg);
  auto& from = static_cast<const UNIT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.UNIT)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_m_position()->::pbnet::UNIT_POSITION::MergeFrom(
          from._internal_m_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_id_ = from._impl_.m_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.m_type_ = from._impl_.m_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UNIT::CopyFrom(const UNIT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.UNIT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UNIT::IsInitialized() const {
  return true;
}

void UNIT::InternalSwap(UNIT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UNIT, _impl_.m_type_)
      + sizeof(UNIT::_impl_.m_type_)
      - PROTOBUF_FIELD_OFFSET(UNIT, _impl_.m_position_)>(
          reinterpret_cast<char*>(&_impl_.m_position_),
          reinterpret_cast<char*>(&other->_impl_.m_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UNIT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[36]);
}
// ===================================================================

class PROBUFF_NET_SYNC_UNIT::_Internal {
 public:
};

PROBUFF_NET_SYNC_UNIT::PROBUFF_NET_SYNC_UNIT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_SYNC_UNIT)
}
PROBUFF_NET_SYNC_UNIT::PROBUFF_NET_SYNC_UNIT(const PROBUFF_NET_SYNC_UNIT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_SYNC_UNIT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.m_units_){from._impl_.m_units_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_SYNC_UNIT)
}

inline void PROBUFF_NET_SYNC_UNIT::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.m_units_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PROBUFF_NET_SYNC_UNIT::~PROBUFF_NET_SYNC_UNIT() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_SYNC_UNIT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_SYNC_UNIT::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_m_units()->~RepeatedPtrField();
}

void PROBUFF_NET_SYNC_UNIT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_SYNC_UNIT::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_SYNC_UNIT)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_m_units()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_SYNC_UNIT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .pbnet.UNIT m_units = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_units(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PROBUFF_NET_SYNC_UNIT::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_SYNC_UNIT)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbnet.UNIT m_units = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_m_units_size()); i < n; i++) {
    const auto& repfield = this->_internal_m_units(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_SYNC_UNIT)
  return target;
}

::size_t PROBUFF_NET_SYNC_UNIT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_SYNC_UNIT)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbnet.UNIT m_units = 1;
  total_size += 1UL * this->_internal_m_units_size();
  for (const auto& msg : this->_internal_m_units()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_SYNC_UNIT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_SYNC_UNIT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_SYNC_UNIT::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_SYNC_UNIT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_SYNC_UNIT*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_SYNC_UNIT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_SYNC_UNIT)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_m_units()->MergeFrom(from._internal_m_units());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_SYNC_UNIT::CopyFrom(const PROBUFF_NET_SYNC_UNIT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_SYNC_UNIT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_SYNC_UNIT::IsInitialized() const {
  return true;
}

void PROBUFF_NET_SYNC_UNIT::InternalSwap(PROBUFF_NET_SYNC_UNIT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_m_units()->InternalSwap(other->_internal_mutable_m_units());
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_SYNC_UNIT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[37]);
}
// ===================================================================

class PROBUFF_NET_ENTER_LEAVE_VIEW::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ENTER_LEAVE_VIEW>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ENTER_LEAVE_VIEW, _impl_._has_bits_);
  static void set_has_m_isenter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_ENTER_LEAVE_VIEW::PROBUFF_NET_ENTER_LEAVE_VIEW(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
}
PROBUFF_NET_ENTER_LEAVE_VIEW::PROBUFF_NET_ENTER_LEAVE_VIEW(const PROBUFF_NET_ENTER_LEAVE_VIEW& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_ENTER_LEAVE_VIEW* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_units_) { from._impl_.m_units_ }
    ,/* _impl_._m_units_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.m_isenter_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.m_isenter_ = from._impl_.m_isenter_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
}

inline void PROBUFF_NET_ENTER_LEAVE_VIEW::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_units_) { arena }
    ,/* _impl_._m_units_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.m_isenter_) { false }

  };
}

PROBUFF_NET_ENTER_LEAVE_VIEW::~PROBUFF_NET_ENTER_LEAVE_VIEW() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_ENTER_LEAVE_VIEW::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_units_.~RepeatedField();
}

void PROBUFF_NET_ENTER_LEAVE_VIEW::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_ENTER_LEAVE_VIEW::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_m_units()->Clear();
  _impl_.m_isenter_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ENTER_LEAVE_VIEW::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool m_isenter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_m_isenter(&has_bits);
          _impl_.m_isenter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int64 m_units = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_m_units(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 16) {
          _internal_add_m_units(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PROBUFF_NET_ENTER_LEAVE_VIEW::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool m_isenter = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_m_isenter(), target);
  }

  // repeated int64 m_units = 2;
  {
    int byte_size = _impl_._m_units_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(2, _internal_m_units(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
  return target;
}

::size_t PROBUFF_NET_ENTER_LEAVE_VIEW::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 m_units = 2;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
        this->_internal_m_units())
    ;
    _impl_._m_units_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // optional bool m_isenter = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_ENTER_LEAVE_VIEW::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_ENTER_LEAVE_VIEW::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_ENTER_LEAVE_VIEW::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_ENTER_LEAVE_VIEW::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_ENTER_LEAVE_VIEW*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_ENTER_LEAVE_VIEW&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.m_units_.MergeFrom(from._impl_.m_units_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_m_isenter(from._internal_m_isenter());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_ENTER_LEAVE_VIEW::CopyFrom(const PROBUFF_NET_ENTER_LEAVE_VIEW& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ENTER_LEAVE_VIEW::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ENTER_LEAVE_VIEW::InternalSwap(PROBUFF_NET_ENTER_LEAVE_VIEW* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.m_units_.InternalSwap(&other->_impl_.m_units_);

  swap(_impl_.m_isenter_, other->_impl_.m_isenter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ENTER_LEAVE_VIEW::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[38]);
}
// ===================================================================

PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse::PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse() {}
PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse::PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse::MergeFrom(const PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[39]);
}
// ===================================================================

class PROBUFF_NET_SYNC_POSITION::_Internal {
 public:
};

PROBUFF_NET_SYNC_POSITION::PROBUFF_NET_SYNC_POSITION(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_SYNC_POSITION)
}
PROBUFF_NET_SYNC_POSITION::PROBUFF_NET_SYNC_POSITION(const PROBUFF_NET_SYNC_POSITION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_SYNC_POSITION* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.m_position_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.m_position_.MergeFrom(from._impl_.m_position_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_SYNC_POSITION)
}

inline void PROBUFF_NET_SYNC_POSITION::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      /*decltype(_impl_.m_position_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PROBUFF_NET_SYNC_POSITION::~PROBUFF_NET_SYNC_POSITION() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_SYNC_POSITION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_SYNC_POSITION::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_position_.~MapField();
}

void PROBUFF_NET_SYNC_POSITION::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_SYNC_POSITION::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_SYNC_POSITION)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_position_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_SYNC_POSITION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<int64, .pbnet.UNIT_POSITION> m_position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.m_position_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PROBUFF_NET_SYNC_POSITION::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_SYNC_POSITION)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int64, .pbnet.UNIT_POSITION> m_position = 1;
  if (!this->_internal_m_position().empty()) {
    using MapType = ::_pb::Map<::int64_t, ::pbnet::UNIT_POSITION>;
    using WireHelper = PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_m_position();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_SYNC_POSITION)
  return target;
}

::size_t PROBUFF_NET_SYNC_POSITION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_SYNC_POSITION)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int64, .pbnet.UNIT_POSITION> m_position = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_m_position_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::int64_t, ::pbnet::UNIT_POSITION >::const_iterator
      it = this->_internal_m_position().begin();
      it != this->_internal_m_position().end(); ++it) {
    total_size += PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_SYNC_POSITION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_SYNC_POSITION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_SYNC_POSITION::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_SYNC_POSITION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_SYNC_POSITION*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_SYNC_POSITION&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_SYNC_POSITION)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.m_position_.MergeFrom(from._impl_.m_position_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_SYNC_POSITION::CopyFrom(const PROBUFF_NET_SYNC_POSITION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_SYNC_POSITION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_SYNC_POSITION::IsInitialized() const {
  return true;
}

void PROBUFF_NET_SYNC_POSITION::InternalSwap(PROBUFF_NET_SYNC_POSITION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.m_position_.InternalSwap(&other->_impl_.m_position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_SYNC_POSITION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[40]);
}
// ===================================================================

class PROBUFF_NET_MATCHING::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MATCHING>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING, _impl_._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_tid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_MATCHING::PROBUFF_NET_MATCHING(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MATCHING)
}
PROBUFF_NET_MATCHING::PROBUFF_NET_MATCHING(const PROBUFF_NET_MATCHING& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MATCHING)
}

inline void PROBUFF_NET_MATCHING::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_type_) { 0 }

    , decltype(_impl_.m_tid_) { 0 }

  };
}

PROBUFF_NET_MATCHING::~PROBUFF_NET_MATCHING() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MATCHING)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MATCHING::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_MATCHING::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MATCHING::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MATCHING)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_type_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.m_tid_) -
        reinterpret_cast<char*>(&_impl_.m_type_)) + sizeof(_impl_.m_tid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MATCHING::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbnet.eplays m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbnet::eplays>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 m_tid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_m_tid(&has_bits);
          _impl_.m_tid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PROBUFF_NET_MATCHING::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MATCHING)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .pbnet.eplays m_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_m_type(), target);
  }

  // optional int32 m_tid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_m_tid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MATCHING)
  return target;
}

::size_t PROBUFF_NET_MATCHING::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MATCHING)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .pbnet.eplays m_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_m_type());
    }

    // optional int32 m_tid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_m_tid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MATCHING::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MATCHING::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MATCHING::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MATCHING::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MATCHING*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MATCHING&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MATCHING)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_type_ = from._impl_.m_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_tid_ = from._impl_.m_tid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MATCHING::CopyFrom(const PROBUFF_NET_MATCHING& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MATCHING)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MATCHING::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MATCHING::InternalSwap(PROBUFF_NET_MATCHING* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING, _impl_.m_tid_)
      + sizeof(PROBUFF_NET_MATCHING::_impl_.m_tid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING, _impl_.m_type_)>(
          reinterpret_cast<char*>(&_impl_.m_type_),
          reinterpret_cast<char*>(&other->_impl_.m_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MATCHING::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[41]);
}
// ===================================================================

class MATCHING_MEMBER::_Internal {
 public:
  using HasBits = decltype(std::declval<MATCHING_MEMBER>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MATCHING_MEMBER, _impl_._has_bits_);
  static void set_has_m_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_lv(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m_begmatch(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_m_isconfirm(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MATCHING_MEMBER::MATCHING_MEMBER(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.MATCHING_MEMBER)
}
MATCHING_MEMBER::MATCHING_MEMBER(const MATCHING_MEMBER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MATCHING_MEMBER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_name_) {}

    , decltype(_impl_.m_id_) {}

    , decltype(_impl_.m_lv_) {}

    , decltype(_impl_.m_begmatch_) {}

    , decltype(_impl_.m_isconfirm_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.m_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.m_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.m_name_.Set(from._internal_m_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.m_id_, &from._impl_.m_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.m_isconfirm_) -
    reinterpret_cast<char*>(&_impl_.m_id_)) + sizeof(_impl_.m_isconfirm_));
  // @@protoc_insertion_point(copy_constructor:pbnet.MATCHING_MEMBER)
}

inline void MATCHING_MEMBER::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_name_) {}

    , decltype(_impl_.m_id_) { ::int64_t{0} }

    , decltype(_impl_.m_lv_) { 0 }

    , decltype(_impl_.m_begmatch_) { 0 }

    , decltype(_impl_.m_isconfirm_) { false }

  };
  _impl_.m_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.m_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MATCHING_MEMBER::~MATCHING_MEMBER() {
  // @@protoc_insertion_point(destructor:pbnet.MATCHING_MEMBER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MATCHING_MEMBER::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_name_.Destroy();
}

void MATCHING_MEMBER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MATCHING_MEMBER::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.MATCHING_MEMBER)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.m_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.m_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.m_isconfirm_) -
        reinterpret_cast<char*>(&_impl_.m_id_)) + sizeof(_impl_.m_isconfirm_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MATCHING_MEMBER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 m_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_m_id(&has_bits);
          _impl_.m_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string m_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_m_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.MATCHING_MEMBER.m_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 m_lv = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_m_lv(&has_bits);
          _impl_.m_lv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 m_begmatch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_m_begmatch(&has_bits);
          _impl_.m_begmatch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool m_isconfirm = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_m_isconfirm(&has_bits);
          _impl_.m_isconfirm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MATCHING_MEMBER::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.MATCHING_MEMBER)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 m_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_m_id(), target);
  }

  // optional string m_name = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_m_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "pbnet.MATCHING_MEMBER.m_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional int32 m_lv = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_m_lv(), target);
  }

  // optional int32 m_begmatch = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_m_begmatch(), target);
  }

  // optional bool m_isconfirm = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_m_isconfirm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.MATCHING_MEMBER)
  return target;
}

::size_t MATCHING_MEMBER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.MATCHING_MEMBER)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string m_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_m_name());
    }

    // optional int64 m_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_m_id());
    }

    // optional int32 m_lv = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_m_lv());
    }

    // optional int32 m_begmatch = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_m_begmatch());
    }

    // optional bool m_isconfirm = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MATCHING_MEMBER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MATCHING_MEMBER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MATCHING_MEMBER::GetClassData() const { return &_class_data_; }


void MATCHING_MEMBER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MATCHING_MEMBER*>(&to_msg);
  auto& from = static_cast<const MATCHING_MEMBER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.MATCHING_MEMBER)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_m_name(from._internal_m_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_id_ = from._impl_.m_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.m_lv_ = from._impl_.m_lv_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.m_begmatch_ = from._impl_.m_begmatch_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.m_isconfirm_ = from._impl_.m_isconfirm_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MATCHING_MEMBER::CopyFrom(const MATCHING_MEMBER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.MATCHING_MEMBER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MATCHING_MEMBER::IsInitialized() const {
  return true;
}

void MATCHING_MEMBER::InternalSwap(MATCHING_MEMBER* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.m_name_, lhs_arena,
                                       &other->_impl_.m_name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MATCHING_MEMBER, _impl_.m_isconfirm_)
      + sizeof(MATCHING_MEMBER::_impl_.m_isconfirm_)
      - PROTOBUF_FIELD_OFFSET(MATCHING_MEMBER, _impl_.m_id_)>(
          reinterpret_cast<char*>(&_impl_.m_id_),
          reinterpret_cast<char*>(&other->_impl_.m_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MATCHING_MEMBER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[42]);
}
// ===================================================================

class PROBUFF_NET_MATCHING_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MATCHING_RESPONSE>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_RESPONSE, _impl_._has_bits_);
  static void set_has_m_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_MATCHING_RESPONSE::PROBUFF_NET_MATCHING_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MATCHING_RESPONSE)
}
PROBUFF_NET_MATCHING_RESPONSE::PROBUFF_NET_MATCHING_RESPONSE(const PROBUFF_NET_MATCHING_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MATCHING_RESPONSE)
}

inline void PROBUFF_NET_MATCHING_RESPONSE::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_id_) { ::int64_t{0} }

  };
}

PROBUFF_NET_MATCHING_RESPONSE::~PROBUFF_NET_MATCHING_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MATCHING_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MATCHING_RESPONSE::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_MATCHING_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MATCHING_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MATCHING_RESPONSE)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_id_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MATCHING_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 m_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_m_id(&has_bits);
          _impl_.m_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PROBUFF_NET_MATCHING_RESPONSE::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MATCHING_RESPONSE)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 m_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_m_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MATCHING_RESPONSE)
  return target;
}

::size_t PROBUFF_NET_MATCHING_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MATCHING_RESPONSE)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 m_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_m_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MATCHING_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MATCHING_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MATCHING_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MATCHING_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MATCHING_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MATCHING_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MATCHING_RESPONSE)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_m_id(from._internal_m_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MATCHING_RESPONSE::CopyFrom(const PROBUFF_NET_MATCHING_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MATCHING_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MATCHING_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MATCHING_RESPONSE::InternalSwap(PROBUFF_NET_MATCHING_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.m_id_, other->_impl_.m_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MATCHING_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[43]);
}
// ===================================================================

class PROBUFF_NET_MATCHING_CANCEL::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MATCHING_CANCEL>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_CANCEL, _impl_._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_roomid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_MATCHING_CANCEL::PROBUFF_NET_MATCHING_CANCEL(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MATCHING_CANCEL)
}
PROBUFF_NET_MATCHING_CANCEL::PROBUFF_NET_MATCHING_CANCEL(const PROBUFF_NET_MATCHING_CANCEL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MATCHING_CANCEL)
}

inline void PROBUFF_NET_MATCHING_CANCEL::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_roomid_) { ::int64_t{0} }

    , decltype(_impl_.m_type_) { 0 }

  };
}

PROBUFF_NET_MATCHING_CANCEL::~PROBUFF_NET_MATCHING_CANCEL() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MATCHING_CANCEL)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MATCHING_CANCEL::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_MATCHING_CANCEL::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MATCHING_CANCEL::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MATCHING_CANCEL)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_roomid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.m_type_) -
        reinterpret_cast<char*>(&_impl_.m_roomid_)) + sizeof(_impl_.m_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MATCHING_CANCEL::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbnet.eplays m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbnet::eplays>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 m_roomid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_m_roomid(&has_bits);
          _impl_.m_roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PROBUFF_NET_MATCHING_CANCEL::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MATCHING_CANCEL)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .pbnet.eplays m_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_m_type(), target);
  }

  // optional int64 m_roomid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_m_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MATCHING_CANCEL)
  return target;
}

::size_t PROBUFF_NET_MATCHING_CANCEL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MATCHING_CANCEL)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 m_roomid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_m_roomid());
    }

    // optional .pbnet.eplays m_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_m_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MATCHING_CANCEL::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MATCHING_CANCEL::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MATCHING_CANCEL::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MATCHING_CANCEL::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MATCHING_CANCEL*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MATCHING_CANCEL&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MATCHING_CANCEL)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_roomid_ = from._impl_.m_roomid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_type_ = from._impl_.m_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MATCHING_CANCEL::CopyFrom(const PROBUFF_NET_MATCHING_CANCEL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MATCHING_CANCEL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MATCHING_CANCEL::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MATCHING_CANCEL::InternalSwap(PROBUFF_NET_MATCHING_CANCEL* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_CANCEL, _impl_.m_type_)
      + sizeof(PROBUFF_NET_MATCHING_CANCEL::_impl_.m_type_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_CANCEL, _impl_.m_roomid_)>(
          reinterpret_cast<char*>(&_impl_.m_roomid_),
          reinterpret_cast<char*>(&other->_impl_.m_roomid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MATCHING_CANCEL::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[44]);
}
// ===================================================================

class PROBUFF_NET_MATCHING_CANCEL_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MATCHING_CANCEL_RESPONSE>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_CANCEL_RESPONSE, _impl_._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_MATCHING_CANCEL_RESPONSE::PROBUFF_NET_MATCHING_CANCEL_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE)
}
PROBUFF_NET_MATCHING_CANCEL_RESPONSE::PROBUFF_NET_MATCHING_CANCEL_RESPONSE(const PROBUFF_NET_MATCHING_CANCEL_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE)
}

inline void PROBUFF_NET_MATCHING_CANCEL_RESPONSE::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_type_) { 0 }

    , decltype(_impl_.m_stat_) { 0 }

  };
}

PROBUFF_NET_MATCHING_CANCEL_RESPONSE::~PROBUFF_NET_MATCHING_CANCEL_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MATCHING_CANCEL_RESPONSE::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_MATCHING_CANCEL_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MATCHING_CANCEL_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_type_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.m_stat_) -
        reinterpret_cast<char*>(&_impl_.m_type_)) + sizeof(_impl_.m_stat_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MATCHING_CANCEL_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbnet.eplays m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbnet::eplays>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .pbnet.ematching_cancel_stat m_stat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_m_stat(static_cast<::pbnet::ematching_cancel_stat>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PROBUFF_NET_MATCHING_CANCEL_RESPONSE::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .pbnet.eplays m_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_m_type(), target);
  }

  // optional .pbnet.ematching_cancel_stat m_stat = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE)
  return target;
}

::size_t PROBUFF_NET_MATCHING_CANCEL_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .pbnet.eplays m_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_m_type());
    }

    // optional .pbnet.ematching_cancel_stat m_stat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_m_stat());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MATCHING_CANCEL_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MATCHING_CANCEL_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MATCHING_CANCEL_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MATCHING_CANCEL_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MATCHING_CANCEL_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MATCHING_CANCEL_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_type_ = from._impl_.m_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_stat_ = from._impl_.m_stat_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MATCHING_CANCEL_RESPONSE::CopyFrom(const PROBUFF_NET_MATCHING_CANCEL_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MATCHING_CANCEL_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MATCHING_CANCEL_RESPONSE::InternalSwap(PROBUFF_NET_MATCHING_CANCEL_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_CANCEL_RESPONSE, _impl_.m_stat_)
      + sizeof(PROBUFF_NET_MATCHING_CANCEL_RESPONSE::_impl_.m_stat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_CANCEL_RESPONSE, _impl_.m_type_)>(
          reinterpret_cast<char*>(&_impl_.m_type_),
          reinterpret_cast<char*>(&other->_impl_.m_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MATCHING_CANCEL_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[45]);
}
// ===================================================================

class PROBUFF_NET_MEMBER_MATCHING_CANCEL::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MEMBER_MATCHING_CANCEL>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MEMBER_MATCHING_CANCEL, _impl_._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_canceltype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_MEMBER_MATCHING_CANCEL::PROBUFF_NET_MEMBER_MATCHING_CANCEL(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL)
}
PROBUFF_NET_MEMBER_MATCHING_CANCEL::PROBUFF_NET_MEMBER_MATCHING_CANCEL(const PROBUFF_NET_MEMBER_MATCHING_CANCEL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_MEMBER_MATCHING_CANCEL* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_cancelmember_) { from._impl_.m_cancelmember_ }
    ,/* _impl_._m_cancelmember_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.m_type_) {}

    , decltype(_impl_.m_canceltype_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_type_, &from._impl_.m_type_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.m_canceltype_) -
    reinterpret_cast<char*>(&_impl_.m_type_)) + sizeof(_impl_.m_canceltype_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL)
}

inline void PROBUFF_NET_MEMBER_MATCHING_CANCEL::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_cancelmember_) { arena }
    ,/* _impl_._m_cancelmember_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.m_type_) { 0 }

    , decltype(_impl_.m_canceltype_) { 0 }

  };
}

PROBUFF_NET_MEMBER_MATCHING_CANCEL::~PROBUFF_NET_MEMBER_MATCHING_CANCEL() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MEMBER_MATCHING_CANCEL::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_cancelmember_.~RepeatedField();
}

void PROBUFF_NET_MEMBER_MATCHING_CANCEL::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MEMBER_MATCHING_CANCEL::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_m_cancelmember()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_type_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.m_canceltype_) -
        reinterpret_cast<char*>(&_impl_.m_type_)) + sizeof(_impl_.m_canceltype_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MEMBER_MATCHING_CANCEL::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbnet.eplays m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbnet::eplays>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .pbnet.etype_matching_cancel m_canceltype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_m_canceltype(static_cast<::pbnet::etype_matching_cancel>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int64 m_cancelmember = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_m_cancelmember(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 24) {
          _internal_add_m_cancelmember(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PROBUFF_NET_MEMBER_MATCHING_CANCEL::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .pbnet.eplays m_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_m_type(), target);
  }

  // optional .pbnet.etype_matching_cancel m_canceltype = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_m_canceltype(), target);
  }

  // repeated int64 m_cancelmember = 3;
  {
    int byte_size = _impl_._m_cancelmember_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(3, _internal_m_cancelmember(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL)
  return target;
}

::size_t PROBUFF_NET_MEMBER_MATCHING_CANCEL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 m_cancelmember = 3;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
        this->_internal_m_cancelmember())
    ;
    _impl_._m_cancelmember_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .pbnet.eplays m_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_m_type());
    }

    // optional .pbnet.etype_matching_cancel m_canceltype = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_m_canceltype());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MEMBER_MATCHING_CANCEL::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MEMBER_MATCHING_CANCEL::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MEMBER_MATCHING_CANCEL::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MEMBER_MATCHING_CANCEL::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MEMBER_MATCHING_CANCEL*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MEMBER_MATCHING_CANCEL&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.m_cancelmember_.MergeFrom(from._impl_.m_cancelmember_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_type_ = from._impl_.m_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_canceltype_ = from._impl_.m_canceltype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MEMBER_MATCHING_CANCEL::CopyFrom(const PROBUFF_NET_MEMBER_MATCHING_CANCEL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MEMBER_MATCHING_CANCEL::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MEMBER_MATCHING_CANCEL::InternalSwap(PROBUFF_NET_MEMBER_MATCHING_CANCEL* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.m_cancelmember_.InternalSwap(&other->_impl_.m_cancelmember_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MEMBER_MATCHING_CANCEL, _impl_.m_canceltype_)
      + sizeof(PROBUFF_NET_MEMBER_MATCHING_CANCEL::_impl_.m_canceltype_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MEMBER_MATCHING_CANCEL, _impl_.m_type_)>(
          reinterpret_cast<char*>(&_impl_.m_type_),
          reinterpret_cast<char*>(&other->_impl_.m_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MEMBER_MATCHING_CANCEL::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[46]);
}
// ===================================================================

class PROBUFF_NET_MATCHING_WAITCONFIRM::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MATCHING_WAITCONFIRM>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_WAITCONFIRM, _impl_._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_roomid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_MATCHING_WAITCONFIRM::PROBUFF_NET_MATCHING_WAITCONFIRM(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM)
}
PROBUFF_NET_MATCHING_WAITCONFIRM::PROBUFF_NET_MATCHING_WAITCONFIRM(const PROBUFF_NET_MATCHING_WAITCONFIRM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM)
}

inline void PROBUFF_NET_MATCHING_WAITCONFIRM::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_roomid_) { ::int64_t{0} }

    , decltype(_impl_.m_type_) { 0 }

  };
}

PROBUFF_NET_MATCHING_WAITCONFIRM::~PROBUFF_NET_MATCHING_WAITCONFIRM() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MATCHING_WAITCONFIRM::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_MATCHING_WAITCONFIRM::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MATCHING_WAITCONFIRM::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_roomid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.m_type_) -
        reinterpret_cast<char*>(&_impl_.m_roomid_)) + sizeof(_impl_.m_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MATCHING_WAITCONFIRM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbnet.eplays m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbnet::eplays>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 m_roomid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_m_roomid(&has_bits);
          _impl_.m_roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PROBUFF_NET_MATCHING_WAITCONFIRM::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .pbnet.eplays m_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_m_type(), target);
  }

  // optional int64 m_roomid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_m_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM)
  return target;
}

::size_t PROBUFF_NET_MATCHING_WAITCONFIRM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 m_roomid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_m_roomid());
    }

    // optional .pbnet.eplays m_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_m_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MATCHING_WAITCONFIRM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MATCHING_WAITCONFIRM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MATCHING_WAITCONFIRM::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MATCHING_WAITCONFIRM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MATCHING_WAITCONFIRM*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MATCHING_WAITCONFIRM&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_roomid_ = from._impl_.m_roomid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_type_ = from._impl_.m_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MATCHING_WAITCONFIRM::CopyFrom(const PROBUFF_NET_MATCHING_WAITCONFIRM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MATCHING_WAITCONFIRM::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MATCHING_WAITCONFIRM::InternalSwap(PROBUFF_NET_MATCHING_WAITCONFIRM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_WAITCONFIRM, _impl_.m_type_)
      + sizeof(PROBUFF_NET_MATCHING_WAITCONFIRM::_impl_.m_type_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_WAITCONFIRM, _impl_.m_roomid_)>(
          reinterpret_cast<char*>(&_impl_.m_roomid_),
          reinterpret_cast<char*>(&other->_impl_.m_roomid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MATCHING_WAITCONFIRM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[47]);
}
// ===================================================================

class PROBUFF_NET_MATCHING_CONFIRM::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MATCHING_CONFIRM>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_CONFIRM, _impl_._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_roomid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_MATCHING_CONFIRM::PROBUFF_NET_MATCHING_CONFIRM(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MATCHING_CONFIRM)
}
PROBUFF_NET_MATCHING_CONFIRM::PROBUFF_NET_MATCHING_CONFIRM(const PROBUFF_NET_MATCHING_CONFIRM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MATCHING_CONFIRM)
}

inline void PROBUFF_NET_MATCHING_CONFIRM::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_roomid_) { ::int64_t{0} }

    , decltype(_impl_.m_type_) { 0 }

  };
}

PROBUFF_NET_MATCHING_CONFIRM::~PROBUFF_NET_MATCHING_CONFIRM() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MATCHING_CONFIRM)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MATCHING_CONFIRM::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_MATCHING_CONFIRM::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MATCHING_CONFIRM::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MATCHING_CONFIRM)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_roomid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.m_type_) -
        reinterpret_cast<char*>(&_impl_.m_roomid_)) + sizeof(_impl_.m_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MATCHING_CONFIRM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbnet.eplays m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbnet::eplays>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 m_roomid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_m_roomid(&has_bits);
          _impl_.m_roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PROBUFF_NET_MATCHING_CONFIRM::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MATCHING_CONFIRM)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .pbnet.eplays m_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_m_type(), target);
  }

  // optional int64 m_roomid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_m_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MATCHING_CONFIRM)
  return target;
}

::size_t PROBUFF_NET_MATCHING_CONFIRM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MATCHING_CONFIRM)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 m_roomid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_m_roomid());
    }

    // optional .pbnet.eplays m_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_m_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MATCHING_CONFIRM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MATCHING_CONFIRM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MATCHING_CONFIRM::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MATCHING_CONFIRM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MATCHING_CONFIRM*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MATCHING_CONFIRM&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MATCHING_CONFIRM)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_roomid_ = from._impl_.m_roomid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_type_ = from._impl_.m_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MATCHING_CONFIRM::CopyFrom(const PROBUFF_NET_MATCHING_CONFIRM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MATCHING_CONFIRM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MATCHING_CONFIRM::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MATCHING_CONFIRM::InternalSwap(PROBUFF_NET_MATCHING_CONFIRM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_CONFIRM, _impl_.m_type_)
      + sizeof(PROBUFF_NET_MATCHING_CONFIRM::_impl_.m_type_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_CONFIRM, _impl_.m_roomid_)>(
          reinterpret_cast<char*>(&_impl_.m_roomid_),
          reinterpret_cast<char*>(&other->_impl_.m_roomid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MATCHING_CONFIRM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[48]);
}
// ===================================================================

class PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MATCHING_CONFIRM_RESPONSE>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_CONFIRM_RESPONSE, _impl_._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_roomid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE)
}
PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE(const PROBUFF_NET_MATCHING_CONFIRM_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE)
}

inline void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_roomid_) { ::int64_t{0} }

    , decltype(_impl_.m_type_) { 0 }

    , decltype(_impl_.m_stat_) { 0 }

  };
}

PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::~PROBUFF_NET_MATCHING_CONFIRM_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.m_roomid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.m_stat_) -
        reinterpret_cast<char*>(&_impl_.m_roomid_)) + sizeof(_impl_.m_stat_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbnet.eplays m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbnet::eplays>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 m_roomid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_m_roomid(&has_bits);
          _impl_.m_roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .pbnet.ematching_confirm_stat m_stat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_m_stat(static_cast<::pbnet::ematching_confirm_stat>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .pbnet.eplays m_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_m_type(), target);
  }

  // optional int64 m_roomid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_m_roomid(), target);
  }

  // optional .pbnet.ematching_confirm_stat m_stat = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE)
  return target;
}

::size_t PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 m_roomid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_m_roomid());
    }

    // optional .pbnet.eplays m_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_m_type());
    }

    // optional .pbnet.ematching_confirm_stat m_stat = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_m_stat());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MATCHING_CONFIRM_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MATCHING_CONFIRM_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_roomid_ = from._impl_.m_roomid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_type_ = from._impl_.m_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.m_stat_ = from._impl_.m_stat_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::CopyFrom(const PROBUFF_NET_MATCHING_CONFIRM_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::InternalSwap(PROBUFF_NET_MATCHING_CONFIRM_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_CONFIRM_RESPONSE, _impl_.m_stat_)
      + sizeof(PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::_impl_.m_stat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_CONFIRM_RESPONSE, _impl_.m_roomid_)>(
          reinterpret_cast<char*>(&_impl_.m_roomid_),
          reinterpret_cast<char*>(&other->_impl_.m_roomid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[49]);
}
// ===================================================================

class PROBUFF_NET_SYNC_MATCHING_CONFIRM::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_SYNC_MATCHING_CONFIRM>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PROBUFF_NET_SYNC_MATCHING_CONFIRM, _impl_._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_roomid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_SYNC_MATCHING_CONFIRM::PROBUFF_NET_SYNC_MATCHING_CONFIRM(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM)
}
PROBUFF_NET_SYNC_MATCHING_CONFIRM::PROBUFF_NET_SYNC_MATCHING_CONFIRM(const PROBUFF_NET_SYNC_MATCHING_CONFIRM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_SYNC_MATCHING_CONFIRM* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_roleid_) { from._impl_.m_roleid_ }
    ,/* _impl_._m_roleid_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.m_roomid_) {}

    , decltype(_impl_.m_type_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_roomid_, &from._impl_.m_roomid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.m_type_) -
    reinterpret_cast<char*>(&_impl_.m_roomid_)) + sizeof(_impl_.m_type_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM)
}

inline void PROBUFF_NET_SYNC_MATCHING_CONFIRM::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_roleid_) { arena }
    ,/* _impl_._m_roleid_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.m_roomid_) { ::int64_t{0} }

    , decltype(_impl_.m_type_) { 0 }

  };
}

PROBUFF_NET_SYNC_MATCHING_CONFIRM::~PROBUFF_NET_SYNC_MATCHING_CONFIRM() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_SYNC_MATCHING_CONFIRM::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_roleid_.~RepeatedField();
}

void PROBUFF_NET_SYNC_MATCHING_CONFIRM::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_SYNC_MATCHING_CONFIRM::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_m_roleid()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_roomid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.m_type_) -
        reinterpret_cast<char*>(&_impl_.m_roomid_)) + sizeof(_impl_.m_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_SYNC_MATCHING_CONFIRM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbnet.eplays m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbnet::eplays>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 m_roomid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_m_roomid(&has_bits);
          _impl_.m_roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int64 m_roleid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_m_roleid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 24) {
          _internal_add_m_roleid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PROBUFF_NET_SYNC_MATCHING_CONFIRM::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .pbnet.eplays m_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_m_type(), target);
  }

  // optional int64 m_roomid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_m_roomid(), target);
  }

  // repeated int64 m_roleid = 3;
  {
    int byte_size = _impl_._m_roleid_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(3, _internal_m_roleid(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM)
  return target;
}

::size_t PROBUFF_NET_SYNC_MATCHING_CONFIRM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 m_roleid = 3;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
        this->_internal_m_roleid())
    ;
    _impl_._m_roleid_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 m_roomid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_m_roomid());
    }

    // optional .pbnet.eplays m_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_m_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_SYNC_MATCHING_CONFIRM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_SYNC_MATCHING_CONFIRM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_SYNC_MATCHING_CONFIRM::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_SYNC_MATCHING_CONFIRM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_SYNC_MATCHING_CONFIRM*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_SYNC_MATCHING_CONFIRM&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.m_roleid_.MergeFrom(from._impl_.m_roleid_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_roomid_ = from._impl_.m_roomid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_type_ = from._impl_.m_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_SYNC_MATCHING_CONFIRM::CopyFrom(const PROBUFF_NET_SYNC_MATCHING_CONFIRM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_SYNC_MATCHING_CONFIRM::IsInitialized() const {
  return true;
}

void PROBUFF_NET_SYNC_MATCHING_CONFIRM::InternalSwap(PROBUFF_NET_SYNC_MATCHING_CONFIRM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.m_roleid_.InternalSwap(&other->_impl_.m_roleid_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_SYNC_MATCHING_CONFIRM, _impl_.m_type_)
      + sizeof(PROBUFF_NET_SYNC_MATCHING_CONFIRM::_impl_.m_type_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_SYNC_MATCHING_CONFIRM, _impl_.m_roomid_)>(
          reinterpret_cast<char*>(&_impl_.m_roomid_),
          reinterpret_cast<char*>(&other->_impl_.m_roomid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_SYNC_MATCHING_CONFIRM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[50]);
}
// ===================================================================

class PROBUFF_NET_MATCHING_SYNC::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MATCHING_SYNC>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_SYNC, _impl_._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_roomid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_MATCHING_SYNC::PROBUFF_NET_MATCHING_SYNC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MATCHING_SYNC)
}
PROBUFF_NET_MATCHING_SYNC::PROBUFF_NET_MATCHING_SYNC(const PROBUFF_NET_MATCHING_SYNC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_MATCHING_SYNC* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_member_){from._impl_.m_member_}
    , decltype(_impl_.m_roomid_) {}

    , decltype(_impl_.m_type_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_roomid_, &from._impl_.m_roomid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.m_type_) -
    reinterpret_cast<char*>(&_impl_.m_roomid_)) + sizeof(_impl_.m_type_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MATCHING_SYNC)
}

inline void PROBUFF_NET_MATCHING_SYNC::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_member_){arena}
    , decltype(_impl_.m_roomid_) { ::int64_t{0} }

    , decltype(_impl_.m_type_) { 0 }

  };
}

PROBUFF_NET_MATCHING_SYNC::~PROBUFF_NET_MATCHING_SYNC() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MATCHING_SYNC)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MATCHING_SYNC::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_m_member()->~RepeatedPtrField();
}

void PROBUFF_NET_MATCHING_SYNC::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MATCHING_SYNC::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MATCHING_SYNC)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_m_member()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_roomid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.m_type_) -
        reinterpret_cast<char*>(&_impl_.m_roomid_)) + sizeof(_impl_.m_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MATCHING_SYNC::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbnet.eplays m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbnet::eplays>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 m_roomid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_m_roomid(&has_bits);
          _impl_.m_roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .pbnet.MATCHING_MEMBER m_member = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_member(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PROBUFF_NET_MATCHING_SYNC::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MATCHING_SYNC)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .pbnet.eplays m_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_m_type(), target);
  }

  // optional int64 m_roomid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_m_roomid(), target);
  }

  // repeated .pbnet.MATCHING_MEMBER m_member = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_m_member_size()); i < n; i++) {
    const auto& repfield = this->_internal_m_member(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MATCHING_SYNC)
  return target;
}

::size_t PROBUFF_NET_MATCHING_SYNC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MATCHING_SYNC)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbnet.MATCHING_MEMBER m_member = 3;
  total_size += 1UL * this->_internal_m_member_size();
  for (const auto& msg : this->_internal_m_member()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 m_roomid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_m_roomid());
    }

    // optional .pbnet.eplays m_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_m_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MATCHING_SYNC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MATCHING_SYNC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MATCHING_SYNC::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MATCHING_SYNC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MATCHING_SYNC*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MATCHING_SYNC&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MATCHING_SYNC)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_m_member()->MergeFrom(from._internal_m_member());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_roomid_ = from._impl_.m_roomid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_type_ = from._impl_.m_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MATCHING_SYNC::CopyFrom(const PROBUFF_NET_MATCHING_SYNC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MATCHING_SYNC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MATCHING_SYNC::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MATCHING_SYNC::InternalSwap(PROBUFF_NET_MATCHING_SYNC* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_m_member()->InternalSwap(other->_internal_mutable_m_member());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_SYNC, _impl_.m_type_)
      + sizeof(PROBUFF_NET_MATCHING_SYNC::_impl_.m_type_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_SYNC, _impl_.m_roomid_)>(
          reinterpret_cast<char*>(&_impl_.m_roomid_),
          reinterpret_cast<char*>(&other->_impl_.m_roomid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MATCHING_SYNC::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[51]);
}
// ===================================================================

class PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MATCHING_SUCCESS_RESPONSE>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_SUCCESS_RESPONSE, _impl_._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_roomid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::PROBUFF_NET_MATCHING_SUCCESS_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE)
}
PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::PROBUFF_NET_MATCHING_SUCCESS_RESPONSE(const PROBUFF_NET_MATCHING_SUCCESS_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE)
}

inline void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_roomid_) { ::int64_t{0} }

    , decltype(_impl_.m_type_) { 0 }

  };
}

PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::~PROBUFF_NET_MATCHING_SUCCESS_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_roomid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.m_type_) -
        reinterpret_cast<char*>(&_impl_.m_roomid_)) + sizeof(_impl_.m_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbnet.eplays m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbnet::eplays>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 m_roomid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_m_roomid(&has_bits);
          _impl_.m_roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .pbnet.eplays m_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_m_type(), target);
  }

  // optional int64 m_roomid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_m_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE)
  return target;
}

::size_t PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 m_roomid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_m_roomid());
    }

    // optional .pbnet.eplays m_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_m_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MATCHING_SUCCESS_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MATCHING_SUCCESS_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_roomid_ = from._impl_.m_roomid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_type_ = from._impl_.m_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::CopyFrom(const PROBUFF_NET_MATCHING_SUCCESS_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::InternalSwap(PROBUFF_NET_MATCHING_SUCCESS_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_SUCCESS_RESPONSE, _impl_.m_type_)
      + sizeof(PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::_impl_.m_type_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_SUCCESS_RESPONSE, _impl_.m_roomid_)>(
          reinterpret_cast<char*>(&_impl_.m_roomid_),
          reinterpret_cast<char*>(&other->_impl_.m_roomid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[52]);
}
// ===================================================================

class PROBUFF_NET_MATCHING_SUCCESS::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MATCHING_SUCCESS>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_SUCCESS, _impl_._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_roomid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_dataid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PROBUFF_NET_MATCHING_SUCCESS::PROBUFF_NET_MATCHING_SUCCESS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MATCHING_SUCCESS)
}
PROBUFF_NET_MATCHING_SUCCESS::PROBUFF_NET_MATCHING_SUCCESS(const PROBUFF_NET_MATCHING_SUCCESS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_MATCHING_SUCCESS* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_member_){from._impl_.m_member_}
    , decltype(_impl_.m_roomid_) {}

    , decltype(_impl_.m_type_) {}

    , decltype(_impl_.m_dataid_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_roomid_, &from._impl_.m_roomid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.m_dataid_) -
    reinterpret_cast<char*>(&_impl_.m_roomid_)) + sizeof(_impl_.m_dataid_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MATCHING_SUCCESS)
}

inline void PROBUFF_NET_MATCHING_SUCCESS::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_member_){arena}
    , decltype(_impl_.m_roomid_) { ::int64_t{0} }

    , decltype(_impl_.m_type_) { 0 }

    , decltype(_impl_.m_dataid_) { 0 }

  };
}

PROBUFF_NET_MATCHING_SUCCESS::~PROBUFF_NET_MATCHING_SUCCESS() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MATCHING_SUCCESS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MATCHING_SUCCESS::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_m_member()->~RepeatedPtrField();
}

void PROBUFF_NET_MATCHING_SUCCESS::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MATCHING_SUCCESS::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MATCHING_SUCCESS)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_m_member()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.m_roomid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.m_dataid_) -
        reinterpret_cast<char*>(&_impl_.m_roomid_)) + sizeof(_impl_.m_dataid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MATCHING_SUCCESS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbnet.eplays m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbnet::eplays>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 m_roomid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_m_roomid(&has_bits);
          _impl_.m_roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .pbnet.MATCHING_MEMBER m_member = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_member(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 m_dataid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_m_dataid(&has_bits);
          _impl_.m_dataid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PROBUFF_NET_MATCHING_SUCCESS::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MATCHING_SUCCESS)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .pbnet.eplays m_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_m_type(), target);
  }

  // optional int64 m_roomid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_m_roomid(), target);
  }

  // repeated .pbnet.MATCHING_MEMBER m_member = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_m_member_size()); i < n; i++) {
    const auto& repfield = this->_internal_m_member(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 m_dataid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_m_dataid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MATCHING_SUCCESS)
  return target;
}

::size_t PROBUFF_NET_MATCHING_SUCCESS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MATCHING_SUCCESS)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbnet.MATCHING_MEMBER m_member = 3;
  total_size += 1UL * this->_internal_m_member_size();
  for (const auto& msg : this->_internal_m_member()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 m_roomid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_m_roomid());
    }

    // optional .pbnet.eplays m_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_m_type());
    }

    // optional int32 m_dataid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_m_dataid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MATCHING_SUCCESS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MATCHING_SUCCESS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MATCHING_SUCCESS::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MATCHING_SUCCESS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MATCHING_SUCCESS*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MATCHING_SUCCESS&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MATCHING_SUCCESS)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_m_member()->MergeFrom(from._internal_m_member());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_roomid_ = from._impl_.m_roomid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_type_ = from._impl_.m_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.m_dataid_ = from._impl_.m_dataid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MATCHING_SUCCESS::CopyFrom(const PROBUFF_NET_MATCHING_SUCCESS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MATCHING_SUCCESS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MATCHING_SUCCESS::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MATCHING_SUCCESS::InternalSwap(PROBUFF_NET_MATCHING_SUCCESS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_m_member()->InternalSwap(other->_internal_mutable_m_member());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_SUCCESS, _impl_.m_dataid_)
      + sizeof(PROBUFF_NET_MATCHING_SUCCESS::_impl_.m_dataid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_SUCCESS, _impl_.m_roomid_)>(
          reinterpret_cast<char*>(&_impl_.m_roomid_),
          reinterpret_cast<char*>(&other->_impl_.m_roomid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MATCHING_SUCCESS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[53]);
}
// ===================================================================

class PROBUFF_NET_ENTER_PLAYS::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ENTER_PLAYS>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ENTER_PLAYS, _impl_._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_roomid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_ENTER_PLAYS::PROBUFF_NET_ENTER_PLAYS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ENTER_PLAYS)
}
PROBUFF_NET_ENTER_PLAYS::PROBUFF_NET_ENTER_PLAYS(const PROBUFF_NET_ENTER_PLAYS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ENTER_PLAYS)
}

inline void PROBUFF_NET_ENTER_PLAYS::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_roomid_) { ::int64_t{0} }

    , decltype(_impl_.m_type_) { 0 }

  };
}

PROBUFF_NET_ENTER_PLAYS::~PROBUFF_NET_ENTER_PLAYS() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ENTER_PLAYS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_ENTER_PLAYS::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_ENTER_PLAYS::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_ENTER_PLAYS::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ENTER_PLAYS)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_roomid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.m_type_) -
        reinterpret_cast<char*>(&_impl_.m_roomid_)) + sizeof(_impl_.m_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ENTER_PLAYS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbnet.eplays m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbnet::eplays>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 m_roomid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_m_roomid(&has_bits);
          _impl_.m_roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PROBUFF_NET_ENTER_PLAYS::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ENTER_PLAYS)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .pbnet.eplays m_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_m_type(), target);
  }

  // optional int64 m_roomid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_m_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ENTER_PLAYS)
  return target;
}

::size_t PROBUFF_NET_ENTER_PLAYS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ENTER_PLAYS)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 m_roomid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_m_roomid());
    }

    // optional .pbnet.eplays m_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_m_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_ENTER_PLAYS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_ENTER_PLAYS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_ENTER_PLAYS::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_ENTER_PLAYS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_ENTER_PLAYS*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_ENTER_PLAYS&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ENTER_PLAYS)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_roomid_ = from._impl_.m_roomid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_type_ = from._impl_.m_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_ENTER_PLAYS::CopyFrom(const PROBUFF_NET_ENTER_PLAYS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ENTER_PLAYS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ENTER_PLAYS::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ENTER_PLAYS::InternalSwap(PROBUFF_NET_ENTER_PLAYS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ENTER_PLAYS, _impl_.m_type_)
      + sizeof(PROBUFF_NET_ENTER_PLAYS::_impl_.m_type_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ENTER_PLAYS, _impl_.m_roomid_)>(
          reinterpret_cast<char*>(&_impl_.m_roomid_),
          reinterpret_cast<char*>(&other->_impl_.m_roomid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ENTER_PLAYS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[54]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace pbnet
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_HEARTBEAT*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_HEARTBEAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_HEARTBEAT >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ERROR*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ERROR >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ERROR >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ERROR_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ERROR_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ERROR_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_GET_TIME*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_GET_TIME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_GET_TIME >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_GET_TIME_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_GET_TIME_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_GET_TIME_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_GET_NOTICE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_GET_NOTICE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_GET_NOTICE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_GET_NOTICE_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_GET_NOTICE_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_GET_NOTICE_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ACOUNT_LOGIN*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ACOUNT_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ACOUNT_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ROLE_LOGIN*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ROLE_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ROLE_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ROLE_SYNC*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ROLE_SYNC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ROLE_SYNC >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_BAG_SYNC*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_BAG_SYNC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_BAG_SYNC >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_BAG_UPDATE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_BAG_UPDATE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_BAG_UPDATE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_CMD*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_CMD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_CMD >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_CHAT*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_CHAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_CHAT >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::chatitem*
Arena::CreateMaybeMessage< ::pbnet::chatitem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::chatitem >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_CHAT_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_CHAT_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_CHAT_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_SWITCH_LINE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_SWITCH_LINE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_SWITCH_LINE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_LIST*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_LIST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_LIST >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_READ*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_READ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_READ >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_DRAW*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_DRAW >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_DRAW >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_DEL*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_DEL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_DEL >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::VECTOR2*
Arena::CreateMaybeMessage< ::pbnet::VECTOR2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::VECTOR2 >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::VECTOR3*
Arena::CreateMaybeMessage< ::pbnet::VECTOR3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::VECTOR3 >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::UNIT_POSITION*
Arena::CreateMaybeMessage< ::pbnet::UNIT_POSITION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::UNIT_POSITION >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::UNIT*
Arena::CreateMaybeMessage< ::pbnet::UNIT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::UNIT >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_SYNC_UNIT*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_SYNC_UNIT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_SYNC_UNIT >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_SYNC_POSITION*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_SYNC_POSITION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_SYNC_POSITION >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MATCHING*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MATCHING >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MATCHING >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::MATCHING_MEMBER*
Arena::CreateMaybeMessage< ::pbnet::MATCHING_MEMBER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::MATCHING_MEMBER >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MATCHING_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MATCHING_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MATCHING_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MATCHING_CANCEL*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MATCHING_CANCEL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MATCHING_CANCEL >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MATCHING_CANCEL_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MATCHING_CANCEL_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MATCHING_CANCEL_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MEMBER_MATCHING_CANCEL*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MEMBER_MATCHING_CANCEL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MEMBER_MATCHING_CANCEL >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MATCHING_WAITCONFIRM*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MATCHING_WAITCONFIRM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MATCHING_WAITCONFIRM >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MATCHING_CONFIRM*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MATCHING_CONFIRM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MATCHING_CONFIRM >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_SYNC_MATCHING_CONFIRM*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_SYNC_MATCHING_CONFIRM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_SYNC_MATCHING_CONFIRM >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MATCHING_SYNC*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MATCHING_SYNC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MATCHING_SYNC >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MATCHING_SUCCESS_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MATCHING_SUCCESS_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MATCHING_SUCCESS_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MATCHING_SUCCESS*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MATCHING_SUCCESS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MATCHING_SUCCESS >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ENTER_PLAYS*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ENTER_PLAYS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ENTER_PLAYS >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
