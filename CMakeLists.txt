cmake_minimum_required(VERSION 2.8)

PROJECT (ngl)

set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MTd")
set(CMAKE_CXX_STANDARD 20)
#set(CMAKE_CXX_STANDARD 17)

IF (CMAKE_SYSTEM_NAME MATCHES "Linux")
#set(CMAKE_CXX_FLAGS "${COLLECT_GCC} -std=c++0x -pthread -lrt -L/usr/lib64/mysql -lmysqlclient -lcurl")
#-lboost_thread
#set(CMAKE_CXX_FLAGS "${COLLECT_GCC} -D_GLIBCXX_USE_CXX11_ABI=0 -Wfatal-errors -std=c++20 -march=native -msse4.1 -O3 -pthread -lrt -lprotobuf -L/usr/lib64/mysql -L/root/lbtest/lbtest/lib -lmysqlclient -lcurl -lcryptopp -lmycorekkk -lboost -I/usr/include/mysql -I/usr/include/curl -I/root/lbtest/lbtest/3part/boost/libs/atomic/src/")
set(CMAKE_CXX_FLAGS "${COLLECT_GCC} -std=c++20 -march=native -msse4.1 -O3 -lrt -L/usr/lib64/mysql/ -lmysqlclient -lcurl -lcryptopp -L`pwd`/../../../lib -I/usr/include/mysql -I/usr/include/curl")
INCLUDE_DIRECTORIES(3part/boost/libs/atomic/src)
SET(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)
ENDIF (CMAKE_SYSTEM_NAME MATCHES "Linux")

IF (CMAKE_SYSTEM_NAME MATCHES "Windows")
SET(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)
ENDIF (CMAKE_SYSTEM_NAME MATCHES "Windows")

SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
INCLUDE_DIRECTORIES(/)

LINK_DIRECTORIES(${PROJECT_SOURCE_DIR}/lib)

INCLUDE_DIRECTORIES(3part/MPI/Include)

INCLUDE_DIRECTORIES(3part/MPI/Include)
INCLUDE_DIRECTORIES(3part/MPI/Include/x86)
INCLUDE_DIRECTORIES(3part)
INCLUDE_DIRECTORIES(3part/boost)
INCLUDE_DIRECTORIES(3part/boost/boost)
INCLUDE_DIRECTORIES(3part/MPI/Include)
INCLUDE_DIRECTORIES(3part/curl/)
INCLUDE_DIRECTORIES(3part/curl/include/curl)
INCLUDE_DIRECTORIES(3part/curl/include)
INCLUDE_DIRECTORIES(3part/curl/include)
INCLUDE_DIRECTORIES(3part/curl/openssl)
INCLUDE_DIRECTORIES(3part/mysql/)
INCLUDE_DIRECTORIES(3part/mysql/include)
INCLUDE_DIRECTORIES(3part/hiredis_master/)
INCLUDE_DIRECTORIES(3part/zlib_win/include/)
INCLUDE_DIRECTORIES(3part/protobuf/include)
INCLUDE_DIRECTORIES(3part/protobuf/include/google)
#INCLUDE_DIRECTORIES(3part/sol2)
#INCLUDE_DIRECTORIES(3part/sol2/include)
#INCLUDE_DIRECTORIES(3part/lua/src)

INCLUDE_DIRECTORIES(3part/lua/)
INCLUDE_DIRECTORIES(3part/lua/src)
INCLUDE_DIRECTORIES(3part/lua/lib)
#INCLUDE_DIRECTORIES(3part/benchmark-1.8.3/benchmark-1.8.3/include)
#INCLUDE_DIRECTORIES(3part/benchmark-1.8.3/benchmark-1.8.3/include/benchmark)


INCLUDE_DIRECTORIES(public/)
INCLUDE_DIRECTORIES(public/cpp)
INCLUDE_DIRECTORIES(public/cpp/net/)
INCLUDE_DIRECTORIES(public/cpp/net/tcp)
INCLUDE_DIRECTORIES(public/cpp/net/udp)
INCLUDE_DIRECTORIES(public/cpp/net/udp/asio_kcp)
INCLUDE_DIRECTORIES(public/cpp/net/udp/asio_kcp2)
INCLUDE_DIRECTORIES(public/cpp/protocol/)
INCLUDE_DIRECTORIES(public/cpp/protocol/protocol/)
INCLUDE_DIRECTORIES(public/cpp/protocol/protobuf/)
INCLUDE_DIRECTORIES(public/cpp/protocol/protobuf/lua)
INCLUDE_DIRECTORIES(public/cpp/actor/)
INCLUDE_DIRECTORIES(public/cpp/actor/actor_base)
INCLUDE_DIRECTORIES(public/cpp/actor/actor_base/include)
INCLUDE_DIRECTORIES(public/cpp/actor/actor_base/src)
INCLUDE_DIRECTORIES(public/cpp/actor/actor_logic)
INCLUDE_DIRECTORIES(public/cpp/actor/actor_logic/game/)
INCLUDE_DIRECTORIES(public/cpp/actor/actor_logic/gateway/)
INCLUDE_DIRECTORIES(public/cpp/actor/actor_logic/login/)
INCLUDE_DIRECTORIES(public/cpp/actor/actor_logic/robot/)
INCLUDE_DIRECTORIES(public/cpp/actor/actor_logic/world)
INCLUDE_DIRECTORIES(public/cpp/actor/actor_logic/log)
INCLUDE_DIRECTORIES(public/cpp/actor/actor_logic/cross)
INCLUDE_DIRECTORIES(public/cpp/actor/actor_logic/reloadcsv)
INCLUDE_DIRECTORIES(public/cpp/actor/actor_logic/kcp)
INCLUDE_DIRECTORIES(public/cpp/tools/)
INCLUDE_DIRECTORIES(public/cpp/tools/serialize/)
INCLUDE_DIRECTORIES(public/cpp/tools/tab/)
INCLUDE_DIRECTORIES(public/cpp/tools/tab/csv/)
INCLUDE_DIRECTORIES(public/cpp/tools/tab/csv/protocol)
INCLUDE_DIRECTORIES(public/cpp/tools/tab/xml/)
INCLUDE_DIRECTORIES(public/cpp/tools/tab/json/)
INCLUDE_DIRECTORIES(public/cpp/tools/db/)
INCLUDE_DIRECTORIES(public/cpp/tools/db/mysql/)
INCLUDE_DIRECTORIES(public/cpp/tools/db/redis/)
INCLUDE_DIRECTORIES(public/cpp/tools/dmp/)
INCLUDE_DIRECTORIES(public/cpp/tools/curl/)
INCLUDE_DIRECTORIES(public/cpp/tools/log/)
INCLUDE_DIRECTORIES(public/cpp/tools/luatools/)
INCLUDE_DIRECTORIES(public/cpp/tools/notify/)

INCLUDE_DIRECTORIES(public/cpp/logic/)
INCLUDE_DIRECTORIES(public/cpp/logic/public)
INCLUDE_DIRECTORIES(public/cpp/logic/public/role)
INCLUDE_DIRECTORIES(public/cpp/logic/public/role/attribute)
INCLUDE_DIRECTORIES(public/cpp/logic/public/role/bag)
INCLUDE_DIRECTORIES(public/cpp/logic/public/role/task)
INCLUDE_DIRECTORIES(public/cpp/logic/public/role/map)
INCLUDE_DIRECTORIES(public/cpp/logic/public/role/matching)
INCLUDE_DIRECTORIES(public/cpp/logic/public/role/plays)
INCLUDE_DIRECTORIES(public/cpp/logic/public/public)
INCLUDE_DIRECTORIES(public/cpp/logic/public/public/notice)
INCLUDE_DIRECTORIES(public/cpp/logic/public/public/gm)
INCLUDE_DIRECTORIES(public/cpp/logic/public/public/mail)
INCLUDE_DIRECTORIES(public/cpp/logic/public/public/chat)
INCLUDE_DIRECTORIES(public/cpp/logic/public/public/activity)
INCLUDE_DIRECTORIES(public/cpp/logic/public/public/ranklist)
INCLUDE_DIRECTORIES(public/cpp/logic/public/public/brief)
INCLUDE_DIRECTORIES(public/cpp/logic/public/template_tab)
INCLUDE_DIRECTORIES(public/cpp/logic/tools)

INCLUDE_DIRECTORIES(third)
INCLUDE_DIRECTORIES(third/boost)
INCLUDE_DIRECTORIES(third/protobuf)
INCLUDE_DIRECTORIES(third/protobuf/include)
INCLUDE_DIRECTORIES(third/curl)
INCLUDE_DIRECTORIES(third/curl/include)
INCLUDE_DIRECTORIES(third/curl/include/curl)

#ADD_DEFINITIONS(-DCMAKE_CXX_FLAGS=-DTBB_ALLOCATOR_TRAITS_BROKEN)

IF (CMAKE_SYSTEM_NAME MATCHES "Windows")
ADD_DEFINITIONS(-DBOOST_ALL_NO_LIB)
ADD_DEFINITIONS(-DBOOST_THREAD_BUILD_DLL)
ADD_DEFINITIONS(-DBUILDING_LIBCURL)
ADD_DEFINITIONS(-DHTTP_ONLY)
ENDIF (CMAKE_SYSTEM_NAME MATCHES "Windows")
#ADD_DEFINITIONS(-DBOOST_DATE_TIME_HAS_REENTRANT_STD_FUNCTIONS)
#curl
#ENDIF (CMAKE_SYSTEM_NAME MATCHES "Windows")


IF(CMAKE_SYSTEM_NAME MATCHES "Linux")
#ADD_DEFINITIONS(-DBOOST_HAS_THREADS)
ADD_DEFINITIONS(-DBOOST_HAS_PTHREADS)
ADD_DEFINITIONS(-DBOOST_SP_USE_PTHREADS)
ADD_DEFINITIONS(-DBOOST_AC_USE_PTHREADS)
ENDIF (CMAKE_SYSTEM_NAME MATCHES "Linux")

IF(CMAKE_SYSTEM_NAME MATCHES "Linux")
LINK_DIRECTORIES(${PROJECT_SOURCE_DIR}/lib)
ENDIF (CMAKE_SYSTEM_NAME MATCHES "Linux")

IF (CMAKE_SYSTEM_NAME MATCHES "Windows")
LINK_DIRECTORIES(${PROJECT_SOURCE_DIR}/lib/Debug)
#LINK_DIRECTORIES(${PROJECT_SOURCE_DIR}/3part/MPI/Lib/x86)
ENDIF (CMAKE_SYSTEM_NAME MATCHES "Windows")

IF (CMAKE_SYSTEM_NAME MATCHES "Windows")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /bigobj")
ENDIF (CMAKE_SYSTEM_NAME MATCHES "Windows")



#IF (CMAKE_SYSTEM_NAME MATCHES "Windows")
#add_subdirectory(3part)
#add_subdirectory(public)
#ENDIF (CMAKE_SYSTEM_NAME MATCHES "Windows")
add_subdirectory(server)

######################使用多处理器编译########################
#IF (WIN32)
		if(MSVC)
				OPTION(USE_MP "use multiple" ON)
				OPTION(ProjectConfig_Global_COMPILE_FLAGS_WITH_MP 
					"Set The Global Option COMPILE_FLAGS /MP to target." ON)
				if(ProjectConfig_Global_COMPILE_FLAGS_WITH_MP OR USE_MP)
					set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /MP")
					set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")
				endif()
				set(VS_STARTUP_PROJECT ${PROJECT_NAME})
		ENDIF(MSVC)
#ENDIF()


