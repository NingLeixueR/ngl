#include "serialize.h"
#include "csv.h"
#include "csvpair.h"
#include "protocol_define.h"
#include "actor_define.h"

enum ENET_CONFIG
{
	net_config_send_buff_maxbyte = 8129,	
	net_config_recv_buff_maxbyte = 8129,	
	net_config_logic_pthread_max_size = 8,	
	net_config_socket_pthread_max_size = 8,	
};

enum EUDP_OPERATOR
{
	EUDP_OPERATOR_ACK,	// 确认包
	EUDP_OPERATOR_DATA,	// 传输子数据包
	EUDP_OPERATOR_HEARTBEAT,	// 心跳主要用来确认对端是否在线
};

enum EPH
{
	EPH_BYTES = 0,	// 协议字节数
	EPH_TIME,	// 发送端的时间戳
	EPH_PROTOCOLNUM,	// 协议号
	EPH_PROTOCOLTYPE,	// 协议类型 EPROTOCOL_TYPE
	EPH_ACTOR_TYPEAREA,	// ACTOR_TYPE_AREA
	EPH_ACTOR_ID,	// ACTOR_ID
	EPH_REQUEST_ACTOR_TYPEAREA,	// Request REQUEST_ACTOR_TYPE_AREA
	EPH_REQUEST_ACTOR_ID,	// Request ACTOR_ID
	EPH_SUM,	
};

enum ENUM_DB
{
	ENUM_DB_ACCOUNT,		// 账号数据
	ENUM_DB_ROLE,			// 玩家数据
	ENUM_DB_BRIEF,			// 玩家简要数据
	ENUM_DB_BAG,			// 背包数据
	ENUM_DB_KEYVALUE,		// 键值数据
	ENUM_DB_MAIL,			// 邮件数据
	ENUM_DB_GUILD,			// 工会数据
	ENUM_DB_NOTICE,			// 公告数据
	ENUM_DB_RANKLIST,		// 排行数据
	ENUM_DB_ACTIVITY,		// 活动数据
	ENUM_DB_COUNT,
};

enum ENUM_ACTOR
{
	ACTOR_NONE = -1,
	//#######################  非单例  #####################
	ACTOR_ROLE = 1,
	ACTOR_ROBOT,										// 机器人
	ACTOR_GUILD,										// 工会	
	//#######################  单例  #######################
	ACTOR_SIGNLE_START,
	ACTOR_ADDRESS_SERVER = ACTOR_SIGNLE_START,				// 单例 actor address server  管理分发地址的中心
	ACTOR_ADDRESS_CLIENT,									// 单例 actor address client 
	ACTOR_LOGIN,
	ACTOR_GATEWAY,											// 网关
	ACTOR_GATEWAY_CLIENT2GAME,								// 网关 [Client]->[Game]
	ACTOR_GATEWAY_GAME2CLIENT,								// 网关 [Game]	->[Client]
	ACTOR_SPROCESS,
	ACTOR_LOG,
	ACTOR_MANAGE_ROLE,
	ACTOR_MANAGE_ROBOT,
	ACTOR_MANAGE_GUILD,										// 工会管理器
	ACTOR_MANAGE_MAP,
	ACTOR_RELOADCSV,										// 接收分发然后重载csv
	ACTOR_RELOADCSV_DISTRIBUTE,								// 分发csv
	ACTOR_NOTICE,											// 公告
	ACTOR_GM,												// GM
	ACTOR_MAIL,												// 邮件
	ACTOR_CHAT,												// 聊天
	ACTOR_RANKLIST,											// 排行榜
	ACTOR_ACTIVITY_MANAGE,									// 活动管理
	ACTOR_BRIEF,											// brief简要信息
	ACTOR_CROSS,											// 跨服
	ACTOR_CROSSDB,											// 跨服数据库
	ACTOR_CROSSCHAT,										// 跨服聊天
	ACTOR_DB,												// 必须是最后一个
	ACTOR_SIGNLE_FINISH = ACTOR_DB+ENUM_DB_COUNT,
	ACTOR_COUNT = ACTOR_SIGNLE_FINISH,
};

enum NODE_TYPE
{
	DB = 1,					// 数据库服务器
	ACTORSERVER = 2,		// actor 服务器
	GAME = 3,				// 逻辑服务器
	GATEWAY = 4,			// 网关服务器
	LOGIN = 5,				// 登录服务器
	ROBOT = 6,				// 测试机器人服务器
	WORLD = 7,				// 世界服务器
	LOG = 8,				// 日志服务器
	RELOADCSV = 9,			// 重载分发csv服务器
	CROSS = 10,				// 跨服服务器
	CROSSDB = 11,			// 跨服数据库服务器
	FAIL = -1,				// 服务器类型错误
};

enum ENET_PROTOCOL
{
	ENET_TCP = 1,
	ENET_UDP = 2,
	ENET_WS = 3,
};

struct tab_servers
{
	int32_t m_id;
	string m_name;
	string m_remarks;

	int16_t m_area;						// 区服
	NODE_TYPE m_type;					// 服务器类型(1db2actorserver3game4gateway5login6robot7world8log9reloadcsv10reloadcsv_tools)
	int32_t m_tcount;					// 同类型服务器的序号
	ENET_PROTOCOL m_net;				// 服务器协议(1tcp2udp3ws)
	string m_ip;						// ip
	int16_t m_port;						// 端口
	int32_t m_threadnum;				// socket线程数
	int32_t m_actorthreadnum;			// actor线程池线程数
	bool m_outernet;					// 是否允许外网访问

	int32_t m_db;									// 连接的db进程id
	vector<int32_t> m_actorserver;					// 连接的actorserver进程id(跨服需要填写多个actorserver)
	int32_t m_reloadcsv;							// 连接的reloadcsv进程id
	int32_t m_login;								// 连接的login进程id
	int16_t m_crossarea;							// 跨服区服
};

struct tab_dbload
{
	int32_t m_id;
	string m_name;
	string m_remarks;

	bool m_isloadall;			// 是否需要启动加载全部数据
	bool m_network;				// 是否允许通过网络分发
	int m_sendmaxcount;			// 单次最多发送数量
};



struct tab_errormessage
{
	int32_t m_id;
	string m_name;
	string m_remarks;
	string m_message;	// 错误描述
};

struct tab_specialid
{
	int32_t m_id;
	string m_name;
	string m_remarks;
	string m_value;
};

enum EnumModule
{
	E_ModuleNull = 0,			// 空	
	E_ModuleRoot = 1,			// 卡牌(链尾)
	E_ModuleBuff = 2,			// 玩家buff
	E_ModuleEquip = 3,			// 装备
	E_ModuleEquipWeapon = 4,	// 装备武器
	E_ModuleEquipHelmet = 5,	// 装备头盔
	E_ModuleEquipCloth = 6,		// 装备衣服
	E_ModuleEquipPants = 7,		// 装备护腿
	E_ModuleCount = 8,			// 数量 	
};

enum EnumAttribute
{
	E_Null = 0,
	E_Attack = 1,	// [攻击]
	E_Defense = 2,	// [防御]
	E_Hp = 3,		// [血量]
	E_Anger = 4,	// [怒气]
	E_Speed = 5,	// [速度]
	E_Count = 6,
};

struct tab_attribute
{
	int32_t m_id;
	string m_name;
	string m_remarks;

	float m_fightcoefficient;	// 属性提供的战力系数
	int32_t m_initvalue;			// 属性初始值
	int32_t m_uplimit;			// 上限
	int32_t m_lowlimit;			// 下限
};

// 物品来源
enum EItemSrc
{
	EItemSrcNoraml = 0,
	EItemSrcGM = 1,
};

enum EItemConsume
{
	EItemConsumeNoraml = 0,
	EItemConsumeGM = 1,
};

enum EItemType
{
	EEquipment = 1, 		// 装备
	EMaterial = 2,			// 材料
	EMoneyGold = 3,			// 金币
	EMoneySilver = 4,		// 银币
	ECard = 5,				// 卡牌
};

enum EQuality
{
	EQualityGrey = 0,		//灰色
	EQualityGreen = 1,		//绿色
	EQualityYellow = 2,		//黄色
	EQualityOrange = 3,		//橙色
	EQualityRed = 4,		//红色
};

struct tab_item
{
	int32_t m_id;
	string m_name;
	string m_remarks;

	int32_t m_ranks;		// 排序值
	EItemType m_type;		// 物品类型EItemType(1装备,2材料,3金币,4银币)
	int32_t m_quality;		// 物品品质(EQuality)
	bool m_isstack;			// 是否可堆叠
};

struct attributevalue
{
	int32_t m_id = 1;			// 属性id(EnumAttribute)
	bool m_isratio = 3;		// 是否万分比属性
	int32_t m_value = 2;		// 属性值
}

enum EEquip
{
	EEquipWeapon = 1,	// 武器
	EEquipHelmet = 2,	// 头盔
	EEquipCloth = 3,	// 衣服
	EEquipPants = 4,	// 护腿
};

struct tab_equip
{
	int32_t m_id;
	string m_name;
	string m_remarks;

	EEquip m_position;							// 部位EEquip(1武器2头盔3衣服4护腿)
	vector<attributevalue> m_attributevalues;	// 装备属性
};

struct tab_equiplv
{
	int32_t m_id;
	string m_name;
	string m_remarks;

	int32_t m_consume;								// 升级消耗id
	vector<attributevalue> m_attributevalues;	// 装备属性
};

struct tab_card
{
	int32_t m_id;
	string m_name;
	string m_remarks;

	EQuality m_quality;							// 品质EQuality(0灰色1绿色2黄色3橙色4红色)
	vector<attributevalue> m_attributevalues;	// 属性
};

struct trandom
{
	int32_t m_id;
	int32_t m_min;
	int32_t m_max;
	int32_t m_weight;
};

// 随机库
struct tab_random
{
	int32_t m_id;
	string m_name;
	string m_remarks;

	vector<trandom> m_randomdatas;			// trandom(id*min*max*weight)
	bool m_exclusive;						// 排他性多次掉落时使用（true不会掉落出已掉落物品 false会掉落出已掉落物品）
	int32_t m_count;						// 随机数量
	int32_t m_calendarids;					// 是否关联日历表,只有日历触发才会执行此掉落
	vector<int32_t> m_childrandomids;		// 子随机
};

struct tconsume
{
	int32_t m_tid;
	int32_t m_count;
};

struct tab_consume
{
	int32_t m_id;
	string m_name;
	string m_remarks;

	vector<tconsume> m_consumeitems;	// tid*count
};

// 物品合成(物品转化)
struct tab_synthesis
{
	int32_t m_id;
	string m_name;
	string m_remarks;

	int32_t m_consume;		// 消耗列表
	int32_t m_generate;	// 随机表(tab_rando)id 随机成功物品列表
};

enum ECalendar
{
	Week = 0,				// 周几
	ServerOpen = 1,			// 以开服时间以来的天数
	RegularSlot = 2,		// 固定时间段
};

struct tweek
{
	int32_t m_week;			// 周几
	string m_opentime;		//  开启时间 HH:mm:ss
	string m_closetime;		//  结束时间 HH:mm:ss
};

struct tserveropen
{
	int32_t m_beg;			// 开服后多少天开启
	string m_opentime;		// 开启时间 HH:mm:ss
	int32_t m_end;			// 开服后多少天结束
	string m_closetime;		// 结束时间 HH:mm:ss
};

struct tregularslot
{
	string m_opentime;		// 开启时间 YYYY-MM-DD HH:mm:ss
	string m_closetime;		// 结束时间 YYYY-MM-DD HH:mm:ss
};

// 日历
struct tab_calendar
{
	int32_t m_id;
	string m_name;
	string m_remarks;

	ECalendar m_type;							//ECalendar(0:周几,1:以开服时间以来的天数,2:固定时间段)
	vector<tweek> m_week;						//m_type=0,tweek(周几(1-7)*开启时间HH:mm:ss*结束时间HH:mm:ss)
	vector<tserveropen> m_serveropen;			//m_type=1,tserveropen(开服后多少天开启*开启时间HH:mm:ss*开服后多少天结束*结束时间HH:mm:ss)
	vector<tregularslot> m_tregularslot;		//m_type=2,tregularslot(开启时间YYYY/MM/DD HH:mm:ss*结束时间YYYY/MM/DD HH:mm:ss)
};

struct tab_mail
{
	int32_t m_id;
	string m_name;
	string m_remarks;

	string m_title;			// 邮件标题
	string m_author;		// 邮件作者
	string m_content;		// 邮件内容
};

struct tab_chat
{
	int32_t m_id;
	string m_name;
	string m_remarks;

	int32_t m_time;				// 聊天发言间隔
	int32_t m_count;			// 聊天发言最大数量
};

enum EActivity
{
	EActivityDrawCompliance = 1,				// 类似咸鱼之王的<<招募达标>>
};

struct tab_activity
{
	int32_t m_id;				// 活动id
	string m_name;
	string m_remarks;

	EActivity m_type;			// 活动类型(1类似咸鱼之王的<<招募达标>>)
	int32_t m_calendarid;		// 关联的脚本日历
};

struct tab_activity_drawcompliance
{
	int32_t m_id;				// 累计次数
	string m_name;
	string m_remarks;

	int32_t m_dropid;				// 掉落id
	int32_t m_mailid;				// 邮件id
};

enum EReceiveTask
{
	EReceiveTaskRoleLv  = 1,		// 玩家等级
	EReceiveTaskRoleVip = 2,		// 玩家vip等级
	EReceiveTaskTaskId  = 3,		// 完成某ID任务
};

struct task_receive
{
	EReceiveTask m_receivetype;		// EReceiveTask(1.玩家等级达到X 2.主公vip等级达到x 3.完成某ID任务)
	int32_t m_parmint1;
	int32_t m_parmint2;
	string m_parmstring1;
	string m_parmstring2;
};

enum EFinshTask
{
	EFinshTaskRoleLv = 1,		// 玩家等级
	EFinshTaskRoleVip = 2,	// 玩家vip等级
};

struct task_finsh
{
	EFinshTask m_finshtype;		// EFinshTask(1.玩家等级达到X 2.主公vip等级达到x)
	int32_t m_parmint1;
	int32_t m_parmint2;
	string m_parmstring1;
	string m_parmstring2;
};

struct tab_task
{
	int32_t m_id;				// 任务id
	string m_name;
	string m_remarks;

	vector<task_receive> m_taskreceive;		// 接收此任务的前提
	vector<task_finsh> m_taskfinsh;			// 完成此任务的条件
	int32_t m_dropid;						// 任务奖励
};





